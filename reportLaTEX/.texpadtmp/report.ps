%!PS-Adobe-2.0
%%Creator: dvips(k) 5.997 Copyright 2017 Radical Eye Software
%%Title: /Users/aleksczernicki/Documents/Uni/PW/metodyKomputeroweWSpalaniu/MKWS/reportLaTEX/.texpadtmp/report.dvi
%%CreationDate: Fri Apr 27 13:13:59 2018
%%Pages: 7
%%PageOrder: Ascend
%%BoundingBox: 0 0 612 792
%%DocumentFonts: URWPalladioL-Roma URWPalladioL-Bold CMMI12 CMR8 CMR12
%%+ URWPalladioL-Ital
%%DocumentPaperSizes: Letter
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: /Library/TeX/texbin/dvips -o
%+ /Users/aleksczernicki/Documents/Uni/PW/metodyKomputeroweWSpalaniu/MKWS/reportLaTEX/.texpadtmp/report.ps
%+ /Users/aleksczernicki/Documents/Uni/PW/metodyKomputeroweWSpalaniu/MKWS/reportLaTEX/.texpadtmp/report.dvi
%DVIPSParameters: dpi=600
%DVIPSSource:  TeX output 2018.04.27:1513
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/dir 0 def/dyy{/dir 0 def}B/dyt{/dir 1 def}B/dty{/dir 2 def}B/dtt{/dir 3
def}B/p{dir 2 eq{-90 rotate show 90 rotate}{dir 3 eq{-90 rotate show 90
rotate}{show}ifelse}ifelse}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0
N/Ry 0 N/V{}B/RV/v{/Ry X/Rx X V}B statusdict begin/product where{pop
false[(Display)(NeXT)(LaserWriter 16/600)]{A length product length le{A
length product exch 0 exch getinterval eq{pop true exit}if}{pop}ifelse}
forall}{false}ifelse end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{
BDot}imagemask grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat
{BDot}imagemask grestore}}ifelse B/QV{gsave newpath transform round exch
round exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0
rlineto fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B
/M{S p delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}
B/g{0 M}B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p
-3 w}B/n{p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{
0 S rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
% $Id: pstricks.pro 446 2017-04-19 11:40:55Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 1.24, 2016/04/22
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
% Define the follwing gs-functions if not known, eg when using distiller
%
systemdict /.setopacityalpha known not {/.setopacityalpha { pop } def } if
systemdict /.setblendmode known not {/.setblendmode { pop } def } if
systemdict /.setshapealpha known not {/.setshapealpha { pop } def } if
%
/tx@Dict 200 dict def 				% the main PSTricks dictionary
tx@Dict begin
/ADict 25 dict def				% The arrow dictionary
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/Log { dup 1e-20 lt { pop -1e30 }{ log } ifelse } def % control the log
/tan { dup cos abs 1.e-10 lt 
  { pop 1.e10 } 				% return 1.e10 as infinit
  { dup sin exch cos div } ifelse 		% default sin/cos
} def
/Tan { dup sin exch cos Div } def 		% sin(x)/cos(x) x in degrees
/Acos {dup dup mul neg 1 add dup 0 lt {		% arc cos, returns 0 when negative root
  pop pop 0 }{ sqrt exch atan} ifelse } def
/Acos2 { 2 dict begin 
  /x ED /y ED
  y abs 1.0e-20 lt { 1.0e30 } if
  x y div 
  dup dup mul neg 1 add dup 0 lt {		% arc cos needs two values x,y
  pop pop 0 }{ sqrt exch atan} ifelse 
  y 0 lt { 180 add } if
} def
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, expects 2 parameter
/Pyth2 {					% Pythagoras, xA yA xB yB
  3 -1 roll 		% xA xB yB yA
  sub			% xA xB yB-yA
  3 1 roll 		% yB-yA xA xB
  sub			% yB-yA xA-xB
  Pyth } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def % Polar to Cartesian
/PtoCab { dup cos 4 -1 roll mul 3 1 roll sin mul } def % Polar to Cartesian (Ellipse) a b phi-> x y 
%/Rand { rand 4294967295 div } def		% a real random number
/Rand { rand 2147483447 div } def		% a real random number between 0 and 1
%----------------- hv added 20050516 ---------------
/PiDiv2 1.57079632680 def
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
%/e Euler bind def
%
/RadtoDeg { 180 mul Pi div } bind def 		% convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def 		% viceversa
%
/startGlobal { true setglobal globaldict begin } bind def
/endGlobal { end false setglobal } bind def
/pssetRGBcolor /setrgbcolor load def
/pssetCMYKcolor /setcmykcolor load def
/pssetGraycolor /setgray load def
%
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
%
/PathLength { 
  flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def }
  { /y ED /x ED PathLength@ } 
  {} 
  { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if 
  z 
} def
%
/STP { .996264 dup scale } def			% BP/PT scaling
/STV { SDict begin normalscale end STP  } def	% 
%
/DashLine {
    dup 0 gt
    { /a .5 def PathLength exch div }
    { pop /a 1 def PathLength } ifelse
    /b ED % pattern should fit evenly in b
    dup /X ED % pattern array
    0 get /y ED % length of first black segment
    /z 0 X {add} forall def % length of the full pattern
    %% Computation of the scaling factor as described by van Zandt:
    b a .5 sub 2 mul y mul sub z Div round
    z mul a .5 sub 2 mul y mul add b exch Div
    %%%% scaling factor on stack.
    /z ED %% now, z is the scaling factor
    false % for the length test below
    X { z mul } forall X astore %% modification TN 04-08-07
    %%% Checking whether at least one dash in X has positive length:
    {0 gt or} forall
    { X 1 a sub y mul }
    { [ 1 0 ] 0 }
    ifelse
    setdash stroke
} def
%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/SymbolLine {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 div cvi /n ED     				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    %% for negative SymStep we calculate the distance 
    SymStep 0 lt 
      { %XYLength SymStep div abs cvi 
        /nSym SymStep abs cvi def } 
      { /nSym XYLength SymStep div cvi def }
    ifelse
    0.5 setflat
    /Shift Symbol stringwidth pop 2 div def 
    /deltaX XLength nSym div def
    /deltaY YLength nSym div def
    curveticks 
      { XA YA moveto }
      { XA Shift sub YA Shift sub moveto }
    ifelse 
    nSym { 
      gsave 
      curveticks 
        { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
          currentpoint translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
          Symbol show 
        }
      ifelse 
      grestore 
      deltaX deltaY rmoveto
    } repeat
    /YA YB def /XA XB def
  } repeat 
  curveticks 
    { XA YA moveto }
    { XA Shift sub YA Shift sub moveto }
  ifelse 
  gsave 
  curveticks 
    { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
      XA YA translate rotAngle rotate 
      0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
      SymbolLinewidth setlinewidth stroke
    }
    { 
      rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
    }
  ifelse 
  grestore
  pop 				% delete the mark symbol
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  2 setlinecap 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
/DotFill {%	 on stack: dot radius
  /dotRadius ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform 
  pathbbox % llx lly urx ury of smallest bounding box
  /y2 ED /x2 ED /y1 ED /x1 ED 
  y2 y1 sub a div 2 add cvi /Ny ED
  x2 x1 sub a div 2 add cvi /Nx ED
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  /yA y1 dotRadius add CLW add def
  /xA0 x1 dotRadius add CLW add def
  Ny {
     /xA xA0 def
     Nx { 
       newpath 
       xA yA dotRadius 0 360 arc 
       SolidDot { gsave fill grestore } if 
       stroke
       xA a add /xA ED
     } repeat
     yA a add /yA ED
  } repeat
  grestore
} def
%
/PenroseFill {%	 on stack: scaling factor
  /Scale ED
%  1 exch div round /penroseFactor ED 
%  a 0 dtransform round exch round exch
%  2 copy idtransform 
%  exch Atan rotate 
%  idtransform pop /a ED 
%  .25 .25 itransform pathbbox 
%  /y2 ED 
%  a Div ceiling cvi /x2 ED /y1 ED 
%  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
gsave
  220 150 translate
  Scale dup scale
  systemdict /setstrokeadjust known { true setstrokeadjust } if 
  /I/S/L/W/G/+/Z/F/E/D[/def/exch/for{E D}/add{s E get mul}
 { Z -36.2001 1 33 }{25 E S rlineto}{/q Z dup q G E q 1 + G}{Z 2 2}]{cvx def}forall
  [0 72 1008 {dup sin E cos }F ]1 setlinejoin/s W{/a W{/b I 10{/i I 4{/m I moveto
  i m +/j I 10{/l Z b m l + G a l G sub s m get div .2 + floor .3 + 25
  mul j l + S rmoveto}F i L j L stroke }F}F}F}F 
  grestore 
%  pop pop 
} def
%
/PenroseFillA {%  on stack: scaling factor, border color, kite color, dart color
  /Scale ED
  Scale dup scale
  /border_colour ED 
  /kite_colour ED 
  /dart_colour ED
  clip 
  newpath 
  gsave
  100 100 translate
  6 
  Scale 1 lt { 1 Scale dup add div mul cvi } if %%%%   Number of iterations
  10					%%%%   Long side length in millimeters
  /border_width { L 0.06 mul }def		%%%%   Choose the scalefactor for the borders
  /L exch 25.4 div 72 mul def		%%%%   Conversion: mm -> inches -> points
  /f{-1 5 sqrt add 2 div}bind def		%%%%   The reciprocal of the golden ratio
  /l{L f mul}bind def			%%%%   Short side length l = L*f
  /Ll{L l add}bind def			%%%%   Ll =  L + l
  /c{36 cos L mul}bind def		%%%%   c  =  L*cos(36)
  /s{36 sin L mul}bind def		%%%%   s  =  L*sin(36)
  /draw_tile { 0 0 moveto c s lineto 0 lineto gsave closepath gsave fill grestore
	     0 setlinewidth stroke grestore border_colour stroke } bind def
  /half_kite { dup dup 0 gt{ 1 sub gsave f f neg scale -36 rotate half_dart
			   Ll 0 translate 144 rotate kite grestore }
	      		 { kite_colour L draw_tile }ifelse
	     pop } bind def
  /half_dart { dup dup 0 gt{ 1 sub gsave f f scale half_kite
			   -144 rotate Ll neg 0 translate half_dart grestore }
	      		 { dart_colour l draw_tile }ifelse
  	     pop } bind def
  /kite{ gsave half_kite 1 -1 scale half_kite grestore }bind def
  border_width setlinewidth  1 setlinejoin  1 setlinecap
%  450 0 translate  
  dup f exch neg exp dup scale
  5 {kite 72 rotate } repeat stroke 
  grestore
} def
%
%
/TruchetFill { %	 on stack: scaling factor
  10 dict begin
  dup dup scale
  1 exch div round /penroseFactor ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  /ma a neg def
  /ha a 2 div def 
  /mha ha neg def
  /tile { 
    rand dup 2 idiv 2 mul eq { 90 rotate } if
    mha mha moveto ha mha lineto
    ha ha lineto mha ha lineto
%    closepath .1 setlinewidth stroke
    contents
  } def
  /contents{ 
    0 ha moveto ha 0 lineto
    0 mha moveto mha 0 lineto
%    1 setlinewidth stroke
  } def
  /dotiling {
    f ma mul a f a mul { 
      /i exch def
      f ma mul a f a mul { 
        /j exch def
        gsave i j translate
        tile stroke grestore
      } for
    } for
  } def
%
  /f 3 def 
  5 srand dotiling 
  end % local user dict
} def
%
/BeginArrow { 
  ADict begin 			% hold it local, for end see EndArrow
  /@mtrx CM def 
  gsave 
  2 copy T 
  2 index sub neg exch 
  3 index sub exch Atan 
  rotate newpath 
} def
%
/EndArrow { @mtrx setmatrix CP grestore end } def % end the ADict
%
/Arrow { 
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /a ED 
  { 0 h T 1 -1 scale } if 
  w neg h moveto 
  0 0 L w h L w neg a neg rlineto 
  gsave fill grestore 
} def
%
/ArrowD { % the sides are drawn as curves (hv 20071211)
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /Inset ED 
  { 0 h T 1 -1 scale } if % changes the direction
% we use y=w/h^2 * x^2 as equation for the control points
% for the coordinates the arrow is seen from top to bottom
% the bottom (tip) is (0;0)
  w neg h moveto % lower left of >
  w 9 div 4 mul neg h 3 div 2 mul
  w 9 div neg       h 3 div  
  0 0 curveto    % tip of >
  w 9 div        h 3 div  
  w 9 div 4 mul  h 3 div 2 mul
  w h curveto % upper left of >
  w neg Inset neg rlineto % move to x=0 and inset
  gsave fill grestore 
} def 
%
/Tbar { 
  CLW mul add /z ED 
  z -2 div CLW 2 div moveto 
  z 0 rlineto stroke 
  0 CLW moveto 
} def
%
/Bracket { 
  CLW mul add dup CLW sub 2 div 
  /x ED mul CLW add /y ED /z CLW 2 div def 
  x neg y moveto 
  x neg CLW 2 div L x CLW 2 div L x y L stroke 
  0 CLW moveto 
} def
%
/RoundBracket { 
  CLW mul add dup 2 div 
  /x ED mul /y ED /mtrx CM def 
  0 CLW 2 div T x y mul 0 ne { x y scale } if 
  1 1 moveto 
  .85 .5 .35 0 0 0 curveto 
  -.35 0 -.85 .5 -1 1 curveto 
  mtrx setmatrix stroke 0 CLW moveto 
} def
%
/SD { 0 360 arc fill } def
%
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse  	% outer or inner dimen 
  /b ED 				% the color definition
  0 z DS SD 
  b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub 
  moveto 
} def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /showpoints ED 
  counttomark 2 div dup cvi /n ED  	% n 2 div on stack 
  n eq not { exch pop } if		% even numbers of points? delete one
  ] aload /Points ED 
  showpoints not { Points aload pop } if
%    { ] aload /Points ED } 
%    { n 2 mul 1 add -1 roll pop } ifelse	% delete the mark symbol 
} def
%
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
%
/LineToYAxis {
  /Ox ED		% Save the x origin value 
  NArray            % all x-y pairs on stack
  n { 2 copy moveto % go to current point
    Ox exch Lineto   % line to y-axis
    pop             % delete old x-value
  } repeat
} def
%
/LineToXAxis{
  /Oy ED		% Save the y origin value 
  NArray		% all x-y pairs on stack
  n 0 eq not
    { n 1 eq { 0 0 /n 2 def } if
      ArrowA
      /n n 2 sub def
      CP 2 copy moveto pop Oy Lineto
      n { 2 copy moveto pop Oy Lineto } repeat
      CP
      4 2 roll
      ArrowB
      2 copy moveto pop Oy
      L
      pop pop } if
} def
%
/Arcto { 
  /a [ 6 -2 roll ] cvx def 
  a r 
  /arcto load stopped { 5 } { 4 } ifelse { pop } repeat 
  a 
} def
%
/CheckClosed { 
  dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if 
} def
%
/Polygon { 
  NArray n 2 eq { 0 0 /n 3 def } if 
  n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      n 2 mul -2 roll 
      /y0 ED /x0 ED /y1 ED /x1 ED  
      x1 y1 
      /x1 x0 x1 add 2 div def 
      /y1 y0 y1 add 2 div def 
      x1 y1 moveto 
      /n n 2 sub def 
      n { Lineto } repeat 
      x1 y1 x0 y0 6 4 roll Lineto
      Lineto pop pop closepath } ifelse 
} def
%
/SymbolPolygon {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 add /m ED
  2 copy m 2 roll				% copy last two
  m 2 div cvi /n ED    				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    /nSym XYLength SymStep Div cvi def
    /Shift Symbol stringwidth pop 2 Div def 
    /deltaX XLength nSym Div def
    /deltaY YLength nSym Div def
    XA Shift sub YA Shift sub moveto 
    nSym { 
      gsave rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
      grestore 
      deltaX deltaY rmoveto
    } repeat
%    XB Shift sub YB Shift sub moveto Symbol show
    /YA YB def /XA XB def
  } repeat 
  pop	% delete the mark symbol
} def
%
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
%
/Triangle { 
  /mtrx CM def 
  translate 
  rotate /h ED 2 div /w ED 
  dup CLW mul /d ED 
  /h h d w h Atan sin Div sub def 
  /w w d h w Atan 2 div dup cos exch sin Div mul sub def 
  mark 
  0 d w neg d 0 h w d 0 d 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false 
  Line 
  closepath 
  mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
  setmatrix pop 
} def
% DG/SR modification end
%
/CCA { 
  /y ED /x ED 
  2 copy y sub /dy1 ED 
  x sub /dx1 ED 
  /l1 dx1 dy1 Pyth def 
} def
%
/CC { 
  /l0 l1 def 
  /x1 x dx sub def 
  /y1 y dy sub def 
  /dx0 dx1 def 
  /dy0 dy1 def 
  CCA 
  /dx dx0 l1 c exp mul dx1 l0 c exp mul add def 
  /dy dy0 l1 c exp mul dy1 l0 c exp mul add def 
  /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos abs b exp a mul dx dy Pyth Div 2 div def 
  /x2 x l0 dx mul m mul sub def
  /y2 y l0 dy mul m mul sub def 
  /dx l1 dx mul m mul neg def 
  /dy l1 dy mul m mul neg def 
} def
%
/IC { 
  /c c 1 add def 
  c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if } ifelse 
  /a a 2 mul 3 div 45 cos b exp div def 
  CCA 
  /dx 0 def 
  /dy 0 def 
} def
%
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
%
/OpenCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
} def
%
/CurvePath { 
  %% for negative SymStep we calculate the distance 
  SymStep 0 lt { gsave PathLength SymStep div abs /SymStep ED grestore } if
  0.5 setflat
  flattenpath /z 0 def /z0 0 def
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def 
    x1 Shift sub y1 Shift sub moveto 
    gsave 
    curveticks 
      { x1 y1 translate startAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke      
      }
      { startAngle rotate Symbol show }
    ifelse 
    grestore /z0 z def }
  { /y ED /x ED PathLength@ z z0 sub SymStep ge {
      x Shift sub y Shift sub moveto 
      gsave 
      curveticks 
        { y yOld sub x xOld sub Atan 180 sub CorrAngle sub /rotAngle ED  
          x y translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
          Symbol show 
        }
      ifelse 
      grestore /z0 z def } if 
    /yOld y def /xOld x def } 
  {} %% the lineto part
  { /y y2 def /x x2 def PathLength@ 
    x Shift sub y Shift sub moveto 
    gsave
    curveticks 
      { y yOld sub x xOld sub Atan 180 sub /rotAngle ED  
        x y translate rotAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke
      }
      { 
        x Shift sub y Shift sub moveto 
        rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
        Symbol show 
      }
    ifelse 
    grestore
  }
  pathforall 
%  curveticks 
%   { gsave 
%     x y translate rotAngle rotate 
%     0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
%     SymbolLinewidth setlinewidth stroke grestore
%   } if
  z 
} def
%
/OpenSymbolCurve { 
  OpenCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/AltCurve { 
  { false NArray n 2 mul 2 roll 
    [ n 2 mul 3 sub 1 roll ] aload
    /Points ED 
    n 2 mul -2 roll } 
  { false NArray } ifelse 
  n 4 lt { n { pop pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse 
} def
%
/AltOpenSymbolCurve { 
  AltCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      6 copy n 2 mul 6 add 6 roll 
      IC CC x y moveto n { NC } repeat 
      closepath pop pop 
    } ifelse 
} def
%
/ClosedSymbolCurve { 
  ClosedCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/CalcBezierSpline {%  Christoph Bersch
  10 dict begin
  /getX { Points exch 2 mul get } def
  /getY { Points exch 2 mul 1 add get } def
  /n Points length 1 sub 2 idiv def
  /GetFirstControlPoints {
    /x n array def
    /tmp n array def
    /b 2 def
    x 0 rhs 0 get b div put
    1 1 n 1 sub {
      /i exch def
      tmp i 1 b div dup 4 1 roll put
      i n 1 sub lt { 4 }{ 3.5 } ifelse exch sub /b exch def
      x i rhs i get x i 1 sub get sub b div put
    } for
    1 1 n 1 sub {
      n exch sub
      dup dup x exch 1 sub 2 copy 6 2 roll
      get 3 1 roll tmp exch get
      exch x exch get mul sub
      put	
    } for
    x
  } def
  % 
  n 1 eq {
    0 getX 2 mul 1 getX add 3 div
    0 getY 2 mul 1 getY add 3 div
    exch dup 3 1 roll 2 mul 0 getX sub
    exch dup 3 1 roll 2 mul 0 getY sub
    [ 0 getX 0 getY 7 3 roll 1 getX 1 getY ] /outPoints exch def
  } {
    /outPoints 6 n mul 2 add array def
    0 1 n {
      dup dup 6 mul dup 1 add
      outPoints exch 5 -1 roll getY put
      outPoints exch 3 -1 roll getX put
    } for
    /rhs n array def
    1 1 n 2 sub {
      rhs exch dup dup getX 4 mul exch 1 add getX 2 mul add put
    } for
    rhs 0 0 getX 1 getX 2 mul add put
    rhs n 1 sub dup getX 8 mul n getX add 2 div put
    GetFirstControlPoints
    1 1 n 2 sub {
      rhs exch dup dup getY 4 mul exch 1 add getY 2 mul add put
    } for
    rhs 0 0 getY 1 getY 2 mul add put
    rhs n 1 sub dup getY 8 mul n getY add 2 div put
    GetFirstControlPoints
    0 1 n 1 sub {
      /i exch def
      2 copy
      i get outPoints 6 i mul 3 add 3 -1 roll put
      i get outPoints 6 i mul 2 add 3 -1 roll put
      2 copy
      i n 1 sub lt {
        i 1 add get i 1 add getY 2 mul exch sub outPoints 6 i mul 5 add 3 -1 roll put
        i 1 add get i 1 add getX 2 mul exch sub outPoints 6 i mul 4 add 3 -1 roll put
      }{
        n 1 sub get n getY add 2 div outPoints 6 n 1 sub mul 5 add 3 -1 roll put
        n 1 sub get n getX add 2 div outPoints 6 n 1 sub mul 4 add 3 -1 roll put
      } ifelse
    } for
    pop pop
  } ifelse
  outPoints
  end
} def
/Spline {
  /showpoints ED
  counttomark 2 div dup cvi /n ED
  n eq not { exch pop } if
  ] /Points ED
  n 1 gt {
    CalcBezierSpline
    mark exch aload pop
    ArrowA
    n 2 sub {
      6 2 roll 4 2 roll curveto
    } repeat
    6 2 roll 4 2 roll ArrowB curveto
  } if
} def
/OpenSymbolSpline {
  Spline
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore } def
%
/FontDot { 
  DS 2 mul dup 
  matrix scale matrix concatmatrix exch matrix
  rotate matrix concatmatrix exch 
  findfont exch makefont setfont 
} def
%
/Rect { 
  x1 y1 y2 add 2 div moveto 
  x1 y2 lineto 
  x2 y2 lineto 
  x2 y1 lineto
  x1 y1 lineto 
  closepath 
} def
%
/OvalFrame { 
  x1 x2 eq y1 y2 eq or 
    { pop pop x1 y1 moveto x2 y2 L } 
    { y1 y2 sub abs x1 x2 sub abs 2 copy gt 
      { exch pop } { pop } ifelse 
      2 div exch { dup 3 1 roll mul exch } if 
      2 copy lt { pop } { exch pop } ifelse
      /b ED 
      x1 y1 y2 add 2 div moveto 
      x1 y2 x2 y2 b arcto 
      x2 y2 x2 y1 b arcto
      x2 y1 x1 y1 b arcto 
      x1 y1 x1 y2 b arcto 
      16 { pop } repeat 
      closepath 
    } ifelse 
} def
%
/Frame { 
  CLW mul /a ED 
  3 -1 roll 
  2 copy gt { exch } if 
  a sub /y2 ED 
  a add /y1 ED 
  2 copy gt { exch } if 
  a sub /x2 ED 
  a add /x1 ED 
  1 index 0 eq { pop pop Rect } { OvalFrame } ifelse 
} def
%
/BezierNArray { 
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if 
  n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat 
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/OpenBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { ArrowA n 4 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      6 2 roll 4 2 roll ArrowB curveto } ifelse 
} def
%
/OpenSymbolBezier { 
  OpenBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { moveto n 1 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      closepath } ifelse 
} def
%
/ClosedSymbolBezier { 
  /f ED				 % save showpoints value 
  2 copy /yEnd ED /xEnd ED
  counttomark -2 roll 2 copy /yStart ED /xStart ED
  counttomark 2 roll
  f
  ClosedBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
  [ xEnd yEnd xStart yStart SymbolLine 
} def
%
/BezierShowPoints { 
  gsave 
  Points aload length 2 div cvi /n ED 
  moveto 
  n 1 sub { lineto } repeat 
  CLW 2 div SLW [ 4 4 ] 0 setdash stroke 
  grestore 
} def
%
/Parab { 
  /y0 ED /x0 ED /y1 ED /x1 ED 
  /dx x0 x1 sub 3 div def 
  /dy y0 y1 sub 3 div def 
  x0 dx sub y0 dy add x1 y1 ArrowA
  x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 x0 y0 x0 2 mul x1 sub y1 ] def 
} def
%
/Parab1 { % 1 end  |  0 SP
  /ySP ED /xSP ED /y1 ED /x1 ED 
  /dx xSP x1 sub 3 div def 
  /dy ySP y1 sub 3 div def 
  newpath x1 y1 moveto xSP y1 lineto xSP ySP lineto 
                       x1 ySP lineto closepath clip 
  currentpoint
  newpath moveto
  xSP dx sub ySP dy add x1 y1 ArrowA
  xSP dx add ySP dy add xSP 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 xSP ySP xSP 2 mul x1 sub y1 ] def 
} def
%
/Grid { 
  newpath 
  /a 4 string def 
  /b ED % 				psk@gridlabels in pt
  /c ED % 				{ \pst@usecolor\psgridlabelcolor }
  /n ED % 				psk@griddots
  cvi dup 1 lt { pop 1 } if 
  /s ED % 				\psk@subgriddiv
  s div dup 0 eq { pop 1 } if 
  /dy ED s div dup 0 eq { pop 1 } if %	\pst@number\psyunit abs
  /dx ED dy div round dy mul %		\pst@number\psxunit abs
  /y0 ED dx div round dx mul 
  /x0 ED dy div round cvi 
  /y2 ED dx div round cvi 
  /x2 ED dy div round cvi 
  /y1 ED dx div round cvi 
  /x1 ED 
  /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def 
  /w x2 x1 sub 0 gt { 1 } { -1 } ifelse def 
  b 0 gt { 
    /z1 b 4 div CLW 2 div add def
%    /Helvetica findfont b scalefont setfont 
    /b b .95 mul CLW 2 div add def } if 
  systemdict /setstrokeadjust known 
    { true setstrokeadjust /t { } def }
    { /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
       exch itransform } bind def } ifelse 
  gsave n 0 gt { 1 setlinecap [ 0 dy n div ] dy n div 2 div setdash } { 2 setlinecap } ifelse 
  /i x1 def 
  /f y1 dy mul n 0 gt { dy n div 2 div h mul sub } if def 
  /g y2 dy mul n 0 gt { dy n div 2 div h mul add } if def 
  x2 x1 sub w mul 1 add dup 1000 gt { pop 1000 } if 
  { i dx mul dup y0 moveto 
    b 0 gt 
      { gsave c i a cvs dup stringwidth pop 
        /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse 
	h 0 gt {b neg}{z1} ifelse 
        rmoveto show grestore } if 
    dup t f moveto 
    g t L stroke 
    /i i w add def 
  } repeat 
  grestore 
  gsave 
  n 0 gt
  % DG/SR modification begin - Nov. 7, 1997 - Patch 1
  %{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
    { 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
  % DG/SR modification end
    { 2 setlinecap } ifelse 
  /i y1 def 
  /f x1 dx mul n 0 gt { dx n div 2 div w mul sub } if def 
  /g x2 dx mul n 0 gt { dx n div 2 div w mul add } if def 
  y2 y1 sub h mul 1 add dup 1000 gt { pop 1000 } if 
  { newpath i dy mul dup x0 exch moveto 
    b 0 gt { gsave c i a cvs dup stringwidth pop 
      /z2 ED 
      w 0 gt {z1 z2 add neg} {z1} ifelse 
      h 0 gt {z1} {b neg} ifelse 
      rmoveto show grestore } if 
    dup f exch t moveto 
    g exch t L stroke 
    /i i h add def 
  } repeat 
  grestore 
} def
%
/ArcArrow { 
  /d ED /b ED /a ED 
  gsave 
  newpath 0 -1000 moveto clip 
  newpath 
  0 1 0 0 b 
  grestore 
  c mul 
  /e ED 
  pop pop pop r a e d PtoC y add exch x add
  exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
  mul neg d 
} def
%
%
/isbool { type (booleantype) cvn eq } def
%
/Ellipse { 
  dup isbool { /MoveToStart ED }{ /MoveToStart false def }ifelse  % false or true
  /rotAngle ED
  /mtrx CM def 
  T 
  rotAngle rotate
  scale 
  MoveToStart { 0 0 moveto 1 0 rmoveto } if  % move to the start position
  0 0 1 5 3 roll arc 
  mtrx setmatrix 
} def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % is add or sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul xOrig add % hv 2007-08-29   x->xOrig
  a2 sin ry mul yOrig add % hv 2007-08-29   y->yOrig
  a1 cos rx mul xOrig add % 
  a1 sin ry mul yOrig add % 
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
%
/RotBegin { 
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
  /a ED 
  a Rot /RAngle [ RAngle dup a add ] cvx def 
} def
%
/RotEnd { 
  /TMatrix [ TMatrix setmatrix ] cvx def 
  /RAngle [ RAngle pop ] cvx def 
} def
%
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/Uput {
  /a ED 
  add 2 div /h ED 2 
  div /w ED 
  /s a sin def 
  /c a cos def 
  /b s abs c abs 2 copy gt dup 
    /q ED 
    { pop } { exch pop } ifelse def 
  /w1 c b div w mul def 
  /h1 s b div h mul def 
  q { w1 abs w sub dup c mul abs }{ h1 abs h sub dup s mul abs } ifelse 
} def
%
/UUput { 
  5 dict begin
  /z ED 
  abs /y ED 
  /x ED 
  q { x s div c mul abs y gt }{ x c div s mul abs y gt } ifelse 
    { x x mul y y mul sub z z mul add sqrt z add } 
    { q { x s div } { x c div } ifelse abs 
    } ifelse 
  a PtoC 
  h1 add exch 
  w1 add exch 
  end
} def
%
end
%-----------------------------------------------------------------------------%
%
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-algparser.pro 0 0
% $Id: pst-algparser.pro 446 2017-04-19 11:40:55Z herbert $
%%
%% PostScript prologue for PSTricks algorithm parser
%% Version 0.07, 2014/08/01
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%%-----------------------------------------------------------------------------%
%
%currentdict /Pi known not { /Pi 3.14159265359 def } if
%
/AlgParser { tx@AlgToPs begin AlgToPs end } def  % Dominique Rodriguez
/I2P { AlgParser cvx exec } def  % Infix to Postfix
%
/tx@CoreAnalyzerDict 100 dict def tx@CoreAnalyzerDict begin
%
% PS ANALYZER FOR ALGEBRAIC EXPRESSION V1.13
%
% 09/2011 DR factorial with ! added
%
% E->T|E+T
% T->FS|T*FS
% FS -> F | +FS | -FS
% F->P|F^SF|P!
% P->(E)|literal
% literal->number|var|var[E]|func(params)
% params->E|E,param
% number->TOBEFINISHED
%
%% E expression, T term, SF signed factor, F factor, P power
%
%% parser
%
%% str
%
%% C->E<condition_operators>E
%% STR index -> STR index+lenExpr
/AnalyzeCond { AnalyzeExpr ReadCondOp AnalyzeExpr EvalCondOp  } def
%
%% analyze Expression List (separator , or | )
%% STR index -> STR index+lenExpr
%% /AnalyzeListOfE {
%%   { NextNonBlankChar pop AnalyzeExpr%%dup Strlen eq { exit } if NextNonBlankChar
%%     NextNonBlankChar dup 0 eq { pop exit } if
%%     dup 44 ne 1 index 124 ne and { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse } if
%%     pop NextNonBlankChar dup 0 eq { exit } if 124 ne { PROBLEMCONTACTBILLOU } if 1 add NextNonBlankChar 0 eq {toto} if } loop
%%   AnalyzeListOfEPostHook
%% } def
/AnalyzeListOfE {
  /NotFirst false def
  { NextNonBlankChar pop AnalyzeExpr
    NotFirst { EvalListOfExpr } { /NotFirst true def } ifelse
    dup Strlen eq { exit } if NextNonBlankChar
    dup 44 ne 1 index 124 ne and
    { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse }
    if  pop 1 add } loop
  AnalyzeListOfEPostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% E->T|E+T
%% STR index -> STR index+lenExpr
/AnalyzeExpr {
  AnalyzePreHook AnalyzeTerm IsEndingExpr
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeTerm PreEvalHook EvalAddSub IsEndingExpr { pop exit } if } loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% T->FS|T*FS
%% STR index
/AnalyzeTerm {
  AnalyzePreHook AnalyzeSignedFactor IsEndingTerm
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor PreEvalHook EvalMulDiv IsEndingTerm { pop exit } if} loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% FS -> F | +FS | -FS
%% STR index
/AnalyzeSignedFactor {
  AnalyzePreHook 2 copy get dup IsUnaryOp
  { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor EvalUnaryOp }
  { pop AnalyzeFactor }
  ifelse AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% F->P|F^P|P!
%% STR index
/AnalyzeFactor {
  AnalyzePreHook AnalyzePower IsEndingFactor
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { dup 33 eq%% is there a ! DR 09/2011
      { pop 1 add NextNonBlankChar pop EvalFactorial }
      { RollOp 1 add NextNonBlankChar pop AnalyzePower PreEvalHook EvalPower }
      ifelse
      IsEndingFactor { pop exit } if } loop }
  ifelse  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% P->(E)|literal
%% STR index
/AnalyzePower {
  %% depending of first char either a number, or a literal
  2 copy get dup 40 eq%%an open par
  { pop 1 add NextNonBlankChar pop AnalyzeExpr 1 add NextNonBlankChar pop }
  { AnalyzeLiteral }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index STR[index] -> STR index
%/AnalyzeLiteral { IsNumber { EvalNumber } { EvalLiteral } ifelse } def
/AnalyzeLiteral { dup IsUnaryOp exch IsNumber or { EvalNumber } { EvalLiteral } ifelse } def%%dr 09102006
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% recognize + or -
%% chr -> T/F
/IsUnaryOp { dup 43 eq exch 45 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsNumber { dup 48 ge exch dup 57 le 3 -1 roll and exch 46 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadNumber {
  exch dup 3 -1 roll dup 3 1 roll
  %%read mantissa
  { 1 add  2 copy dup Strlen eq { pop pop 0 exit } if get dup IsNumber not { exit } if pop } loop
  dup 101 eq exch 69 eq or
  %%% there is a "e" or "E" -> read exponant
  { 1 add 2 copy get dup IsUnaryOp
    { pop 1 add 2 copy get } if
    { IsNumber not { exit } if 1 add 2 copy get } loop }
  if
  dup 4 1 roll
  3 -1 roll exch 1 index sub getinterval
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsCondOp { dup 30 eq exch dup 60 ge exch 62 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadCondOp {
  NextNonBlankChar 1 index 4 1 roll
  { IsCondOp not { exit } if 1 add  2 copy get } loop
  2 copy 5 -1 roll
  exch 1 index sub getinterval 3 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can contain only : 0123456789.
%% chr -> T/F
/IsLiteral {%
  dup 48 ge exch dup  57 le 3 -1 roll and exch
  dup 65 ge exch dup  90 le 3 -1 roll and 3 -1 roll or exch
  dup 97 ge exch     122 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can be of the form [a-zA-Z][a-zA-Z0-9]*\(\((Expression)\)|\(\[Expression\]\)\)?
%% STR index -> literal STR index' nextchr
/ReadLiteral {
  exch dup 3 -1 roll dup 3 1 roll
  %%read literal core
  { 2 copy dup Strlen eq { pop pop 0 exit } if get dup IsLiteral not { exit } if pop 1 add } loop
  4 1 roll dup 5 1 roll 3 -1 roll exch 1 index sub getinterval 4 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a clpar
%% STR index -> STR index STR[index] T/F
/IsEndingExpr {%
  2 copy dup Strlen eq
  %% if end of str is reached -> end !
  { pop pop 0 true }
  %% ending chr -> clpar, comma, |, <, >, =, !,
  {get dup  dup  41 eq
       exch dup 124 eq
       exch dup  93 eq
       exch dup  44 eq
       exch dup  30 eq
       exch dup  60 ge exch 62 le and or or or or or}
  ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a +-
%% STR index -> STR index STR[index] T/F
/IsEndingTerm { IsEndingExpr { true } { dup dup 43 eq exch 45 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or */
%% STR index -> STR index STR[index] T/F
/IsEndingFactor { IsEndingTerm { true } { dup dup 42 eq exch 47 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or ^
%% STR index -> STR index STR[index] T/F
/IsEndingPower { IsEndingFactor { true } { dup 94 eq } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index STR[index]
/NextNonBlankChar { { dup Strlen eq { 0 exit } if 2 copy get dup neBlkChar { exit } if pop 1 add } loop } bind def
/neBlkChar { dup 32 ne exch dup 10 ne exch 9 ne and and } bind def
%%%%%%%%%%%%%%%%%%%%%%%%
%% DEBUG
/BRK {false} def
/BRKtrue {/BRK true def} def
/BRKStop {BRK {BRKtoto} if } def
/BRKEvalStop {BRK exch if } def
/BRKBRK2true {BRK {BRK2true} if } def
/BRK2 {false} def
/BRK2true {/BRK2 true def} def
/BRK2Stop {BRK2 {BRK2toto} if } def/BRK {false} def
end
%
%-------------------------------------------------------------------------------%
%
/tx@AlgToPs 12 dict def tx@AlgToPs begin
%
%% algExpr -> PSVector
/AlgToPs { tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE pop pop EndingSequence end } def
/EndingSequence { ExpressionVector aload length /end cvx exch 1 add array astore } def
/InitParser { /ExpressionVector [ /tx@AddMathFunc cvx /begin cvx ] def dup length /Strlen exch def 0 } def
/Strlen 0 def
/EvalListOfExpr {} def%
/EvalNumber {%
    ReadNumber  cvr /ExpressionVector ExpressionVector aload length dup 3 add -1 roll cvx
    exch 1 add array astore def NextNonBlankChar pop } def
/EvalAddSub {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  43 eq { /add } { /sub } ifelse cvx exch 1 add array astore def
} def
/EvalMulDiv {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  42 eq { /mul } { /div } ifelse cvx exch 1 add array astore def
} def
/EvalPower {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  pop /exp cvx exch 1 add array astore def
} def
/EvalFactorial {% DR 09/2011
  /ExpressionVector ExpressionVector aload length
  /fact cvx exch 1 add array astore def
} def
/EvalLiteral {%
  ReadLiteral
  dup 40 eq%%% there is an open par -> function call
  { pop 2 index
    dup (Sum) eq { EvalSum }
    { dup (IfTE) eq { EvalCond }
      { dup (Derive) eq { pop EvalDerive }
	{ pop 1 add NextNonBlankChar pop AnalyzeListOfE 2 index TrigoFunc
          /ExpressionVector ExpressionVector aload length dup 5 add -1 roll cvn cvx
	  exch 1 add array astore def 1 add NextNonBlankChar pop } ifelse } ifelse} ifelse }
  { /ExpressionVector ExpressionVector aload length dup 6 add -1 roll cvn cvx exch 1 add array astore def
    dup 91 eq%%% there is an open bracket -> vector element
    { pop 1 add NextNonBlankChar pop AnalyzeExpr
      /ExpressionVector ExpressionVector aload length /cvi cvx exch /get cvx exch 2 add array astore def 1 add }
    { pop NextNonBlankChar pop }
    ifelse}
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% the derive function : Derive(n,f(x))
%% firstparindex lastparindex ->
/EvalDerive {
  %% manage the function descripiton
  1 add ReadNumber 3 1 roll NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  1 add NextNonBlankChar pop
  3 -1 roll cvi
  dup 0 eq
  { pop AnalyzeExpr 3 -1 roll pop 1 add }
  { 1 sub 3 1 roll (x)  exch tx@Derive begin DeriveIndexed end 4 -1 roll
    { (x) tx@Derive begin Derive end } repeat
    ExpressionVector exch /ExpressionVector [] def
    AlgToPs aload length
    /ExpressionVector 1 index 3 add -1 roll aload length dup 3 add -1 roll  /l2 exch def /l1 exch def
    l1 l2 add 1 add l2 neg roll l1 l2 add array astore def 3 -1 roll pop 1 add
    1 index length /Strlen exch def } ifelse
} def
/EvalSum {%
  pop 1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  /ExpressionVector ExpressionVector aload length dup 7 add -3 roll 0 4 1 roll
  5 -1 roll 4 add array astore def
  %% keep ExpressionVector for later and create a new one for internal Sum computation
  ExpressionVector 3 1 roll /ExpressionVector [ 6 -1 roll cvn /exch cvx /def cvx ] def
  1 add NextNonBlankChar pop AnalyzeExpr
  %% add each term
  /ExpressionVector ExpressionVector aload length 1 add /add cvx exch array astore def
  /ExpressionVector 4 -1 roll aload length ExpressionVector cvx /for cvx 3 -1 roll 2 add
  array astore def 3 -1 roll pop 1 add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length 3.1415926 /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
/EvalCond {%
  pop 1 add AnalyzeCond NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  ExpressionVector 3 1 roll /ExpressionVector [] def
  1 add AnalyzeExpr ExpressionVector 3 1 roll /ExpressionVector [] def
  NextNonBlankChar 44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add AnalyzeExpr
  NextNonBlankChar 41 ne { ANALYZER_ERROR_missing_ending parenthesis_in_IfTE } if
  ExpressionVector
  /ExpressionVector 6 -1 roll aload length dup
  6 add -1 roll cvx exch dup 4 add -1 roll cvx /ifelse cvx 3 -1 roll 3 add array astore def
  1 add 3 -1 roll pop
} def
%% CondOp STR index
/EvalCondOp {%
  3 -1 roll
  dup (=) eq  { /eq } {%
  dup (<) eq  { /lt } {%
  dup (>) eq  { /gt } {%
  dup (>=) eq { /ge } {%
  dup (<=) eq { /ge } {%
  dup (!=) eq { /ne } { ERROR_non_valid_conditional_operator }
  ifelse } ifelse } ifelse } ifelse } ifelse } ifelse
  cvx exch pop
  /ExpressionVector ExpressionVector aload length dup 3 add -1 roll exch 1 add array astore def } def
/EvalUnaryOp {
  3 -1 roll 45 eq { /ExpressionVector ExpressionVector aload length /neg cvx exch 1 add array astore def } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook {} bind def
/PreEvalHook {} bind def
/AnalyzeListOfEPostHook {} bind def
/AnalyzePostHook {} def
/RollOp { 3 1 roll } bind def
end   %tx@CoreAnalyzerDict
%
%--------------------------------------------------------------------%
%
/tx@Derive 41 dict def tx@Derive begin
%%increase ^^ for each function added
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable -> PSVector
/Derive {
  10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE end
} def
/Strlen 0 def
/InitParser { dup length /Strlen exch def 0 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable index -> PSVector
/DeriveIndexed {%
  3 1 roll 10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser pop 4 -1 roll AnalyzeExpr 4 -2 roll pop pop 4 -2 roll exch pop end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u,v)'=-(u',v')
/EvalListOfExpr {%
  4 2 roll 2 copy 9 -1 roll dup length 4 1 roll putinterval add AddPipe
           2 copy 7 -1 roll dup length 4 1 roll putinterval add
  6 -2 roll pop pop
  2 copy pop 0 6 2 roll GetIntervalNewStr 5 1 roll 2 copy 0 exch getinterval 6 1 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (-u)'=-(u')
/EvalUnaryOp {
  4 -2 roll 4 index (0) eq
  { (0) StrConcat 7 -1 roll pop }
  { 7 -1 roll 45 eq
    { AddSub AddOpPar true } { false } ifelse
    3 1 roll 5 index StrConcat 3 -1 roll { AddClPar } if } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  7 -2 roll pop pop 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (number)'=0
/EvalNumber { ReadNumber (0) 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u+v)'=u'+v'
/EvalAddSub {%
  7 index dup (0) eq
  { pop true }%% du=0 nothing added
  { dup length exch 5 index 5 index 3 -1 roll putinterval 4 -1 roll add 3 1 roll false }
  ifelse
  5 index dup (0) eq
  { pop { (0) } { 4 -2 roll 2 copy pop 0  6 2 roll GetIntervalNewStr } ifelse }%%dv=0
  { exch
    { 5 -2 roll 7 index 45 eq { AddSub } if false } %%nothing yet added
    { 5 -2 roll 7 index 43 eq%%something yet added
      { AddAdd false } { AddSub AddOpPar true } ifelse }
    ifelse 11 1 roll
    3 -1 roll StrConcat 10 -1 roll { AddClPar } if
    2 copy pop 0 6 2 roll GetIntervalNewStr }
  ifelse
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)' or (u/v)'
/EvalMulDiv { 6 index 42 eq {EvalMul} {EvalDiv} ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)'=u'*v+u*v'
/EvalMul {%
  4 -2 roll 7 index dup (0) eq
  { pop false }%%du=0
  { (1) eq%%du=1
    { false }
    { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
    3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if
    true }%%du!=0
  ifelse
  5 1 roll 5 index (0) eq
  { 5 -1 roll not { (0) StrConcat } if }%%dv=0
  { 5 -1 roll { AddAdd } if
    4 index (1) eq
    { 8 index StrConcat }
    { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
    ifelse
  }%%dv!=0
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u/v)'=(u'*v-u*v')/v^2
/EvalDiv {%
  4 -2 roll
  4 index (0) eq%%dv=0 -> u'/v
  { 7 index (0) eq { (0) StrConcat } { AddOpPar 7 index StrConcat AddClPar AddDiv 5 index StrConcat } ifelse }
  { 7 index dup (0) eq
    { pop }%%du=0
    { (1) eq%%du=1
      { false }
      { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
      3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if}%%du!=0
    ifelse
      AddSub
      4 index (1) eq
      { 8 index StrConcat }
      { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
      ifelse
    %}%%dv!=0
    2 copy GetIntervalNewStr 3 1 roll pop 0 AddOpPar 3 -1 roll StrConcat AddClPar
    AddDiv AddOpPar 5 index StrConcat AddClPar 2 copy (^2) putinterval 2 add }
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str1 index str2 -> str1 index
/StrConcat { dup length 4 2 roll 2 copy 6 -1 roll putinterval 3 -1 roll add } bind def
/GetIntervalNewStr { 0 exch getinterval dup length string copy } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u^v)'=(u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
/EvalPower {%
  4 -2 roll 7 index (0) eq
  {%%if du=0 then (u^v)'=v'ln(u)u^v
    4 index (0) eq
    { (0) StrConcat }%%if dv=0 then (u^v)'=0
    { 4 index (1) ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if
      8 index (e) ne { (ln\() StrConcat 8 index StrConcat (\)*) StrConcat } if
      AddOpPar 8 index StrConcat (\)^\() StrConcat 5 index StrConcat AddClPar } ifelse
  }
  {%%du!=0
    4 index (0) eq
    {%%if dv=0 then (u^v)'=vu'u^(v-1)
      5 index dup IsStrNumber
      { dup (0) eq
        { StrConcat }
        { dup dup (1) eq exch (1.0) eq or
          { StrConcat  }
	  { StrConcat
	    7 index dup (1) ne exch (1.0) ne and%%%dr 09102006 insert du if <> 1
	    { (*\() StrConcat 7 index StrConcat (\)) StrConcat } if%%%dr 09102006
            (*\() StrConcat 8 index StrConcat (\)) StrConcat
            5 index  dup dup (2) eq exch (2.0) eq or
	    { pop } { cvr 1 sub 20 string cvs 3 1 roll (^) StrConcat 3 -1 roll StrConcat } ifelse } ifelse } ifelse }
      { pop AddOpPar 5 index StrConcat (\)*\() StrConcat 8 index StrConcat (\)^\() StrConcat
        5 index StrConcat (-1\)) StrConcat } ifelse
    }
    {%%if dv!=0 and du!=0 then (u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
      7 index (1) ne { AddOpPar 7 index StrConcat (\)*) StrConcat } if
      AddOpPar 5 index StrConcat (\)*\() StrConcat
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (-1\)+\() StrConcat
      4 index (1) ne { 4 index StrConcat (\)*\() StrConcat } if
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (\)*ln\() StrConcat
      8 index StrConcat AddClPar
    } ifelse
  } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for factorial ! only cst => null derivative
/EvalFactorial {% DR 09/2011
  4 index (0) eq
  { (0) mark 8 -2 roll  cleartomark 2 index 7 index dup 4 index exch sub getinterval exch 6 2 roll }
  { DERIVATIVE_ENGINE_ERROR_no_variable_in_factorial } ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str -> true/false
/IsStrNumber {%
  true exch
  { dup 48 lt exch dup 57 gt 3 -1 roll or
    exch dup 46 ne%%.
    exch dup 43 ne%%+
    exch 45 ne%%-
    and and and { pop false } if } forall
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalLiteral {%
  ReadLiteral dup 40 eq%%% there is an open par -> function call
  { pop (EvalFunc_             ) 9 4 index StrConcat 0 exch getinterval cvn cvx exec }
  { dup 91 eq%%% there is an open bracket -> vector element
    { DERIVATIVE_ENGINE_ERROR_vector_not_yet_implemented }
    { pop EvalVariable }
    ifelse }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% first last parpos Expr[first:parpos-1] ->
/EvalVariable { 2 index Variable eq { (1) } { (0) } ifelse 4 -1 roll exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (f(u))'=u'f'(u)
/EvalFunc {
  4 2 roll 4 index (1) ne
  { AddOpPar 4 index StrConcat (\)*) StrConcat } if
  (Eval             ) 4 8 index StrConcat 0 exch getinterval cvn cvx exec
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Func derivative -> Eval<func>
/EvalFunc_sin {%
  PreCommonFunc
  { (cos\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_cos {%
  PreCommonFunc
  { (\(-sin\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_tan {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/cos\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_asin {%
  PreCommonFunc
  { (1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_acos {%
  PreCommonFunc
  { (-1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_atg {%
  PreCommonFunc
  { (1/\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_floor {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ln {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_exp {%
  PreCommonFunc
  {  (exp\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_EXP {%
  PreCommonFunc
  {  (EXP\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_sqrt {%
  PreCommonFunc
  { dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\(2*sqrt\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Fact {%
  PreCommonFunc { DERIVATIVE_ENGINE_ERROR_no_variable_expression_in_Fact } if
  PostCommonFunc } def
/EvalFunc_sh {%
  PreCommonFunc
  { (ch\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ch {%
  PreCommonFunc
  { (sh\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_th {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/ch\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argsh {%
  PreCommonFunc
  { (1/sqrt\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argch {%
  PreCommonFunc
  { (1/sqrt\(\() StrConcat 5 index StrConcat (\)^2-1\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argth {%
  PreCommonFunc
  { (1/\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/PreCommonFunc {
  1 add NextNonBlankChar pop 3 -1 roll 5 1 roll AnalyzeExpr 1 add NextNonBlankChar pop
  4 2 roll 4 index (0) eq
  { (0) StrConcat false }
  { 4 index (1)  ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if true } ifelse
} def
/PostCommonFunc {
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
/EvalFunc_Derive {%
  1 add ReadNumber cvi 1 add dup cvr log 1 add cvi string cvs
  4 -1 roll pop 5 1 roll 1 add NextNonBlankChar pop AnalyzeExpr 1 add
  4 -2 roll (Derive\() StrConcat 7 -1 roll StrConcat (,) StrConcat 6 -1 roll StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr 6 -1 roll pop 2 index 6 index dup 4 index exch sub getinterval
  exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_Sum {%
  1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop 3 -1 roll pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_third_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_fourth_comma_in_Sum } if
  1 add NextNonBlankChar pop dup 6 1 roll 3 -1 roll pop AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 8 index dup 9 index exch sub getinterval StrConcat
  4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_IfTE {%
  3 -1 roll pop 1 add NextNonBlankChar pop SkipCond
  NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  1 add NextNonBlankChar pop dup 5 1 roll
  AnalyzeExpr NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add NextNonBlankChar pop
  AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 10 index dup 11 index exch sub getinterval StrConcat
  6 index StrConcat (,) StrConcat 4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% advance in str until a comma is found (no error detection!)
%% str index -> str index'
/SkipCond { { 1 add 2 copy get 44 eq {exit } if } loop } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for condition....
/EvalCondOp { 3 -1 roll pop } bind def
/PutIntervalOneAdd {putinterval 1 add} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddOpPar {2 copy (\() PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add close parenthesis in string at the given index
%% str index -> str index+1
/AddClPar {2 copy (\)) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add 0 in string at the given index
%% str index -> str index+1
/AddZero {2 copy (0) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddMul {2 copy (*) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddDiv {2 copy (/) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a plus sign in string at the given index
%% str index -> str index+1
/AddAdd {2 copy (+) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a minus sign in string at the given index
%% str index -> str index+1
/AddSub {2 copy (-) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a pipe sign in string at the given index
%% str index -> str index+1
/AddPipe {2 copy (|) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook { dup 5 1 roll } bind def
/PreEvalHook {} def
/AnalyzePostHook { 7 -1 roll pop } bind def
/AnalyzeListOfEPostHook { 6 -1 roll mark 6 1 roll cleartomark } bind def
/RollOp { 5 1 roll } bind def
end%%%tx@CoreAnalyzerDict
/tx@AddMathFunc 12 dict def tx@AddMathFunc begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% NEW FUNC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% function arcsine in radians asin(x)=atan(x/sqrt(1-x^2))
%% x -> theta
/asin {%
  dup abs 1 gt { EQDFasinrangeerror  } if
  dup dup dup mul 1 exch sub sqrt atan exch 0 lt { 360 sub } if DegtoRad
} def
%% function arccosine in radians acos(x)=atan(sqrt(1-x^2)/x)
%% x -> theta
/acos {%
  dup abs 1 gt { EQDFacosrangeerror  } if
  dup dup mul 1 exch sub sqrt exch atan DegtoRad
} def
%% function arctangent in radians
%% x -> theta
/atg { 1 atan dup 90 gt { 360 sub } if DegtoRad } bind def
%% HYPERBOLIC FUNCTIONS
/sh { dup Ex exch neg Ex sub 2 div } def
/ch { dup Ex exch neg Ex add 2 div } def
/th { dup sh exch ch div } def
/Argsh { dup dup mul 1 add sqrt add ln } def
/Argch { dup dup mul 1 sub sqrt add ln } def
/Argth { dup 1 add exch 1 exch sub div ln 2 div } def
%% modified exponential funtion for 0
%% x n -> x^n
/Exp { dup 0 eq { pop pop 1 } { exp } ifelse } bind def
%% modified exponential funtion for 0
%% x -> e^x
/Ex { Euler exch exp } bind def
%%
%% factorial function
%% n -> n!
/Fact { 1 exch 2 exch 1 exch { mul } for } bind def
/fact { Fact } bind def
/! { Fact } bind def
end
%
% END pst-algparser.pro

%%EndProcSet
%%BeginProcSet: pst-tools.pro 0 0
% $Id: pst-tools.pro 842 2013-10-26 10:25:41Z herbert $
%
%% PostScript tools prologue for pstricks.tex.
%% Version 0.04, 2013/10/26
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
/Pi2 1.57079632679489661925640 def
/factorial { % n on stack, returns n! 
  dup 0 eq { 1 }{ 
    dup 1 gt { dup 1 sub factorial mul } if }
  ifelse } def 
%
/MoverN { % m n on stack, returns the binomial coefficient m over n
  2 dict begin
  /n exch def /m exch def
  n 0 eq { 1 }{
    m n eq { 1 }{
      m factorial n factorial m n sub factorial mul div } ifelse } ifelse 
  end
} def
%
/ps@ReverseOrderOfPoints { % on stack [P1 P2 P3 ...Pn]=>[Pn,Pn-1,...,P2,P1]
  5 dict begin       % all local
  aload length /n ED % number of coors
  n 2 div cvi /m ED  % number of Points
  /n1 n def
  m { n1 2 roll /n1 n1 2 sub def } repeat
  n array astore
  end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% subroutines for complex numbers, given as an array [a b] 
% which is a+bi = Real+i Imag
%
/cxadd {		% [a1 b1] [a2 b2] = [a1+a2 b1+b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  3 -1 roll		% [a2 b2] a2 [a1 b1]
  dup 0 get		% [a2 b2] a2 [a1 b1] a1
  3 -1 roll		% [a2 b2] [a1 b1] a1 a2
  add			% [a2 b2] [a1 b1] a1+a2
  3 1 roll		% a1+a2 [a2 b2] [a1 b1]
  1 get			% a1+a2 [a2 b2] b1
  exch 1 get		% a1+a2 b1 b2
  add 2 array astore
} def
%
/cxneg {		% [a b]
  dup 1 get		% [a b] b
  exch 0 get		% b a
  neg exch neg		% -a -b
  2 array astore
} def
%
/cxsub { cxneg cxadd } def  % same as negative addition
%
% [a1 b1][a2 b2] = [a1a2-b1b2 a1b2+b1a2] = [a3 b3]
/cxmul {		% [a1 b1] [a2 b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  exch 1 get		% [a1 b1] a2 b2
  3 -1 roll		% a2 b2 [a1 b1]
  dup 0 get		% a2 b2 [a1 b1] a1
  exch 1 get		% a2 b2 a1 b1
  dup			% a2 b2 a1 b1 b1
  5 -1 roll dup		% b2 a1 b1 b1 a2 a2
  3 1 roll mul		% b2 a1 b1 a2 b1a2
  5 -2 roll dup		% b1 a2 b1a2 b2 a1 a1
  3 -1 roll dup		% b1 a2 b1a2 a1 a1 b2 b2
  3 1 roll mul		% b1 a2 b1a2 a1 b2 a1b2
  4 -1 roll add		% b1 a2 a1 b2 b3
  4 2 roll mul		% b1 b2 b3 a1a2
  4 2 roll mul sub	% b3 a3
  exch 2 array astore
} def
%
% [a b]^2 = [a^2-b^2 2ab] = [a2 b2]
/cxsqr {		% [a b]   square root
  dup 0 get exch 1 get	% a b
  dup dup mul		% a b b^2
  3 -1 roll		% b b^2 a
  dup dup mul 		% b b^2 a a^2
  3 -1 roll sub		% b a a2
  3 1 roll mul 2 mul	% a2 b2	
  2 array astore
} def
%
/cxsqrt {		% [a b]
%  dup cxnorm sqrt /r exch def
%  cxarg 2 div RadtoDeg dup cos r mul exch sin r mul cxmake2 
  cxlog 		% log[a b]
  2 cxrdiv 		% log[a b]/2
  aload pop exch	% b a
  2.781 exch exp	% b exp(a)
  exch cxconv exch	% [Re +iIm] exp(a)
  cxrmul		%
} def
%
/cxarg { 		% [a b] 
  aload pop 		% a b
  exch atan 		% arctan b/a
  DegtoRad 		% arg(z)=atan(b/a)
} def
%
% log[a b] = [a^2-b^2 2ab] = [a2 b2]
/cxlog {		% [a b]
  dup 			% [a b][a b]
  cxnorm 		% [a b] |z|
  log 			% [a b] log|z|
  exch 			% log|z|[a b]
  cxarg 		% log|z| Theta
  cxmake2 		% [log|z| Theta]
} def
%
% square of magnitude of complex number
/cxnorm2 {		% [a b]
  dup 0 get exch 1 get	% a b
  dup mul			% a b^2
  exch dup mul add	% a^2+b^2
} def
%
/cxnorm {		% [a b]
  cxnorm2 sqrt
} def
%
/cxconj {		% conjugent complex
  dup 0 get exch 1 get	% a b
  neg 2 array astore	% [a -b]
} def
%
/cxre { 0 get } def	% real value
/cxim { 1 get } def	% imag value
%
% 1/[a b] = ([a -b]/(a^2+b^2)
/cxrecip {		% [a b]
  dup cxnorm2 exch	% n2 [a b]
  dup 0 get exch 1 get	% n2 a b
  3 -1 roll		% a b n2
  dup			% a b n2 n2
  4 -1 roll exch div	% b n2 a/n2
  3 1 roll div		% a/n2 b/n2
  neg 2 array astore
} def
%
/cxmake1 { 0 2 array astore } def % make a complex number, real given
/cxmake2 { 2 array astore } def	  % dito, both given
%
/cxdiv { cxrecip cxmul } def
%
% multiplikation by a real number
/cxrmul {		% [a b] r
  exch aload pop	% r a b
  3 -1 roll dup		% a b r r
  3 1 roll mul		% a r b*r
  3 1 roll mul		% b*r a*r
  exch 2 array astore   % [a*r b*r]
} def
%
% division by a real number
/cxrdiv {		% [a b] r
  1 exch div		% [a b] 1/r
  cxrmul
} def
%
% exp(i theta) = cos(theta)+i sin(theta) polar<->cartesian
/cxconv {		% theta
  RadtoDeg dup sin exch cos cxmake2
} def

%%%%% ### bubblesort ###
%% syntax : array bubblesort --> array2 trie par ordre croissant
%% code de Bill Casselman
%% http://www.math.ubc.ca/people/faculty/cass/graphics/text/www/
/bubblesort { % on stack must be an array [ ... ]
4 dict begin
   /a exch def
   /n a length 1 sub def
   n 0 gt {
      % at this point only the n+1 items in the bottom of a remain to
      % the sorted largest item in that blocks is to be moved up into
      % position n
      n {
         0 1 n 1 sub {
            /i exch def
            a i get a i 1 add get gt {
               % if a[i] > a[i+1] swap a[i] and a[i+1]
               a i 1 add
               a i get
               a i a i 1 add get
               % set new a[i] = old a[i+1]
               put
               % set new a[i+1] = old a[i]
               put
            } if
         } for
         /n n 1 sub def
      } repeat
   } if
   a % return the sorted array
end
} def
%
/concatstringarray{  %  [(a) (b) ... (z)] --> (ab...z)  20100422
  0 1 index { length add } forall 
  string     
  0 3 2 roll      
  { 3 copy putinterval length add }forall 
  pop  
} bind def
%
/dot2comma {% on stack a string (...) 
  2 dict begin
  /Output exch def
  0 1 Output length 1 sub { 
    /Index exch def 
    Output Index get 46 eq { Output Index 44 put } if 
  } for
  Output
  end
} def
%
/rightTrim { % on stack the string and the character number to be stripped  
  /charNo exch def
  dup
  length 1 sub -1 0 { 
    /i exch def dup i get charNo ne { exit } if 
  } for
  0 i 1 add getinterval
  dup length string copy
} bind def  % leaves the stripped string on the stack

/psStringwidth /stringwidth load def
/psShow /show load def

%/stringwidth{ 32 rightTrim psStringwidth } bind def

%/show { 32 rightTrim psShow } bind def
%-----------------------------------------------------------------------------%

/pgffunctions {
    /pgfsc{}bind def% stroke color is empty by default
    /pgffc{}bind def% fill color is empty by default
    /pgfstr{stroke}bind def%
    /pgffill{fill}bind def%
    /pgfeofill{eofill}bind def%
    /pgfe{a dup 0 rlineto exch 0 exch rlineto neg 0 rlineto closepath}bind def% rectangle
    /pgfw{setlinewidth}bind def% setlinewidth
    /pgfs{save pgfpd 72 Resolution div 72 VResolution div neg scale 
      magscale{1 DVImag div dup scale}if 
      pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind def% save
    /pgfr{pgfsd restore}bind def %restore
    userdict begin%
    /pgfo{pgfsd /pgfx currentpoint /pgfy exch def def @beginspecial}bind def %open
    /pgfc{newpath @endspecial pgfpd}bind def %close
    /pgfsd{globaldict /pgfdelta /delta where {pop delta} {0} ifelse put}bind def% save delta
    /pgfpd{/delta globaldict /pgfdelta get def}bind def % put delta
    /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse % install .setopacityalpha 
    /.pgfsetfillopacityalpha{/pgffoa exch def
      /pgffill{gsave pgffoa .setopacityalpha fill 1 .setopacityalpha newpath fill grestore newpath}bind def
      /pgfeofill{gsave pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore newpath}bind def}bind def
    /.pgfsetstrokeopacityalpha{/pgfsoa exch def /pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind def}bind def
    /pgffoa 1 def
    /pgfsoa 1 def
    end
} def
%-----------------------------------------------------------------------------%
% END pst-tools.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
% $Id: pst-dots.pro 446 2017-04-19 11:40:55Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 2.02,  2009/06/16
%%
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%% Modified by Herbert Voss (hv) - 2008/04/17 
%
10 dict dup begin			% hold local
  /FontType 3 def
  /FontMatrix [.001 0 0 .001 0 0] def
%  /FontBBox [-571.5 -742.5 571.5 742.5] def % changed to next line 20060616 hv
  /FontBBox [-1000 -1000 1000 1000] def  % See end of file in /BuildGlyph
  /Encoding 256 array def
  0 1 255 {Encoding exch /.notdef put} for % fill the array with /.notdef
  Encoding				   % replace with given dot names
    dup (b) 0 get /Bullet put		   % get the numerical position of b in ASCII
%					   % and save /Bullet at this place in Encoding 
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put	% 67
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
%%%		  
    dup (k) 0 get /Asterisk put
    dup (K) 0 get /BoldAsterisk put
    dup (J) 0 get /SolidAsterisk put
    dup (h) 0 get /Hexagon put
    dup (H) 0 get /BoldHexagon put
    dup (G) 0 get /SolidHexagon put
    dup (f) 0 get /Octogon put		% 2008-04-18 hv
    dup (F) 0 get /BoldOctogon put	% 2008-04-18 hv
    dup (g) 0 get /SolidOctogon put	% 2008-04-18 hv
    dup (a) 0 get /Add put
    dup (A) 0 get /BoldAdd put 		% 65
    dup (x) 0 get /Mul put
    dup (X) 0 get /BoldMul put
    dup (m) 0 get /Oplus put
    dup (M) 0 get /BOplus put
    dup (e) 0 get /SolidOplus put
    dup (n) 0 get /Otimes put
    dup (N) 0 get /BOtimes put
    dup (E) 0 get /SolidOtimes put
    dup (i) 0 get /Bar put
    dup (I) 0 get /BoldBar put
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
%%%  
/CharProcs 47 dict def
CharProcs begin
  /CirclePath {0 0 500 0 360 arc closepath} def
  /Bullet {CirclePath fill} def
  /Circle {CirclePath .9 .9 scale CirclePath eofill} def
  /BoldCircle {CirclePath .8 .8 scale CirclePath eofill} def
  /TrianglePath {0 660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath} def
  /SolidTriangle {TrianglePath fill} def
  /Triangle {TrianglePath .85 .85 scale TrianglePath eofill} def
  /BoldTriangle {TrianglePath .7 .7 scale TrianglePath eofill} def
  /SquarePath {-450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto closepath} def
  /SolidSquare {SquarePath fill} def
  /Square {SquarePath .89 .89 scale SquarePath eofill} def
  /BoldSquare {SquarePath .78 .78 scale SquarePath eofill} def
  /PentagonPath {
    -337.8 -465 moveto 337.8 -465 lineto 546.6 177.6 lineto
    0 574.7 lineto -546.6 177.6 lineto closepath
  } def
  /SolidPentagon {PentagonPath fill} def
  /Pentagon {PentagonPath .89 .89 scale PentagonPath eofill} def
  /BoldPentagon {PentagonPath .78 .78 scale PentagonPath eofill} def
%-------------- hv begin 2004/07/25   from: er 2003/03/24
  /HexagonPath {
    0 550 moveto -476 275 lineto -476 -275 lineto
    0 -550 lineto 476 -275 lineto 476 275 lineto closepath
  } def
  /SolidHexagon {HexagonPath fill} def
  /Hexagon {HexagonPath .89 .89 scale HexagonPath eofill} def
  /BoldHexagon {HexagonPath .79 .79 scale HexagonPath eofill} def
%					2008-04-18 hv
  /OctogonPath { 
     550 dup 22.5 tan mul dup neg dup add /xMove exch def 
     exch moveto 7 { xMove 0 rlineto 45 rotate } repeat closepath } def 
  /SolidOctogon { OctogonPath fill                             } def
  /Octogon {      OctogonPath .89 .89 scale OctogonPath eofill } def
  /BoldOctogon {  OctogonPath .79 .79 scale OctogonPath eofill } def
%
  /AsteriskPath {
    20 0 moveto 10 250 180 500 0 500 curveto
    -180 500 -10 250 -20 0 curveto closepath
  } def
  /Asterisk {
    AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath
    60 rotate AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath fill
  } def
%
  /Basterp {50 250 220 500 0 500 curveto -220 500 -50 250 -50 30 cos 100 mul curveto} def
  /BoldAsteriskPath {
    50 30 cos 100 mul moveto  Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp closepath
  } def
  /BoldAsterisk {BoldAsteriskPath fill} def
  /SolidAsterisk {CirclePath .9 .9 scale BoldAsteriskPath eofill} def
  /CrossPath {
    40 550 moveto -40 550 lineto -40 40 lineto -550 40 lineto
    -550 -40 lineto -40 -40 lineto -40 -550 lineto 40 -550 lineto 
    40 -40 lineto 550 -40 lineto 550 40 lineto 40 40 lineto closepath
  } def
  /BoldCrossPath {80 550 moveto -80 550 lineto -80 80 lineto -550 80 lineto
    -550 -80 lineto -80 -80 lineto -80 -550 lineto 80 -550 lineto 
    80 -80 lineto 550 -80 lineto 550 80 lineto 80 80 lineto closepath
  } def
  /Add {CrossPath fill} def
  /Mul {45 rotate CrossPath fill} def
  /BoldAdd {BoldCrossPath fill} def
  /BoldMul {45 rotate BoldCrossPath fill} def
  /Oplus {CirclePath .9 .9 scale CirclePath eofill .775 .775 scale CrossPath fill } def 
  /SolidOplus {CirclePath .775 .775 scale BoldCrossPath eofill} def 
  /BOplus {CirclePath .8 .8 scale CirclePath eofill .775 .775 scale BoldCrossPath fill} def 
  /Otimes {CirclePath .9 .9 scale CirclePath eofill 45 rotate .775 .775 scale CrossPath fill} def 
  /BOtimes {CirclePath .8 .8 scale CirclePath eofill 45 rotate .775 .775 scale BoldCrossPath fill } def 
  /SolidOtimes {CirclePath 45 rotate .775 .775 scale BoldCrossPath eofill} def 
  /BarPath {40 660 moveto -40 660 lineto -40 -660 lineto 40 -660 lineto closepath} def
  /Bar {BarPath fill} def
  /BoldBarPath {80 660 moveto -80 660 lineto -80 -660 lineto 80 -660 lineto closepath} def
  /BoldBar {BoldBarPath fill} def
  /DiamondPath {0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto 428.5 0 lineto closepath} def
  /SolidDiamond {DiamondPath fill} def
  /Diamond {DiamondPath .865 .865 scale DiamondPath eofill} def
  /BoldDiamond {DiamondPath .73 .73 scale DiamondPath eofill} def
%%%
  /.notdef { } def
end
%
/BuildGlyph {
  exch
  begin 		
%  Metrics 1 index get exec 0
    0 0
%      BBoxes 3 index get exec
    -1000 -1000 1000 1000
%     -571.5 -742.5 571.5 742.5
    setcachedevice
    CharProcs begin load exec end
  end
} def
%
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def
%
end
/PSTricksDotFont exch definefont pop
%
%% end

%%EndProcSet
%%BeginProcSet: 8r.enc 0 0
% File 8r.enc  TeX Base 1 Encoding  Revision 2.0  2002-10-30
%
% @@psencodingfile@{
%   author    = "S. Rahtz, P. MacKay, Alan Jeffrey, B. Horn, K. Berry,
%                W. Schmidt, P. Lehman",
%   version   = "2.0",
%   date      = "27nov06",
%   filename  = "8r.enc",
%   email     = "tex-fonts@@tug.org",
%   docstring = "This is the encoding vector for Type1 and TrueType
%                fonts to be used with TeX.  This file is part of the
%                PSNFSS bundle, version 9"
% @}
% 
% The idea is to have all the characters normally included in Type 1 fonts
% available for typesetting. This is effectively the characters in Adobe
% Standard encoding, ISO Latin 1, Windows ANSI including the euro symbol,
% MacRoman, and some extra characters from Lucida.
% 
% Character code assignments were made as follows:
% 
% (1) the Windows ANSI characters are almost all in their Windows ANSI
% positions, because some Windows users cannot easily reencode the
% fonts, and it makes no difference on other systems. The only Windows
% ANSI characters not available are those that make no sense for
% typesetting -- rubout (127 decimal), nobreakspace (160), softhyphen
% (173). quotesingle and grave are moved just because it's such an
% irritation not having them in TeX positions.
% 
% (2) Remaining characters are assigned arbitrarily to the lower part
% of the range, avoiding 0, 10 and 13 in case we meet dumb software.
% 
% (3) Y&Y Lucida Bright includes some extra text characters; in the
% hopes that other PostScript fonts, perhaps created for public
% consumption, will include them, they are included starting at 0x12.
% These are /dotlessj /ff /ffi /ffl.
% 
% (4) hyphen appears twice for compatibility with both ASCII and Windows.
%
% (5) /Euro was assigned to 128, as in Windows ANSI
%
% (6) Missing characters from MacRoman encoding incorporated as follows:
%
%     PostScript      MacRoman        TeXBase1
%     --------------  --------------  --------------
%     /notequal       173             0x16
%     /infinity       176             0x17
%     /lessequal      178             0x18
%     /greaterequal   179             0x19
%     /partialdiff    182             0x1A
%     /summation      183             0x1B
%     /product        184             0x1C
%     /pi             185             0x1D
%     /integral       186             0x81
%     /Omega          189             0x8D
%     /radical        195             0x8E
%     /approxequal    197             0x8F
%     /Delta          198             0x9D
%     /lozenge        215             0x9E
%
/TeXBase1Encoding [
% 0x00
 /.notdef /dotaccent /fi /fl
 /fraction /hungarumlaut /Lslash /lslash
 /ogonek /ring /.notdef /breve
 /minus /.notdef /Zcaron /zcaron
% 0x10
 /caron /dotlessi /dotlessj /ff
 /ffi /ffl /notequal /infinity
 /lessequal /greaterequal /partialdiff /summation
 /product /pi /grave /quotesingle
% 0x20
 /space /exclam /quotedbl /numbersign
 /dollar /percent /ampersand /quoteright
 /parenleft /parenright /asterisk /plus
 /comma /hyphen /period /slash
% 0x30
 /zero /one /two /three
 /four /five /six /seven
 /eight /nine /colon /semicolon
 /less /equal /greater /question
% 0x40
 /at /A /B /C
 /D /E /F /G
 /H /I /J /K
 /L /M /N /O
% 0x50
 /P /Q /R /S
 /T /U /V /W
 /X /Y /Z /bracketleft
 /backslash /bracketright /asciicircum /underscore
% 0x60
 /quoteleft /a /b /c
 /d /e /f /g
 /h /i /j /k
 /l /m /n /o
% 0x70
 /p /q /r /s
 /t /u /v /w
 /x /y /z /braceleft
 /bar /braceright /asciitilde /.notdef
% 0x80
 /Euro /integral /quotesinglbase /florin
 /quotedblbase /ellipsis /dagger /daggerdbl
 /circumflex /perthousand /Scaron /guilsinglleft
 /OE /Omega /radical /approxequal
% 0x90
 /.notdef /.notdef /.notdef /quotedblleft
 /quotedblright /bullet /endash /emdash
 /tilde /trademark /scaron /guilsinglright
 /oe /Delta /lozenge /Ydieresis
% 0xA0
 /.notdef /exclamdown /cent /sterling
 /currency /yen /brokenbar /section
 /dieresis /copyright /ordfeminine /guillemotleft
 /logicalnot /hyphen /registered /macron
% 0xB0
 /degree /plusminus /twosuperior /threesuperior
 /acute /mu /paragraph /periodcentered
 /cedilla /onesuperior /ordmasculine /guillemotright
 /onequarter /onehalf /threequarters /questiondown
% 0xC0
 /Agrave /Aacute /Acircumflex /Atilde
 /Adieresis /Aring /AE /Ccedilla
 /Egrave /Eacute /Ecircumflex /Edieresis
 /Igrave /Iacute /Icircumflex /Idieresis
% 0xD0
 /Eth /Ntilde /Ograve /Oacute
 /Ocircumflex /Otilde /Odieresis /multiply
 /Oslash /Ugrave /Uacute /Ucircumflex
 /Udieresis /Yacute /Thorn /germandbls
% 0xE0
 /agrave /aacute /acircumflex /atilde
 /adieresis /aring /ae /ccedilla
 /egrave /eacute /ecircumflex /edieresis
 /igrave /iacute /icircumflex /idieresis
% 0xF0
 /eth /ntilde /ograve /oacute
 /ocircumflex /otilde /odieresis /divide
 /oslash /ugrave /uacute /ucircumflex
 /udieresis /yacute /thorn /ydieresis
] def


%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/@beginspecial{SDict begin/SpecialSave save N gsave
normalscale currentpoint TR @SpecialDefaults count/ocount X/dcount
countdictstack N}N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto
0 vs rlineto hs neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale
ang rotate rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}
ifelse scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale
llx neg lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly
lineto urx ury lineto llx ury lineto closepath clip}if/showpage{}N
/erasepage{}N/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{
count ocount sub{pop}repeat countdictstack dcount sub{end}repeat
grestore SpecialSave restore end}N/@defspecial{SDict begin}N
/@fedspecial{end}B/li{lineto}B/rl{rlineto}B/rc{rcurveto}B/np{/SaveX
currentpoint/SaveY X N 1 setlinecap newpath}N/st{stroke SaveX SaveY
moveto}N/fil{fill SaveX SaveY moveto}N/ellipse{/endangle X/startangle X
/yrad X/xrad X/savematrix matrix currentmatrix N TR xrad yrad scale 0 0
1 startangle endangle arc savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
%%BeginFont: URWPalladioL-Roma
%!PS-AdobeFont-1.0: URWPalladioL-Roma 1.05
%%CreationDate: Wed Dec 22 1999
% Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development
% (URW)++,Copyright 1999 by (URW)++ Design & Development
% See the file COPYING (GNU General Public License) for license conditions.
% As a special exception, permission is granted to include this font
% program in a Postscript or PDF file that consists of a document that
% contains text to be displayed or printed using this font, regardless
% of the conditions or license applying to the document itself.
12 dict begin
/FontInfo 10 dict dup begin
/version (1.05) readonly def
/Notice ((URW)++,Copyright 1999 by (URW)++ Design & Development. See the file COPYING (GNU General Public License) for license conditions. As a special exception, permission is granted to include this font program in a Postscript or PDF file that consists of a document that contains text to be displayed or printed using this font, regardless of the conditions or license applying to the document itself.) readonly def
/Copyright (Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development) readonly def
/FullName (URW Palladio L Roman) readonly def
/FamilyName (URW Palladio L) readonly def
/Weight (Roman) readonly def
/ItalicAngle 0.0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/FontName /URWPalladioL-Roma def
/PaintType 0 def
/WMode 0 def
/FontBBox {-166 -283 1021 943} readonly def
/FontType 1 def
/FontMatrix [0.001 0.0 0.0 0.001 0.0 0.0] readonly def
/Encoding StandardEncoding def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BC2C03103C68570A7B354A4A280AE
6FBF7F9888E039AB60FCAF852EB4CE3AFEB979D5EA70FDE44A2AE5C8C0166C27
BF9665EEA11C7D2329C1A211DD26BB372BE5822F5EA70D99EB578C7BEFD44CDF
045A363056E5E1CC51525EA6FC061DCEBB337208EFF729802376A2801424F670
0E7E6397B28F15BC10B40012B0A3EAEB2693E8F7F627C4C9C7C6C5BFF105C1E4
1B2B9E8F09253B76040D268B80719E1B3F5A55AA45ACB756B8E2BF5B37627E46
DAFD4A4F741A859BB5F7D7C77FC7AA96EE6AC93C06CA829B81FE31E32D59C6DE
B1BF3B6CCC5C3C9296DC86D01487F08AB668F656CDD88EB816AEDD1EFA47F014
FF598E78C978DF18F8F66057351BC96B48015AF2E09E3E318053E952E9AD4037
BFC7EEF9CBFD7BC35746565B7EFBF241639793AE357220843147FADB929FBD24
01C88A382F00BF79554D125C543455330002B0FE6D229830470C78541E78DAD5
3E7C1A619B91215AE025F81561441BFC9ADA446035B8EB9C3D69BA746AD0CCAA
049D1FE4D905DF3F48D22900E02A23FB23F6B571DDC8B2CF7008431C1EAD7F6B
D92A2C42CAED94F9714F44E3CE31FBAF23A064AA2A7F13D6E5378E28539F0009
323A0755E58BA7564A408B142C230672A423DA6A6E54ED162AFBF8FADFA75B0B
FC648D5DA6EC31251B62B9F619AD9460876EEFCB8F9D2369CA3055820306533F
3C1D47D5A2EF97619FC2C780BCD9540A820748369FFDAB9D52492F130C0AC3C8
E0C87377DA6C21F1DE429C15AA939877876F84605F6785B5ADEA97321BF29DEF
3692AF535EEFE801975F94645272142128A3FEC8B1BCEB6E57B83520B5C4DD69
36DB8CDEF6E49B8944CA31C59F8790CD3FED58F1182D9AC6DCB2D75B4881B430
C67DB769B4745EA54233CDFD5600BB2A96209A83FD04C13D4AA4AE27DED97D25
93F6FDA5F64711EC7A2899AC98BD8D8879A6A348265832994C3BAD80E1D12291
CB05924302B780443A76A09E1C27E8DCDCD87FFE3BE17DE0421A47733C2BD723
9C876942155834190F65598810AF8CAD9842F8A1E3BBD2AE3348BD8FC9189FE2
ED5643EC4D87148775121702EEB7639ACD80EF4F07542BBBC09F98F81FB91A1C
89C691BF38CE4239B11C1C0D9A6B864753E204C0BCCB093E139F9D6104FE0584
DF022C621F86E5BFE2E047FD560E8A89B3872C87F7811E9EBCA9CF182472841A
88E7C421E5CE69DAD123B88D4E6C0FD85C86C74435BFCAE28C2B5CAD57D91A9B
4473906D044085B5336B066C6D9CE994D2B333F470AD32D3BC28BA2D699B7AE6
2B689CD50CE2D458501EBCD2381F3430C3059EDCA22D9F15CA03CD18CB160E59
C0E960F79010DC1E9EC40BA6914F9FB7951CB4D5AAFAA135C17D5D64CD848A32
C71A5C856CC9C94F24B6C9AF854B83771678C0B0B4C6A4D9C05ADE69E5C04697
8751F11D2AD4A508CC61D06884D6246FA607802124E77FC07620C1DC238000AD
F6AD8E9D7418065549E5A7DE64405908A078F353F447D44E968A8BA903DBE04F
677479DB92989DFABDF637FF627F4756AFF80F27EA2B9ACD21AA8BE59F75A8EA
AE3BF5ED74076F822C41086CCE1E87A943549450BDB18CEA58D596BDEDB2EA43
8085FC9662B6C313B5CB54A9AD8CCE8BAD25DBCE0ABE023261A1794761FA8430
E43AA6A59BFCDD7DCFEF07F933662CDC5724D3A5C43A25929B54898BA9B58D30
C6F19B4DAE1DDF8E068A8B441C5B5E1FE556DB195D2881FC9AAF598C88CEF222
74222E0FF68051E53B460935C2DF2D8A77807B4DEEAD3FAD1E46371B4494A4EC
B43C272E0A1DC0BFDFA816FBA451DCFC20B89F7603803A12861C0FECBE1F47EF
98C35E5DA9D57564EB8DD80FC43D47B3C5D419327F7870805E30810C134DCE8F
C1F5680ECAB52B7666FE5AD07FBCE7B6C7466C36C1FE04D8866F9251B149042D
71C931DDD8234BFF1BB6BC76E651CA85C0C845ACFDC98ECFD8D07A125E562356
B7D819379BCFBCA830A71389C246F771AF97AD574BFE9944461FCD9408C88D6A
3EB9ACEEE59EFAABD76D5677B231727E89E110AB58F78A4BE43408C7C2F6D446
5B31BDEBFFA59B2A6E9438E4F5075931668B04698B3CBE8F262043BC15C05289
17E8327FB8B6B10274907C8E9A28945C70BE2EC90FDE715D61801FE189AB7A75
30A0C7C921F074C2C63001A415D6978EC80CBBE250BA0562AB6D29135BA477FC
3021B6854484A0592796449AE8F9B27B222100FBD51A9BAE076457A0A9E830C0
658485CA6304D445AA4B08E97B5BD3466C6897065446F7653446FEF499C10BBF
BDCF134E1D1EB8B314610183673444B6645B55EAD0550D79E5E4655E10AE13C4
0486C064E7C7CF994BE8DE8672207703D00D9E6A2484139549A171890B36BD31
0D1A184C084913958D22575E85F99F8590F62933B22EC8CD48D81CC019C9B4E4
1A80822687CF6CE66357C4904B79B704C799AE090C2E12AE0D9889F2FF91CEC6
6A50A934E374045BB4457FA9E5B652C7DD22CD157327FC45056132D2861F781A
F45D555B786B9B2BC563CA35E60B85E210DA5E0740AC1751DE355F94117437A3
4D3F4F85AB32857E14E646AD69AE46D8C62864A6C967A44D7900D44790C42519
C77695497AD2EBD51CB4DAEB0D9834F4CC5F8EEBE00BE39EEC30136B8BBA284A
D932B98721AAC2F00DF496288F46F21FC15112897A82021211D00A7FF64F3150
5A2E1CDB32A589690504D097B10E30E7A4A75691C0BCF4E5B8032D1946A35928
9FE2140F4B10602A684CF11275E537A592BDA358B1A86900F1B8DC287C8B2340
D731E4BB3CC6EC6BFF929EF80FDB8C24F232C6D89B7278B910483A464448C070
9C17105A411052C53817770E78F441E5F78DB3A150F0A442EC30FFFE388E6A96
B840649848D48610D183AD58CFAE137758B183F086935E739FF030719400112E
AA300CB6910A4072C474D5DEC20D551CA856823786EEBBF290D88A354644A4FF
F38C3AD2A480AE36218B4F466B8C7B131B3883E24E8852E88A012D41DB6E1D3A
D6BD20856C95470908FBFB46E47AFE234F39950BC003FDB74489C8B45BF7E1D6
38375F2F1ADC2E07E91763D2F0F99D02647FBF68C82AFBCC7E3A3DED220746FF
2B7076B8337BC6B584B5914801AAC6E8C36EDEB819C7BDC6335716A87C2F39D5
4B03E9A983BF9EFA56EF946D8509F3B7D2D2999D3F3725FACB38C6E0C24DCE9A
0D654066CEA814469DA19702F997DB1854F135C2B69D0BE6D18336AC2CE0BE1E
D7139E62E7910590CDA5DD4588FC950C9A5CACCBE39F1A5B5922B70542CA8BB9
3B63EEB09F28F3966CBC449C788B427E50CA5BDC093DC971B1AE1279F582DD25
8C11C2B23574478290F37CC2C41A88139787246D4C8C41D27CD3F086246728F8
B4B968EBCABB09B17A7E85C7BE858BB0C683D1834FCCA9AD81FA94AB9C5F340C
AA0AC6745916FA18BB8DF0F66B3C1CC771158FAC11D76E7D163A7342A6CDD3C6
662F5AEC5B3E4A69FA7BA6EDD414F99F3459476AE973647334BF7EF2A742DD53
A70656C3E06A7AFE3BCC7EA7E4B18230728FA5537156C1FD8C81C3C8C2305F34
ABF61F1A074A1266D368699A779C424B40BAD55E954F8096414D8305558B5F99
A435D7AA3AD6C77FB5598C222D29454B656262BF46A872C86B8B98E210848F52
4A1A2EC2A5CA7EE3C578535D39CC4C6BC53064CBA51F6A78837E178446A5B0C7
C57D129D64B0DC0FBF1F3A16E5BA4F90BB140462D8955A1E06DCEA921B5088B1
1C34EB94E3C489B22D1ED797CE26E2403B89B3D916D30ED29B3E7301B06BD090
6D7C8F038DBEE3A896992A1CDABBC5D2C87F9C203979697C640416D38AF8998F
EC5B0C5230E17E4CC99545E0775D89C1D1836F6DFD97FBF9633F89417C286FB9
8AB2D2D3A6081AB500436204DE3F6F1EAF14CCB7901A3C1C54A705AE432416BF
4FE23DFDA51D40DD9BF5DDD3CB175F3E1E612CD544ECC7FEEFA841B2274570DC
E510E39D6CC4DB979186221ED7E0B65E32A8EEA6EC7A69671417426CA896BAEE
9F9EC2637429CB45EB3ECFF3EC05B35F6AAE9C67CAAE00C3B09AA29BF8966E11
E954B0AEE88EEF4385445A3E60BB759D894EC7B48A9F798B971EDBEE3650FCC7
C8B259CCBA8205E8F98F00E3D4850BC4A6FCBDD7123B07424671BF00797D681D
595B89297A87323DB82F4366E7F84F745A38C7631BEB3D095F3BDEB0FC0140FE
BE91C45AAB69F13798A4767C68AFFEBD29ED4B6E2AEAD7E6A538D79D6CBC1D6E
24C17BC4090A4CBBEF3B632DD50F52C8AF74E9B3FC245E6888A546966F9D7699
00193133B2F746F8517795ED6B0BE7AA1CD29495FCB31167ED06A5A340040C1C
50BA49524C71DD1D9114BA71BBFF779A727D18EA999ED76E138D519E428C90D3
0E716D592F48C9E47DDC1DB7FAA39EB5F85C96ABC52810FF6AF70D58A4D7D99D
11D1F0FD52825A689E15BA0AC79D3F8FBC31DBEE9CAC7E77D79B27E02132A165
44169E0C4A62F45F86C78A802997AC440DC8D5A6B1DCE8C3EF1B58A487BDB1B3
F7EBB749DC4440CF1B518E22A75CF5E9CB9A4DB1F4E6B4BCDBBFC85A3A92B3FB
7C199618D3B2D90A75AF58CC4CCFE35957B23CFEC70C91E1823C03F800BC86CA
8D726260B51E71CE4F9FA406446C3F30BDB2FCE712EB0B9BEF80D5A156E3EF0E
EA375E66905D49892B70588D73129F8DD1F0FAA258942085749E505F1FAE14DE
1883D530ADE4B196DE9E61C4C8D5FBF4CF991AF88820F123F95B43BDAFC180A6
1CD2FE2A391271413D1ADD6D779B654150041DB744518A0E8A80F687AA6A1FA1
45DFF761EF8B43F852E00722DB3532CD698397EC9FEC7BA6446656F2ADFE1C2A
B7F8582F33B2E19893421464A9501F94ABE2333BAE0E4F838E1342D1C351AB40
3B42027CEA384DF3A16FD969B5FDDF273E44AA0993D5479BF1CFB2FC96B01ED7
C2970B0AEAF74A19162BCECCEC91080AA036BC6CE74FF7CD37E72356EA559BC8
93542982FFDB6CF19FEE4D250CFEF414086CC569FE694A3090465C94CFA5C784
37A7440C8AA88B32FDEA21D73F36605627934E055273B2BFECF4FE50A760887F
52E83F24A890B95FC8BAD5F27D6E47F4FB9602AD6E1158543D00A6C821C8ACE3
01EECF257B1E9BA488552799E40E102D9E5646FEA24C0940D12507B823BA1B8B
C4AF53974D04BDABCC0C2A06849F5B712394804BD4BE709221871A09D6ECAED6
F3C14FB659E8B9BBEF8720614C303738994C150C2AC9AFB1163E58651D2D017D
8BAF922FF16B61334C671073A58AEFFDE86FA40B544AB1EEA5F27B91E98C2998
6B14D002B34AD21D01E1971AD8905004C227EB2475D77D38011585E14870C3C7
0C900B579CDE7D7C306DE84AB81E99DBF54BCF28B63386D2EA922C80E9702C61
E213FC3412FA8677AD4CDBF5D5E8524B0D4C7CBBF2A3552C50A5DE02C35AC220
A89123A74E0B57509BA75FA5613021A298F90AB39C197A0593B73F71DCFCBD2B
771A97BE327B917D1B6296D9453D491902C7EEBCC1ACFA39BCD273B7CADD7262
FA3D6C4CA5F9F22A72FDA487FC97405B9ED8E24200F1F2197F2EED6974E7B8A2
12D08F73B0278617E8DA35579FE7E7B9A29DF29B896AA8798E221313618DE78D
22F02EA81597EA427FED568F0287D043B4DB3C8CC888243B9F7305A874F81669
762B92A37D94A10B417B0B65C693E3FC65EFDB1BFF7763CF1E0CB43E13F1FA2C
B3EE64202C221D79BA01F71E56482BE924C444FEF0F24767A37E04B9A5B0901E
C307EDBFF4A6CD8CC2FA66CAC34B13CD4E07EBBA6599DB6A9E6D157E7FB615FA
653AF27B2B8B8743AEA49E26DED6E9861BAAD4020FFC9E1E34E3EBF1155F34FD
D9BB4E925596FE4DDA936CC61226CF71096E05136E4E21B245AC7E4E1B72FFD0
6208BF3580A51EC039AF5DA58C53421D968C241C486AEFAD9BD5816166A81DF8
5561DF48DAC4C5DB5A2AA6B01DB34FFF92603962D53EC89031F6FA7ED14DF94D
00962F1AB31CF58A243D561F48BAE3A8FD186A74F4EF84B53657102B0F1455E3
4A4AA4C7EFC07B8B1AF2B6E605400617271C4B401024CE983C833967794CF920
F7F76FB778B88CE64A4C11F1625AA12A6870CCBC70D3D0308B625AA1B137FB3A
83E6991598DEF4C8383A977471C2068168789E05BC1A8257A8F0B41044E48BC9
DCAC41666E1EA258B8AFF0057093EBDADEB98DDEBF01EEE941420AC237BAF77C
601D4DEA033DED29E2026071069816E45957D67E325BEA0DE02F9B9B8774237E
72165DEA201E19CF0219E481BB3D249D4343287FD9B23C9A1991BB213AD96027
0AE1ADD710DAE54EEBD0D519ADA5800507C2C438FDF5A9F44ECC5B23C52440D4
7938D8862BE38981BE5AC33FBD8E3A956DE17C1A437ACDBC56D765E2355503A4
239F91FE53AEB42B939458D9D00F1C76272B6029EA99838BA5E3B7B90B1F3EFB
1CB8940FFA97F2BAAE70AF8C9438C0FCBE6548410923F72AE6A14A03BE426375
0A318B04CE4D30499BF4A0F07C4B1B09F3761E48BD8BE681BF7A548661AB1394
3E2688F7A5BD214E0C4C479D4AACD3F8F62F80F10EB8A279BBA8CEEE2DD7DAAF
5FD094C820F1C05D8230C6E68500EAC4A14E272629479383213CEAA4C39C4436
3FD281C4682E9D1DE387D32020CA8F0B770CFF14E32CF1D69B40FF95F5335174
3ACF6FE9BA53852D97BE2BC04BD4BF33BB8A2D65F931438C338FE8026BC33BCA
530AE5B39C9C213990887DA7C60DC8B0549B4C0C518E7B3CA4BCDDF0736F84EA
3546ABFEB80FE93262FA3E43C7FFF907FE3D3F7D71455489DBCD070F847BD4A5
B177EF9C780017684152F87505971C26FFB4F1F8F1F9ACFDBB558261866298A0
3C9BA9B611970044F0D6FFF88701384371A0E87927C9843246E13DDA5C5F4B86
AEBE7F1F469E83712656FA864515EA337C4283A9F9F44309754E5D14533E4C72
185B76085605AE0FB00B6C1C7DFDDCD2BAD62D399791AA2C42CA2416F881B1D7
40338C5CFDFE55602BC185DB694CC4E421302DA6C1B72942753AFCCDA182D960
0BD4CF98A5081C9E9223BBE4E8D1B2AEA3E965956190F3350D9A95CC4E2CC4BB
97B92099134A9B272E29346B9758C5A3E0A4384749A7D880CABAEA53ACC25399
78118B095E6A8ACB62DD34E1AADA41BD07B4671FF09BFAD35E4E556FBFC174D3
95DEE1082E90DBFE87968918000FCCC4BBB3D0F0A77E1CE9E14E537CD9A3C06D
A778E0FF6CC1BDCDEE4C69AFFEF8905575FE4CCB36C662C7BB5E7DBBFFB6B4C4
418F77DB1E42106D174A12F4D39B6D5FC5E1B9E439F1165292714A8F491E25F2
469615C7917C71E98D9B788D633734F1EA02CCE34A75C83AF1249A45E313F2C7
CC21A13A299633F9A82F5A6DC515C88CCA3868EB71072B05B4A5CD9F0D604D6E
3A5D4D358A267105E23490B8109E5B291B20B857112F24CBB8B6A57808AFFB28
EEF6BDE084AF59375E58574796CEECEE9548F85CB356C457C2EE13D51F04083D
0CB1A8CA3E397111929961B5B60B20F725F75270236339CC9BA4A062E642EEE3
AB58A799959C9F1CF0F89ED8A79C0BD3B422DFD77D2E86E06C0EFA23AF2671B6
6F6EF4CEE26BA9E97B3A414FACA4F516594E244CFEF1A8181DF9E8D5200BD249
99E6BB078660BE98A535352B7595B3BDE9587D017F28329426C532AED94CAA8F
1D334D10110FA6EEC225F2ABCEDD9532036DC293F4C694C124E3C0345394D2AC
A81933F3C9923BF24F74D9DB197ED12D51B0342A0216A769BB5F0967CA8B3F23
58D01155020EC83B7A464BA7AA1E55B9ECFB39F9C5E7FE82CD6AA69212F7C45D
D001CDD50B275589987D80878D2DA3A86257C5F46CA0679FA92419B17F95F121
B58CF6B2568910A40F1A19000F1997187917BA23FE1D0655026BCD278CA32257
5D75103851939F8F9C31AD68B0CC0FEA12295B17CF8CDBB25A7654608265D357
A5EBCEC560B2C88FFC598CA52F1434B56B8EE3C13B4EDC932CE79533470CA5F3
4361AE525042F95D9C679AFE350E0168E1A8ECA8C9CB9BC69485C3E19CA492D1
9E1B10F33B3D7109FADC471ED6488AA68550833D6409D42765C1AECA4F3AC8A2
1313D3C815E6E10EB8C1FA2BDF8BD1C03849473767A2DDD3FAF50DEA43FD52BB
02FEBF0126FC145DF78D673DD9E14AB87DB512FEAFA7A842368BE8AF7535D950
EC9EE9FAC74EB9A5B11017A5DE91833B5982D9F2646C62F0D3A23344231BD43E
CD4EFE1F9D4229DB4A1668818E6AEB8A5BC63CE6159E3DE957DD875C2C770332
64CAB245A4FEA4E4E92ED3993A0BEE81F40FE44C297F6317C2BF7497B00EB929
BDBE9AFDDF002ED3309BDD4FE07D7CEF5C27E2BBFE25465DFDC5649815F0CCA1
6FDDA4FBFAC255A2E5A063EDB5F2606090E2868DBD4A82DA11B0FF72677052B4
DD4758693E706C83F9F37C95A687123FE24A072EF98BCE2BBF6FC536BB6B08B2
B33E22A3B0DC696248FA3D649364177D93AD5EB85D4005094B9F67493E4C3991
7A7FC65CCDB5FB0D414301DB5B903AD4267884ED0CD9DC63574D9980BBEE66D3
3A7E563DAB6D3481A92A00A5282BA2A103D2DAFBB2FFA490D134C8C3BAF1CCD3
16FCEC9620C88C9A9E4F56B7C1F6353B6E84712456EF7A77E5F114F730722C5E
C0B19CCDBC99FF4355123DD3C1D53D65CF30E23B3B142282405FA8736C077C89
196430AFC05DAC927FD56C0AF0528B1A7B7FE4E7AE599E719E52F26FDD1FAB0D
59EBC9EA2350772BC6E4157DE65B2E41EB021A4EFF8A6DBA198BAB89EA730F89
DFC0306D016050D66571DA22CEF1C0803D2F69347DE188DCE1D3900C12D59DF0
ABE9F7775203FB13EA20BF583F647E2B0D072B82D6C5D4606FD968C5C1E761B7
63B812DC97F6701D9CD1E74AC5D873DD414B2B89254FC11A4FDA5CC00656C0B4
49E94C749BD813E197129228DA0B47FE071D80080D42025BAF9011131101AFC8
89F8BE5C2E1D8C2C4506ED116D7963F6ED32C04E7B55FC84C2412814F0914E8B
7935E55E2E67EC12CADFC0ED0B9C6F6DD99CEB46A5C38E81F3C5AA93D24A2FA5
5862DD7CAB91582E58C0C3E1A010DBEF44CB2CC458F45CC832FCB31CB189B81F
8D1BA098074266404D32CBE9E1B82208B01F338714CA0EFE6FA7E1EE63D218B9
2FD4C8C69FC12D91EF15B45200693D9EFD2E0110B640E38CB4A7EDC97230118B
8C09C04174BAEF8DF1BB4A1E1F848C1A517C260FA14C24A407D408771341818C
BD9212AC5931D8E4110903279D7E2F2A9CF549FC86FE0E0B595F2DFCE9155547
7E8535ED02349884DE2E55FFF208D6D731C47D64812F148D0ACADA4E7EAE5580
69849FD51D8ED3E30007B75D11E9807F8B247CB591852FEC9392079A91D02F40
10ACAEDDBEBDA6B8EF328EA7E5E6F658D88D55F4B2AAE6A95168DC1B69BBA87E
DCDF6918D106959EBBD9B870A0C93D618B90450506739302811F86049082508E
DC7CBFBD142BE165D39AA88F9A44D1B3B35540E870497A23628F77EB124E7134
C80B41124575C0B69B67C5CC521FEEA51DEAEA7D38FB0FAFF22AA418B8D58C3B
A496AE532086F4292DF6FFB4DBF6816AF247FDB65A4343FCD2A8E672DFCAEE5D
2759FF63873436BE087A14C454EDD9521C13F2ADE6B0BCF0115B22E5DC4AC9B7
F548EC241A2B3660247058A6E6A2F6F710C775E327A64676B44CFA2840DA0593
6F101543A11127279FFD0F79169E7577B514C7361CBA2C2E8C2842DAB5C044D8
2C09FD629F0E84B5F49CAA7AD03E67F347B370619420081D4868CBDBC5CCB399
752EAC7F289514EC6A3A390D49F66420DA236D8D4E7B4890AEA2A27F9E32945B
2E2331E491065D576588483C2419D82E2626B1DB9B42C38BCE4B8590815A8FAF
2874C94D804F85F0DFC1C267798A6E867034FFEBCC834FEEC5B1894E0B4467CE
1CB1BFC0094323862C795DE71768ED50864E3C7CE3A1DB7742EEE6C5A676174C
611D10F5F6EC2A95EBCCEA0CA74DE385D5B3E55F5E18E5F6540F521DD33AC9B0
38C3B5B8FE4665B27B166DAE1301413268F1043991A2375E72C2F23C7C91EDFF
4684CC1697631079EBCF525A92A745BDCF83258D1758A53D57F2FFF2A03EE20A
E71ED1B97975EB7173E6F5AF0CFA1878D1ABB7D4C2EF3D6DCFC7600ABF25FAFA
D99B54D7676A395ED5B7AE5888C7BB8588BD772F089ED176099633708BABA1C0
C1E1388522892F912C82043AF80F61A293D8E4663948874F560958B4093D9CE3
EB8C164A3E10927963BD718120F280956D31511F85D2D2864B9997FAE2F38FFF
4C5A60CCF5DD24B4926C2D58B8BAB6B35037E6AB0D7BA4FB5411BF90E9ED95C9
DFB5DED3EBC87689DAAA2B5C3800F93AEBFB6B30BDB4D99B19C718E41592FEC0
BE2559DC5A064353C4534599A31F1F8B5717AEF3B44C7628FADE4EFDCCBD9210
1BC1E6F13EADA74037C76F4F587CA9AD94967D559D0F341C3C4F160562D112F6
1A4134E26A6D05ACBE0E7A925E15900DE1342A8C76E4521EF45F957125793D95
46AE17060A9DC46E7B0F41CB7D902C8A02ED270A892972814EF6083A51158393
C46197085DD3D3B80AD3518AF32E5C3204452343A8D2B62D749E06534716FE7F
C6FB8361AC57104B86FDE52BE2E16F93CAC3F7DB1333A4EB3CF5570B394034E5
70B7B342CD89A5708F05E52BFA4513C28CB27EF4086446AA18D71F35ABC90909
AADA2DDE3EEB17C16711F040A5746753C2A68325AC03CC03A779C91CD0660027
2132850CCB77143E88C841D7B3C9EE3A2D28110E8D22E6A47A4411EA4A112B71
244CAA9C3C95B28A9609F4EA1E06811BC2441C667FF054438F234303E15D209E
9411EECB982326BFA129A63BE98F8D70657FE037F7F05809CAB1D1A26BF2CA4A
5D64B8987322A8018C37CDECF83380B15F8468C93A53E761BECA16EFFDEFED72
C4302E65DE5120907E6EEC61429FF1BC1EC53D6DAD7BEC549037610FACC74C22
44CBA5AF890EDDCEA767B153333AEE7F401FDA0EA7F03838373708B79381819A
47FC823DF2EE045CBB25C4A709FE8A439AB60D9C5483A3664288D8B2EE244D8A
98B83340D73479B0FD15E4C91C8A68C989D2E15B00D21256EC0803319982E9EB
B9247F7531AA98F3FFE777FDBDC9688DBB3C319780AA6D12BAC25937D4BC9AD6
19AF7C3147A399D17F51C40339BBD717BA9555F70DBFCE390F10FCB3CF5EFBED
195C67841000359D2ED7FD6B3C2216070343200B1D5F1E1C12B0E61751FE10EF
24A0AD0FF9FEDD00B62497973F54A5C15375E6A8E4C1682BD8B84473B12CDBD0
A2713820D615BA8AE46DCDCD93BF182F0D752E70DCBE95414CC366E7F06A8C30
56096A34BCF507E7A4C5740934FFD3110CBF8F774728E4278EEC55AEB085CFE5
E965C0D66A993ABAF34BB243BC19DE3909DA113266E7F3CAC59BA02A0CA7652F
EDB14391A08D3E34061F97C1FE91BB4E32ECF1455DBC3E902F2AC3ED51A3B369
3679F3E2B8BFB17946419D977FC3DA0BE14C99228265BEE27362B2B9547541BB
E50390C12668D96C827D026A9F0E29A22064062F545BE743C4024C77648681C4
1D9387A2917146E18E308DB429D7E1456BCA6134F73849CC66E3E19462485F52
DAA985E6E2D1A3DBC89C42CF2D4597DC56705FFADB4FEC01F94BFCE23A17DE36
8935DCF9331AB454F505A7B3AC507606C73FC4733BE20D2E5DA3BF2D288B0BA2
4325077EB358DBFA479B35265DFCB1268011175B4454D31056B9B48A3D9D4EF2
01329AC69D4177569B7B969632EE7C7433F08B2CE254F19EC59748EEB894F01C
0E801D5099765AE59ED0821D8D4B055336E41EDCA07AF3094DF38F42D6A91CC8
0CDFE499E24BBBD5082EE7F04376429798BDE1BB4E0F91E0E9DB95ECE7123C0F
EBBAEACBF00013BF9997611A4E14FCBB6AAB4CFE2A39BED4F83A7243ADE3EA14
0A91F895937F1F725D99A55B6543C2AF2CCC7D633CABAAFA51670DFE79DBD955
53AFE8381422C8F79D939CA9DD44D88EAA695AB8D3E2B536BA9CBAE2782ECE03
DD66B7CE29E6444FF4088F0EDDB11CB8C655A723549E34F319AF275D4D704BD7
B2EAA9B947C3DD7986E3EA803E171A578C07A2615F198CB7A3544F3811E11C3C
6A3E500F8B376D5FB570249C1208B83A73D8DD229BE7209E6B5E5E882A883AA2
9DF238895E2EE5638F828C3A42CEB1638AAC37447A9077DA0EBD99B90ECF0AA5
2086825B4A7B923634E81E106BB1B032659D02A723D7FCFE5E4A832C9C3BC0B7
BA61CFAE1FF19220F0E660A9CEE0EBAAD8ADCBA58A2B19B1D175288A6289F02F
2C8CF8BC76B43CBAA9F4C2255DE4C035D230464201F2A6E33316F374BB9BF7D9
63352E4BD2361E66C1C3AFB9C9DBECB85A84440C8EFA6A7BD2598250540DCB8D
1713D02E55FDCAAB407DF0FA6AF16F9839B20933A84C5FCD5B1D8CC2E4F22757
585E7E2B1B4AD0D31EE4FB7B07237520021603EF1AD7BB91A168AFEE6D7A1161
558E0103D69F95627A6E456099191E56BA53D81B7EBE547F10F4F1FDCFF5980A
15BD5FC239A9CC1B8ACB2C089350912510AC585882832B73927BB141CD541FF0
396CBE6E45181AC4B91D46428D0E9DA501524CD20F0294C12ADB6A47C1A80CD8
856DA7689FFA32F064CC6A1A52AECE76F5BBB786329292AB8A0A471AF56F9B3D
F1963735BEE9FDDA4E0D3EDA5BBEBF135FBD651E7E473B8004FC462282E2DA32
CB4601172675C2900270571F7E2E8B0C45CE7E73707AF78BA115A95B1BDFF2A6
424C8848524BF46AC869809802281C8D5F14987D7CDB3EA41570EBE98349217D
4AEFB2AF791D50CEF3754691F61E2005439FFECCB2541E472E058934258FF02C
43F83F7A2E16EB58E9F3767839DD183878F67F4931E7F6739A1EBE7B96BF9C5A
1D4BD179AE568479C8435B23504AA9FDDD076587B84BBB199FA58D44489D751C
15EF39CF63963449B77B3135E37C9DC381966FBEC29F435441B02D336DEFA834
A48711CE556CFAAAF11A5DEA3A159BD4AC3CA2108C97A3550528DC314470BD7E
64EC7A68F0D0045A913E026E132E8966B8258D6DA58F186E009CFF49F280483A
55C252B330B09501F647A04BE41F18B2CD192AC4D1EE684951063F1723FBF03B
B4DCD6DBB7126E6619D3FC2521CB2159682CF960C65C182C1B609B0F9D913912
19EF9D9CFE47DAA34E00217F5FF4ADD7CF5C1F06451A9A70CE7D86E0DB24C2AA
20585130D5001773BD30E78080E6438C0220AAAFBA0923AFD8E329AB87B33443
7319B982A0667E4EB1A127C12E27C7C29C5C2608725B1A80737BF4B9E76C9414
9A3F1D9BDA6239FC12D3BDAF7171A45B6434D91BF070E12C44D9C563146F04B6
9FB1E640A4C0E5F6B89D9D110EE9500B7B90A4C13B5687E12C0B37288CA08255
BCDF29ABD705C3A034033BAE78F002DA1E35A887F361ECA3773F76F9AF8BA757
267E61F1DFD48A45147757C0CACA44B4461AC4CB6CAA1D5768972BE2441A9B5F
B2F7E2676AE150AD25AA983B27F9539D28FFA0FEC7B07A150D71529DDFD822D4
6FFB6D567AEF67B16677EBA7AA0159109BBB923F687D170E0B595F2DFCE9155F
B6C89E1C02CCB3F652A2EDF2DEED8E838979186394E1F3C0720467E68E2CC713
78D116FAF68C8D9CB9CEB47B486939B9028F6389AC66D0587A06D7237D768D2D
6CE4DF50EEC59133FEC5CCC56A0BAD82A594699D1139166573022D7A587927C6
943E9777A143A594F2323043C6D738AFE2E28D93F47999920031D1F761DEC07C
13191FE186EE90452ED6A30E39FBD7FC11202918AA628ACD28B1F398C60875C2
F6A86521BED1B1AA86387D070740B078858C29042703AF5D630B4289468EF709
6AF5D3327553DBFED90563B9D365F3414CEA4FE4E1148C5A6D282114E4B94A2A
0164476EE57E3C8B64E6038CA4BB026B6912E4DC5E23CD515231ACFF12956B41
1ADE3B99E6D93A433F82605CA163F6E0E0C2ABC7FECE3486CC245D3BD320E14B
BA53A2D1C389AB6128E36279CAB17120B3903B6BA62B5B1598D198A1A9C69CB8
9DEA505A5AD75D998C950862F0C67EBFBBA911213828353F1CDC3F2EBD3B7456
CF9D6B4D1A3E0ADFAF9FDC5D5218CE363A9677ED71859C43A9727557F11EE50A
A5823D2AE2C75CA221175028C43F64077BB1C95C4BF94EAE82B7C52BCA4EB507
61BD1C92DE428436188FA7D53E2F99F0F47555FBA6619A05DAD4F6E65DAD3426
1132B4BB1A4A20C6B890107A5874AC2D520FD260169B1A8A369F054D68CB91DE
66FE2871719E974BE93A89999F15B4B360F25604E9B2710EADDC2F49417C8032
8C4F1729DE4DB2F27D92E4D4FE0F2070D96A0C4AA14975E62377077A88210B7A
95371EC46DB139F9FA6F27F76366DA9CD1A21819A34FE0E8C13FDFFFC9DA2490
50E74F451CD6DF2FD60D21BF687F1E923F97ECDCCFB10511A85CF2CE7EB372A8
7ABE215F569FFE1C0149C1F54AA825350F6147E7BB5BA8F6227F8FFFE03D33C8
C340228A41009E039479D362402BF6CB7D67900BC984EC6FE38A829857103C07
95C6A32D93E0415ABD7EBB531CC0E80CF0A8C6571CC81B8F5011B2373615070F
E837EFB5CD9D7C3EC3C20E61302B661B23C2EC0E0BC4F3AAB9347D3FD8F57523
0559220F6A416C005EACE2A2B800C0263E2634DCB355054F1636D8A5FD22D5F7
2B9F2208587CAE703571A817E2A7D1FE8496B76E5248A3CFFD770D88D628814D
A7F9A3B711FE5F7E13D6E20F68B00AA7D10E5674F967A17ED5875CDAD0BB3E5A
DDD6F44664C00B6ED7375FBAEF24F06CFA54D4184BA4753516F30D909272A47E
6D5C64DA4CD35F1E9772B01D4821DD03215A449E7ECA000BB2FDBD70A3B06ABE
5A809E2CC8B17B9A18E0B8548BF1F4AF5FB097189E0B1693AA67B0569BCDE71C
495D1EDFA452AD22FF83BD86D76CF4F3BA90CF2199850ABF229E3F2229DD509D
3253056C6383FD23B3E4EA45A1CA45CF98F292CD84AF740E228A9DBE35D9225B
585275F98EA4AF869EDD6236D84430919D0F35B1D648C597CABFD0A09DAB200F
08DE2A0D1A3D0277F7B9E84223BA86FF5F3B945D10756B3E675E12219A290354
1CF5B81954643EB84CA8C053E3E4F5E301EAA9B099A9CF117A216824AEA5A1C1
C0A3FB8B3BB42664C634590D81873D531DF4FB838434FC4B72058205003C09DC
D6D67E6DBBABABC6D3F0780DBCB0F20CB1BF949F0EDD9830B8CDC1E183BBCFBB
2C11CDEDF020EE0462B823756524C0FABD33553FA71C10A239CCBD57116189B3
5DEDEE1B58013125B46EEBC992570D2C6951438E3C9EE8DAD9955327100476C0
3B131A04FAF2FF0BCEE90666B26FBF7289E4F09BCF30B0A1CBC1CDF295882A6D
C1E6CE8777C1DB8F5B0DCBFB9C8A95985A0571E67A52C5774F4543F552B9187C
731E9182C7C6A1D52CFA76989BA1898CCF4B0D29AAAF0817C72787571A39B6AB
FC9AA1B2EED711F21B6DCFE6A6C237303CBDC08B9CB270E509099F2A8C70BA42
11EDB9C33E1137B7A04B4408C32592BAB68C708B2973563FE06CE01D7DD74609
1789831B53744BF1EFCA1EDC7C4024729BBB2824C091E5C0934F88664F82675A
3DD36EF51AE13249BDD14515C575FAD42E870BB69AA7805F434DFBD7B6037CD6
9F371DA20C3D092BE8CE372FCA323C74C8F37101EFBA1C94B2129069595DA14C
0C957C5CAA2C6DD59F4CB5511FBAE3C48B1B02C98798499DB3422C5A151BA868
5EA40A7E410F3EF308B8792776E732D7567A2F0F53E5FEDB788C961BC74FFAE2
E26DC368A3E518384CF8CC9918A6A46873218FB72F64EAD3C1D0B5FFB1E3AF1B
243B7AD481A0666008119E5ACD18F968682B86B5BE77EDC4A825E4E52D032049
B8F2E86F1A698AFBEE2418D0A206178CE905753D58A74E6059995CE628656EFB
F3FDC08B2203FAF11FD52ACE0819CBB2C606A5256DB1C454FC5C83937442FC8F
C2D00ECAD555E4CE7270C97B5C4BF5718BAC5249C51E508F87F1E216ECA3BA1E
CC01CD43150497CC851229D0720F3474F505AB49C129F4703CB5993D7F0F81E7
425FEB265EAC0494DCCD9711D03657FFEAEF857A8495F28FF42F8B7C7BB88C50
C6355F948B97E7D88856F2223B6CDC033CE8F3027B384F66710A4E8E65577E5E
D3F8ECE1173023F530B06A5B3396ACDEE7682FAFDD5014B3AF15F95B724A60F1
7C8533CA874DC9686E1BCA88D8CE052366FB6442078412255D4298FA7C892D56
6A4B8DF5E6D82157D88B6232A763C5C83B6CDC033CE8F3027B3D57FF931EBBFD
8FEEC4E60FCDF351706D9FF33EDEABB5860121C4BF9C536E0415BAC00DC21408
FCEA6D747C9AEB4414FABDCCDCF9D283E8C8203622C72908F8296A0C03309EBD
39951A398883FC919A711E8E891A0FF851F791B14D83F1DF955796BD15D834C5
356276597FD9B53BF882D33E5A43EF201EC0B415DC701E8FE4FB5310296D37D0
B3F10D8795B37F4231A18A53FFE7F6E35FCFE5D39349BE33448D2F6258DA61AA
F47917C66C78745A071A3AEC9EE2CFAD51447F0D660BF7CFF7EBC4AC5A2FBA76
22E2E44E7C653774029E709393A4F8DDC881A27DE7003D92A42252C0BB596714
71F7A62DE9A66C3268075175CA4F3CDD7CB1D87A11B6393F8133A84721D8CEDF
763DCB95B59AC50950FE544F7C3F2BAD81C231875F7D103AA5808BFE18227033
71FA7CA0471BA96CC445D22570ED2F6229EBB4FD0CDA78C655E71003C12938AF
7BC58B35CB48DA6611E0ED9D102FC5598792E6234F8C005E3F37CCB5C6F49F96
4FB9EDAB8FDE5AF3B0271B014A3AC3651A3B3D100EC7F458B977A9F37112DCFE
34DC3A2AA7806045871AF6D7D534C89BE5845CDDDA0862D2C4EF50547F952AE9
7DD78841A24DA9ABF40DD1F36D67F64366A829619C268D692AC008C42D510A67
435DB54A4652D4F8AF4636303DDD37A8AA4709C1A1F828B222B8A3834CBB728B
11CF5D824D9BB84846D75651244286A591C3CE88A8F9A12D46B8FCA50DF4433B
0B8AED6A63B837838401BCD1AC9DD88DA85E2BEFCEF4CFD74F365922A7C4DAC0
FDCDECABE30FE2A2A9956CCC05F24BF94F4CF165960E086BFFDB8FDE34A38455
5ADB7C548020D1E7D66F4DD31E07BA3954B288CD9232F88633A933830B437ED1
996BEEBB7E1A4F11954E669DE14B907CAB448E3FFB37527B20105236974C8925
64558F18F6F348961C82A089CD2DF10E4AB596AD771564C8066BC70608B07496
D229451C0C76048A41F087BC3DE74A638956564600277EC06FC91C4536936E69
F28E702485B544AC273C485A5F88DC18C92A8DD95074F992A787030817F1AE7F
532E7C11BEDF1D040AE9B819180B5759BD37EBC0D266098A7C8B977EA77A1536
01D09D04B138C9DC1E1343B62AE3CF6B4CC492907A028CB573D74B5E4EF48098
8A20DB0E5787478C52972758E7F957DAD7D3DEE02F5A89BB08431B0BC8AD6C82
EB097204755028D733EA90A57AD9A2ED31221E1686458149791F13650E3438D1
4F0D6566C5FD664382DCD3EBBAA1625BE96300BC0DE34248594783E03E456469
890F84F3F07F573BDDB3A6C0041A535BD9FB1507ECD2353D8E45EDE3EAFB1690
59AB4B7307F86425B222D1B09F173DA972B0609AC69DE3606B1AB98B58BCFBBA
87144605E7686DF03F80B2BE3146091582BFAD4E042B4297DBE85755A8086702
519FD3246A0B66BC6A5FAE1F8F869DF96A0DF5A0909EB1D26096CA04270BD9FF
FC6E0A1245F533F4D8C0C02181377CAFDF850F0DE2A6296B0FB004D13FB5141D
463891F2D1B606D1830262FBD400CC83AC88012C57D1882CF581F3D1A34767CA
20083370D44FDC2AA6F99F0EA5FDA124CAAF7D717983FE41AD29AA87703DE8A0
E2FBE65EC5CBC091B8CFE203E39A488471DD5C4863DCEAD5EA7A2AFE8D111B14
41189CCC7CDA0600FCD6D9573462EE47239DCD4C0E8B6017296D4806B40AE9F9
B354DA8317D8383567B047C6B35C4789FD198D9BB87D7B866B60D311DDBCCBF6
0C90B5E3C756DF772C32DCF5F71C5CD8623B1DB3061B740B25CB241F93165C2D
522C468C4529613F757D37E5904A0C28E33ED8B155BA38EC2E8A037C0EC90830
7A234F6F1EDA1C1A74828618B0DF2E156FE89B568E028273354131A2917935F9
00B876A76A244932BCD87E29AAA354ABBEA21243084ECD3F029028F05120819F
5B4B7C9CB20FECF427B33C669E763B13033F33AF70C0D4612011CDDE53EE22DE
1EFB9A84EE55B8138130F18B83D8AE0C5BEF6F915697207FAE573BE34A584F94
24F3AF64A6F0A9CE7AC4FB789C7531FB09B77CBD0AD5633645F38705A9B01BC8
69FDBC4831EA0FEC28E469E2FF07E68F50C828BC2FBAE79527F0C7054C867721
B0CB9C05670233E1F61F9AC36F3EFE676522E9574EC8F0ACEF6F2EB3BA5C082E
9E6ACEADF497A2FF8EBE1B747B07F3A54C99C3B2CA3A209D539A899B48A0283E
18FC918C2004F0D54E717F3EBE75C50C5F7E311A63902B50A79FBA651804B7AD
A8FF0757E1E1B9D9BA4B07CB0BE5124AFF65FA70E2F9AB3F0406D1C9E5F430B5
6BB1168EFF4AB1EA0051CC413D1078AD46A5E7B7BA4F7ECA3D979FB64C1924B9
A869DFD9A72C83D2DE423A5D73D5B001B139A939FAD11687C905A389EC51A232
6F5C0C8EE3C1BF3A744667964722B69DD498E95E04A726ADC135F6AAE1541AB6
B5EF2212B7C645986B3B35D7FFF36C83E76617954E98B783439F6756AB0D1D5E
F596474A9D7199B082E84F87163A97D16CED57EAD4810958A8FB064B35196170
E9653BE1B5C8ADC2ED29CD4F50D01B09E2422C270333F4371EDCE6ABF4C91D4B
C1439C45204C9DCF16C79417CA15D7861A6F4765EDD46D0649839828217DE082
28FE45184B0CB8B5EADD6292E092A7B5FBB383D33D3F49A3700CFEDB01D5A245
B645FCC53B271D8411074582183309AE075999DAE8E51EFAF7223E9D7B395D85
917A7EBE271D99413B9E30AFCAB0F872DDEF72008A6277DB8B0387D8BD56253A
7ADBDD5E5514567FEB00D5E9708A0F4C33015C8D417C0C33EB54B7A2B52527D1
318F02FA0753A44EC9E581AE3691C027FB01BEDE9F712237306A316F2A64A8F4
69397D214FA4A1DAFF1C0956534C4AC975ABA0286FC31EBB7B819AE455CB993E
FA4790A23F8287DAB64850A522D33B09929C00B48C2CF4EEE0541383137F4641
50D390E63D23EBF909C3772B458EE8142DF3F9D6BDE77DD5870ADEC8900D6346
957B84C8C72A93ED80EF9BED29CEAD50C383CEEE7531304691576A26FACE3A2E
7628CFC2BDB08475E4BA09D0374554F645934CE69B34B1BBECEB0B630D6D0401
CD210C156A0E9BA31F748DA32A9DB4703FE988FEB280D3B07ED07D66B72E9F6B
039B663EDF0EDA6D210B8598FF0D587E1589A17E594DE52FFE1E8D9C2EE225B7
C4166B2121ED6639F918ABB73F92EA971829D187450DB7C070A7091694A7055D
56B801F962547D48276A2411B87833318838C86BCD866CDB15366E8AF6B5D1F9
D8446E8BD35004F5F57EDB8FB5B929F32BE1EC8DD499801028432E91C7ADB51F
9F0C4019DB4D94A4EBC6ED84F2A815AD5CB269760E231D7C5266A5576AEC94CB
D224C35476749ADAFBEB4503D281F5443F04C751CB86788ABA76A879CE94608E
6AE1759E68EED4F8D399E8581EEA79CDAE1C85D3C81F509F86DD735CEBB93C50
4A16D1935B150B975852F816E6F8A47E0D235514D21087D22EC91EC62C0FC0F4
E45FB6D1A0B2B781EA1714CBB8EF011768F500D0DD0674118AC0AA33610591FD
917BB60D1E414EE51830ECF17FC6327DC13E282819CF28125B70B79746927708
56D2C11F5AF85FC592ECD92032126F952AE00505B5EFA4F5C59CE89D36EC9927
A8B91C3820738A0C995A5ACFD8AB54FE999A1446B6CE78405D9101A57328CC37
62BD3AE29F9C8E76A368B51959F11132C059356C7799C78F2076C929E53B9335
AE82741E0B281906BCE322FFE8B94FF5664A8B29A0DAA3A3FAE32022123A3D98
3AD51504822B369587A4441710A7B074D5BB6E51A1FA52F08BAE1DF506BB30DD
173C927CEB80F3115A42CDEE0D51160D81C3FF84087D95BE7A2F6C0F06BC6453
3A5C396A06C996ADA4BB22D71992CAFE8263395DFD044376F3C069520D55486F
71B63546F6DC2BBAF3B28F99055470C42DBA5F628A53D8259116253A3F93C62A
952523BCF39AC6E9B71454D13FB6783B352545121D32993F1753727512878B5F
127FFCDCA16A8A65568A8D7D8AA9942A3A7E727BBBA9F2D4516529B348A059F9
0EC4D13E5E870F887B4525A14FBCB795E5F88C8122B0D337782628F8BEBBA407
94531D8D1E11E2713A9FE3B0363D0BB9630CE5F6C42BFF50579FC38B1E34E86B
C1D46DA0723910733DA769EE42FBDA7838308A909E84126DB70865AF397D64EA
BE4EFD555B693321D905A4A3E76BBC309E944E1D5BF2535FA1D1A508FBFA6263
4026219664186B7BA51768518B27076F1036A287BC52FA90B5512B8D4F2E3FF6
8F4BD0423D481DA8FE1D182DB30270B2C4CFBE1A6DB6ED97987EC21489459408
C99797C4072C2995C49A8592CE6941B16BB0018771732EF534CEEE186931E50B
E7903292A1271B0E7A5815C803EAC7F7A235D617C997DFFD44A65CAA09B451D3
14F660F20F1C64EACE5EB6E2C467EF211DE356EF88DC2E87AB71B3EDE3956561
1CA7B3FAE301FE8C55FB8B05311575732BD9DFEDC0D3E510C61202319E4BA638
40C2A25F1905110D0CB10E57D436D5D06098DEB1AA3251777EBFE77E3BF7FAA5
1DAF7E9E76110C06D075FDD345DD934FA6F91E9AAF20B63EBE0DAE52B18DBE60
50C65ADF189DA877EF670955D4FC2E2FB26CAB68C9F623C0B708D43EC612626F
A21E883276168251E9D49B09E81E81F4387DD538447B0D183C062FD1CA1D5859
8D3BB167286D7F43B9E877DCF3B06770A1120D8BEC20D5AE226AD32DD3DA743F
F05C8749C49FBC63D59E9F71C8380288CA4761DBDAC3CAF8567F6D65A6510AD6
BD87E9BDA5298CDF7CF0DE21533170FD40E7FEABB39D37D5C09B004381C7C5A1
C1BB5A34BD6295CE2A0A6AEFE2B813EAB3908BEA8FC7487845269DD779753B55
DB207FC8A12FDF28D39BAE9D17D08EA5A303922E5B9B764B0D9E9E15F1EDA00A
FC466ADD96E1EB61A48E9CD07F82125E17F1242DE4813F4F545AEEDCBFB09BA4
9CDAB0368EA145C5BB9A78FED5A791746E753E97CE1C0B152DCC740322BC5DE7
769E3F8DAAF747F83FE040A264C1B3ECEF6358A8DF8CF7B40542D24709A38FBE
C229A1FD09C1073FB8A77CFD3C3B619018BC811251901ED1C3E146896E15E784
77B09B68C1AEE62EA952E97CA03AA3A0A872F8ED6A3DFF195F2A1D4A1C73249C
B3F7F8D04AFE8356C6AFAAA9E90E1F43E6F4EE542F0E516234B0B9F83E433544
19FB9FFF5C2561E7F6E7F8DD6D69049A87A6EA966E3F05DCEAE6C099DF4AD3D2
C5653426D8760E5B227D0908021A0A92EDBF73E6710EEA7C08E25473DDC8602B
35EB4E3293D88DBE420B0F4F5817BD9830FE26A0CDE830523D478E78F75C8FD4
A789D44A812F6D6E124CA8A681C6E8A9F873551F8C189715257BC4D92B2AD266
A42099E802AB28CF2D271D37D826EC3282277DE1164B732FA87EE4CB762B1510
6C5486FA42A328CB2AB092CB1136DB2BA28BA868BB2E5192DDCD2726492A4D65
4A14755D26A7CDD182D7B25B8389A6D271286DAB7F8019D9C7CE4B21F34D5D82
B4B81F58F70D4A2DDD78BFE25B3CCD2E4D1FCC1A2DACB18A81081265D6F9B11D
2972E5D0DFB037F4CD6901A365DE1EBD66752307F20C61D85F69914C383204B3
E9DBB6F17F4AD267F54810B5294F5616BEECEF341F97B2F7BEAC03F0EAF778E1
1E5A3C41CB6B6ABD3A71ACDB03D3FFAFB44AFBAF880449BBC7BE17FDB6C2F95C
8FEF8304023A902B9C433874CB9C945C13C4EBA842394C55B80C33DBDC317B89
EA49CEEB91692181275C125725F05C69C972C7308B4719450167B359361B412C
7C91A1DC9F6B341CE2E263E0D51ED427C38616283B2BA3D713B05F567AC0E724
BEF46CE2AD44C77DC3253ADCB12E43E5001DDF0750125FBC641859A0DEEC0C7C
9BEA73D77AF567C403F95246251DAEEE4E7A6AA128E3F9D5BBD355F374FDDCB0
FD54F6AE5FFB984E6BDCA2438E5AFBCFD91900B198FF751717E59063BB4A9801
F47A0B9C7758342517D8F86406FC400C5D9859650267715ADB4B4FA420029841
9FFA8BF86AADA78FB7446397D8EEC46BBFC82C090FD2F8525373E764225B38AF
EB2000236AD6EA969E1A568910209C78B999D4AD1E02791F5ACBFE995FC29857
00D6B89AC550A3591EF03F030EC7B1E4CA71A4AD677D8633B98552D573DC8297
3EB732F65D284EE0B06584EC2EEA3567DE86E85D913E02C1DD8EE38639C74252
40F05D5C96E542A5CDDEAC549D56A911653FEC4BEC1A6765FF58DAC23CF756B2
C31BA3728A75112C64811A4364B05A4FC29334658D1FB307917DC115490370E6
50B2F47F17BAA8D2DAEE15E6E30A8C1E3B59515939FF63BC9003CB0F99B90886
A9D3F3B3D2FCDC361D2154771179D1028DF2DB96902053707CEE116A4B5ACEFB
B826B03234C9438930F1619BFDF9934A670477A756D6A3ABCA3E851104B1D91B
4A27C741E6025FD340E50076863AFC8906C7A6FC482A2E47682A96CAD2B24D6C
6612C8CCA287D353A0FBB7DC5C8DC44F0BB85D784C15D263AAC16495D84E6B16
C1A378387BD70A71A56401BEDF3597A5F8ECCDCF42546F422F22DC3EF8A2F3B3
DA2EEBA48408178D3FB116752DE8F836B04741E8C2293947D17A6784B57F2D32
3C51BECC45B15DE13DBF3D64299EAAFA7D8A8BC64C513BBF688C406E266A2724
AC6EB13391EA07DD950DFE35E28D9ED23658EB151A227A6A71F37DAFB7A3CF5E
6B521E0391CDE2303955F0537B3DA9F17DE17CA385A23C0C28D81E2F5D2B95BD
745398474BEA168F6220625A722FAEFEE9E7BA851BCAEBC1D400462249732DAD
2813ECA5FC1A1136D1F6D4877B1B2534F4F592E4D5EEE9814C62BBA44B280AA6
26DB8216A47461D4B4FD48C8E3A43FA01909980516B1F5EF7B2102BD7C3B385E
18A00A1AB27238EAEF3853DA323B48076DDDD90144E7C1BB1696358714A44F58
A7DE249E18A56730A192BD85428D9D05BC707BA5169B38137F026528EFC5AD14
5DAD70F268995F790CC36F015BF4214E09504F9B48C22D928B356E93EFA603FD
D22ED8C74C008A1964092DDCE4520F378558C001681A89965409B1923CBC59D2
A831D1C97FB991F0C7210961BDF1A2B00BE3BF2B0993117BFDF3C85787DE2272
11DD586C025CC481774D6B10D68F9D224FE34994A8C09C667943A6D22F06A6DC
3F42BFF017C49B46DFCBAAF64806347B6F1C35486FAF7A58B2A1F38C2FBDE4FC
B6FE839EF6E8C30D59ACB11861F77857A318C76FA8F4B0CB6620278E7DDEC5C6
9EBED1CED5B8BE66BFA1BB3CD5057B0AF0D49CFE0B50BD8EC287D1F65C7D20AE
5D711139928BEF45B120C08A20FEE830908B59F132A0D1E7E532777E88D84FF2
E58F669DADE68FE07E3DF83CEC01C45C95333B970DFF89FDF4C0564D1FF10F2A
07295BA422380EBB7448B5D7B70939F236EA4C539228D86DD163960CD17155E9
469DC5CCC6BF28FF5A2D62FE251C60C1D342C94322EE292A2592D34F2FF10CFF
66D00C85292E8381C7E5E3FF0CEA2AEEE7CC1BA7ADA09A397D81F9628810F9F7
31F159D8E0031B799DAE190F137F417423CA7901860F9025B7D29A0416B67D23
13EBBC2926FC05C8650C7C672A9F7A3BBF1EBA561A04D7186BE1418CD7154C2D
FA4B00BBED6B785F373B6BB8075EE7DF53BB7C84EAF23D703338EDC66E14A05F
DF15FE11651E82593F30D341D6F84DFF9AA429CA78E52CC49BF08EF65CBC7095
B7A03F9F1EFA543E633DB4DC95F922A7D6AAA4F373839D323D8B4FF8129A8E7C
7A3C64860792B09C83DC96D270A3B6ADA0AD208604FE97B8F7587053649A1467
E2D8BC4AE67B893948AB8069F494C6C8BAEC84C1114074A5320C8ACBE8B063A2
5AC14352D9C03E13EF7472C4E0CF414A69389DA242727BAC2592D8C1AAB266B0
40284682603FD4DA3CB77187A6FF7802A478C19A2263CA52F23148CD18A1180E
5E734D1133423EE522A5DECE181C6CE12EFE877694136F8FF1AFD060A7D990DD
6EEE6BF9D90DD065C93BFA3E5EB2C5AF409063E0572C1EB9FEEAB566129288A2
B01D487CB53E9C5E7AE06A32E191CF1560FE737376576F5B845D9BC117C4944D
AA3AC6A7B65ACDC3BA471643005CC3B334398B1E3037A85FCDBDDBA38222B1DC
A5DECC4E006DFB9AFA352727F3514B339953ED7FD5D7C2EA430026342C03778F
67FDECC341B56F78BB807D3B42D042D436554C9284230E91DB8FBBC50DF592E1
62946C7D9097B04D6C7DEABAD1B1870F63FB4BAE0CC84891A820D2FF1AC088F0
FC67D0A29B5D256519C34CFE63A9BDE3C7428FCFAA212049C9304971FD9F2E0F
5B6B51E010D37D023E41243F2B063EB8A364D676D8ECDBBF52B308959A551C05
0C9A3C5A256E5A1CA2D88B5188D5202234274F0949D5B20C86F0BAD3EFC3DEC9
257090432247EFB3B89044D7584F36B1EB88F3B58EBF0BF4D1E3FB60F12EC4B1
D41BE14D59D7DF31582305CFFF4D846F8305B18D6FC444EB6DC74E73825B53D4
B6BBDB8D9163FE83D229D7E50E9BC5337891E17ECD88095E311DA3A6DB31406A
456C2CB4546AF72085D01C8390960420D8FCA071358FF8D8E34E4A28DF407B5B
12913DC57E977EE454BEF006CE1394681349819A8A47626B2877D09B48C3649E
785187B7AA42F0ADC3357195CC256DBC01289312EE8DA97F8F2DD2AA5D9C1293
45288D3F3D706AC370653E95C9598A942ED3F23B24F5E1A0416D23A128BE90E2
2C03EE7DC30C48A632C9CBCE91290C0C3E679C7140F233FFF4FEB77096863E6D
2DB6080F9232A25ADC9E35B41673F96B8EB19D2C5A786BF436005F7196C2EFA2
4E1396330B2FB0766F03266856F6A097F074CA6E075D8E9DE697475F9009000B
752CFADC3B7FC63B0AA1DF5ECF71CE6A4107CA9A470A8E2BED4C63AFD716088B
6E8F4A821AFB2EBD8D6E1EFF5CAC47E6AFCF3D33878E0FE809CCA6788AEF2526
48B49DA0C53887644C1C39C9723B08D8B42C141B0B043A1883E2EDA87B8C246F
89A071295566C55FCC4CA59880D8FF93380820513576314D615E2A0AAC74E911
4C7BC3C08C10F7CD0933D74D11D5C68B4290554A8857686BCA20ECE6C6E660E8
444C8C102DA7905B017549EC41C9EC62F8BCAB63C2F3E3985D7C59482124F1DD
6D1AC7529CB2CD6F8E88E548E534ED7FEE1FE924A26F974F4E21280AA3EBCC07
B79DD6751573E79C7E0138FFAE6D55B4FB847D871EB75D07617C4A5A97860D9D
168F52413BAC21F5E6453239355885564289EA914B630160E3BD3A107BD7D71C
AA9B3D4FE512AE10AA253F3DF132C3E28345F449C465EBC345C755B13CE18A28
C59D52A7F4874C1C4999D7A9777514E9F45E5A4B246B4C79DEB8261014C31C0C
F76CBB836BA856E8876447AF8745CFFFE34B3F60C119A3E6CC2F5963A52F7820
7619F6C6336A24503839A683A720B7908F40FEE1193A576B73E449E23CFAAEBD
58C1219B0659986ED61EE6062093F112B28C6D455D767205BD311B3416450604
6262C47B4FE3DABF1C2DC348AC0A7AB6676A588DE3BBC3D96B644C381ECA345C
C95E6AA06A3A812E0C17F5C1D41F393F2DA5FF5B3E113CC7FD8F31A4CD45EAD3
F8411DFB707C2AFE727F36708ECD6DE53B15ECC790B0BBA3D73FC0581D649AA7
3AF0CB5AB76CBA7615F8FD074CB37E3389C6A1B78D5B0244479063548B7A1545
29DD9006EEEFB873153DBBFB1D1B999AA02936DD0DBDF231FB44A2559E44054A
C6B33004E32259200DCD414D8B0023D829ED8078B1B02350DF9F37F73E7084DD
FA3E9EDC6B47939589A6987732C3E1B38305632F54BC34B009423D49D9DC2A6F
F8D07F13E4D93090D811CE72A61A6F8E7AF23F1F49192828789A86414075B157
790BFFA800F9E0FA8C11EBA7249F70CF2679FC6E081457C4183158806FDF20B5
0DB200813E356030BC8F6438AEFBB4BAEC172B1A89714084EB98526B32FB6F0E
4721C425C49D05A8132C5243B05C23C491C4FD2636BDB8B066C8C9368685606D
C00C3687C37964C0BD62E7C817927188DBF7DDE1F75C21D925B2CB658B126425
D0394B73135DEFE1815816B8242FE4E194DE6742530DA859496D18F62E5B4A65
5E31634D79C7BE0BD741B300E3B8A9F722AA73C8EE89060CA5B946BAB338CC10
984803F1191DD204926A459D073AC455468A8FA6C6211AA1C728208DA0228650
7B1E90AEDB29727C15CD188B6D3B400BF26FD439DF3969EF9E387BB3BEAE6F4D
5AB43E9C9E02CA71916EF6BBB4020672B9407A9E3CAAB462D612FD458D3EBF24
DB5B23C29165E1CE30736923CF26D67CBC9A9876CADC7964F48DCBC0546ADD13
8DB2E042B924EF3E6D67F066D0DD66ACE0A1D267DDBEE37885A3F6B43794CAC7
2FD4125B79FAF7C59C150DFACDB6590D8F8ED80194EDCA1C54E1650D484E5F57
C00B13A666F3D3FCB3E2FA35687708C25500C838D5ADBC8EE971E57CEA9EE0BA
02D263D030E8B994002571CB379A2A3731925557D4278C22A01C5EEB29B30DB9
0FD4B2937C9E896982E978F610AEA0932440E0FF6FF755156A911D04473D0BB7
CA7C2BEAB294B8B7EE83E90A95DBABF68517772A9995B8536A3AA4D03113A090
EE2C0A458656AF4BAC987645B54C1EF0971185703F20FB70E37AB751E021E5A7
117AC196359DD46BA103AF74C2B0A89AD2F101045160F5F11792F9C6E13168D0
BB19CAE1CB12170DFDF36304D7A2CD6D97492E7B81343B0E30C4DD45A5E6E684
A507937B91B2EA5B5B4D97F748D7FA558B57E608EFB01E641CA3599F579F90FD
25C1B1AF2A960D89D444A06F4A5AE861CA5FEF1634CA96CC538152693800D4C8
B4522FAD7D7DB4EA1D58089DE4F88B9C3EA59585F86B209FC41B32FC6C16DB09
BD15BB128FEC45484BB1E5A45BCA2857406B04CDFD7AB3F625F831BF96045B20
931D85F8C2C7FDA51E07982D06E66C1D1CDA82FD2E1D4E78F58D8A716D33D565
3F239B7CCB168F2084DAD2242AD43C71358E8880012ED117A6DBCEB96C673BD3
84668A4C61C73FCD2EB18AA5831A2D05544F6316298C1A3110A31F04BE127247
F52EB27D07201042D352DB2E0EF697DC583A4554E48BDDF71FB94A6B3CEA4F97
55A0CB47A873CFB021D5D4EC07759F0D5CC38F5EA9BDFC3314F473EEC8A587B7
7666889E4C45D22D7A14969884DFDA6CDF8E9FB096F1F096E08A7E51975288BC
C34AE9C131437F4518A66820E209B0287DEF2E799B8EC22C6076520186FF8B7D
D19CEEEC49F63175D918704BA41D498E80A91E0AAC31B99E0E0D14CFF78B7239
E12FFBA981980AC0ABDCE5D5D7BC5A9FC423E8F0A4933039E6CA07A2F7EE48A7
424761A38B2B61BF0341B6BC1568C32535B719C7BA6320D41D2CE30AF09C4E01
FE8478425DE14EAB840D7EC00196082485DFE88CA91B986C23252D53C4FA940B
351F3934C1A8EBA8A9FAEFDCE15E6393057DB207F4EDB2B06BED4F1804174508
15F3205DEAFD36B7AB0BEE636EE5134E944162A52AAF83DAD472A09A2E3A8060
7D518F36ABE65A6AE52657797C5F90D72429E01457E8ACB43FA0743F8247A229
7D030AA576300813146D2021A5D5B631A823999E96F89628A91A98D178138446
F55153715473FA5EBADEA28CCE5FAE51CA2DA48C104DF19D322A5FF88194E693
1F42A73F17E1B4DE2CB06B845311C6949A137F5735302B07D96A1689461E48B6
C3A5E2D393950B8C29DCEDA7E470DD1FFB817FD1903FBE3C4E0EC9B6FDF16E0D
E4DA83F34EF5475144FC55EDF81E524790CCC74A9641C1A3B257102696538C99
78639AA5BA500C75CD1D68364C2EED270D1545D7411275D3B55AA8F27A1D0C2B
08ADB025CAF8C3E59B63B6D1B25AC8E3727BB044C3D3BB78C40772F4F1DAE306
2F4EBC4405EADF84DBF314429330E59A0B2EFB0F25B758DBD7E06C4A55493759
FB949E716E522BBBB6C89631B9A2E83F7A8A305CD55BA4407A3C3F1BE3BEAD16
43D8E69C2268D00EC0CD5A2BF6B99E0BB08B53359BDEDE3C17D22E85A77340CF
2883AA9D25DD02094AAAC677029F97C63BB33EF2E495D12DC339D936165CD4D3
DAB320EC7EC546E096C14375718AA931E5FA13155B2D9DADFD319821E9A00B80
F0898E29B4DEAB02778A34F28E7705CE0968369694384057CF69195A74C748DE
6CA7A02D10C835A5C8A43424810951D1EE74CC0BEB937D2AA66730ED238CA627
DB79D86BBE5657128A2C1DE9119FE51184DF4FB77F755840C1E14E96F3C7F54D
E88F3BE654D7248FC5739153A7B4DB3CD701D4940AEB93612858B6683B937ED1
617CD8A8248AAE32CE3DBF480636F7C7D400FAC3275DE7A10D93F800806C5D14
C253E5725C3A781CADE3377A98455A740DD67F19AF7A984A5EE497012E44EBCB
41D09657AE02AFD9F23EF0C2454959E9BF60CD40463DF6AE8DB0006BF02E9D5D
C7F933704C3D384379D341D74A8559BA68595FFF5373ECE12AFC839D9B0021BA
624728AFC226375748658E56487F4F186DC89097F948CE1643CD0B0363D75A75
95FF530EE19FF48965E7EFE8D180A6370382DB17B9C86717DB7941C15EAA1B39
C355FD102A5CD81BC114EB08677F4F43AA751EAF469D1CD6E16A3775CB686AEF
1B20DE4B354D091C6AFBA36C40B9EA7D6D4AC136C6E227BCAFB44E4AFC5FD92C
B9C465390B8FB7A51F4F08E9A6DB793C1BAA2F5FB8FEF1C2881F7D758A4151A3
E41215F679B87C7B729D0CF30D77416B3C3802AE7C92B07B0934A5A94C606ECE
A8202AE22245CCDE6ADE67BFE15FC6DD67BD87BF4184277DE324993220E6E15A
4C5B3E8EF8385B45D44B0940EB2F34751F0D53F2A3E8C5A9DBD90308E9CAC752
6226BCEB068A2D55DCE4817C91544738C9295BCADB1671D36E37F91C7D334409
38152691BF73A055162114CB82FD536145304A8BAB53805881FB6C8A9441588E
05FED58BAC4A0110DE316A16B979B7F1ADEE163AB7E0E241F34A03A25321C258
6AE2B68AE0EFEFA5C7BBF39112E22CC54B39FEB6D07B049CF3DA60E5F150FD01
7BDA09E5D52E1D362D33CB3C213996DFFA18FFF12A4B5CCD30AEC092B5DF8DFE
C85601E44FB9070AFC8CB24D1951E2ABDC105B5BCA78779807C9774B1028EA51
B75A9160AD0BD8C1C2107C012BAD7B73714AD99BB7EADBF9818915C0CD73DF31
986053A49CDD1700CF8D14C2FB4CC65E562EE667C71545F806DD10C60BB39BB0
60ED6426B00E923578E5B21D084F01726196DAA7C79F9F9AB59E232B902DC75D
66C6804EBF40B5B79FCB4F192B8CEF4DC973318D2E67EB94FE828E74A3C2C298
EBE12E0CFE1C1B16362F529160CF4B2F91CFEBA89F502FC30E84BDC8E792A259
00459D20B1B5B6E76D86B7E30A86CDE8592B53F413D6C5FAE7D3D0FE38494CEE
88FF365F7DBB09880B8B122C146E3623C58327DABA2F14B3E99882FBBD635DA1
5E8284A6F37849E34ACD98A0EF920769DAA49600CC5FAA824E6F67C246090422
14D15D2202B9D9EFFBFEB3F1C3AABDCEDA355F4FDF3AFADB251CBC0C5D2A6E3D
46BDAC315D88696B775A7F73FC34D0F304FD7A9EB6B86ACBA22BBBB5568C8423
D753FA321AF3D047530EFAAAE67A0C6D9C892EE2F38B914567F1791BBC3734E6
7405433BEE61897A896310B2A7197BC4654D6510425FCF2925D2896D46B3096B
0D75AD07AAECDF797762CE99D5476B1DE265EE55622AE2F04DE072FC44692A68
FDDC91D8B40D4670833B25097D3697987169479C5A90458D59D89FD212331AD3
BA50664B082EEABCD2A794C63CD92DE20E6CFDE8EA720EE312582C675BF068FE
0B11483AB7D29EB0B0E99798F10BEC6D08
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: URWPalladioL-Ital
%!PS-AdobeFont-1.0: URWPalladioL-Ital 1.05
%%CreationDate: Wed Dec 22 1999
% Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development
% (URW)++,Copyright 1999 by (URW)++ Design & Development
% See the file COPYING (GNU General Public License) for license conditions.
% As a special exception, permission is granted to include this font
% program in a Postscript or PDF file that consists of a document that
% contains text to be displayed or printed using this font, regardless
% of the conditions or license applying to the document itself.
12 dict begin
/FontInfo 10 dict dup begin
/version (1.05) readonly def
/Notice ((URW)++,Copyright 1999 by (URW)++ Design & Development. See the file COPYING (GNU General Public License) for license conditions. As a special exception, permission is granted to include this font program in a Postscript or PDF file that consists of a document that contains text to be displayed or printed using this font, regardless of the conditions or license applying to the document itself.) readonly def
/Copyright (Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development) readonly def
/FullName (URW Palladio L Italic) readonly def
/FamilyName (URW Palladio L) readonly def
/Weight (Regular) readonly def
/ItalicAngle -9.5 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/FontName /URWPalladioL-Ital def
/PaintType 0 def
/WMode 0 def
/FontBBox {-170 -305 1010 941} readonly def
/FontType 1 def
/FontMatrix [0.001 0.0 0.0 0.001 0.0 0.0] readonly def
/Encoding StandardEncoding def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BC2C03103C68570A7B354A4A280AE
6FBF7F9888E039AB60FCAF852EB4CE3AFEB979D5EA70FDE44A2AE5C8C0166C27
BF9665EEA11C7D2329C1A211DD26BB372BE5822F5EA70D99EB578C7BEFD44CDF
045A363056E5E1CC51525EA6FC061DCEBB337208EFF729802376A2801424F670
0E7E6397B28F15BC10B40012B0A3EAEB2693E8F7F627C4C9C7C6C5BFF105C1E4
1B2B9E8F09253B76040D268B80719E1B3F5A55AA45ACB5F973DECC54C8130ABE
C8E23C8067FC409DBA23A469DC7C6C4F7EEDC3DA588EE3C5B2829D3E1492978B
F91C30C1912183DB62BA489418A68C3BD44566603673FAFE6C3DD78FDFC1F6A0
840DFA44EAD8A5653DDF2FE86B8BDF672707D2AAC76CE376C2C9E56EB95F30CD
75B1E312BE777EAD75EFA21114335130DDC559ACC1A14454397984D624EEB43A
C7BD688E270025A34A912884DF387744462E4F666099415F25F86999B31B0588
576296579F6935952724452D811B749AE61C6265711EF0024C6AB25EFE1E88FC
F88AA072958C75F616D971AFB3D9116E041EE7B66C39DA4481A97509DE7AC156
CB43C5A85501E66164E5FC61F9C64EE138CA0D9A0808BE0443CF3FBAD13C63EE
E7E39F1D385A453E8095DB2FF5914A611E11BBDDB04D6FC55D51B08358EF7253
9B8E1FE26561CD5CA9661C91D264B3810A37BE373BF66FCB021E4407375ECAF6
BEDC1561D701A5885F4216EC592958C80DB9B8365D66A8E075A88782C4BC6161
F6B5246F49B14E4E086FD10E01EDEA5D95A0F67D9F6D16C093CC98116B652B60
04B7FBD451E536399DE7A8D8B8E0740228524FA5CF81735BBC72B976F955FB3F
85B91278057DC1FA6B42FF84B9F267188631A0EB7B4456653620151073F4275C
9B80D71B4DA3EF23BA2811F90A844D2D4A18C2D3E7C75DC2351F250E946C49EE
1D67BA5377ABAE009B18599825EAA89BAB6B56BC1177B32B4863A004CC7448B0
27D9F6030ABABDDED61E95CF4D02EA9170BBCF04E982FB170EFF61B5F0A3E39A
E4596CB6B478F6EA85D464460C3E3C301813928D1A4140ED2931D06F55DA1B92
575627B7363A7B2F52C2EBCB003F3168ACEADBC274B460104B32A37A35E08E61
6B4C58ED4BC82DA01AE19F2AFD0CA670D4CD12464788C7AF3C22AAE6B2B67FBD
72227163E56D6B000CA09205E5DE960CA4FD3EAF0CF4F0DEBA629606B3080A3C
F844D40AB9C322531A66A5CDF3813826350F1B3B617E06110DF29A7FD257110A
B63FFE91EA64F6586FD76EF7A00B6787584ABE26D2B060C263160E0F56E1871D
5C657039EC1F6BA8BEAFFBD2705F5BEDB3BC3CA71C9BD82D0579FF7A98848B58
E6A98079BA5B906C8A658B32CD7DF74507591F8502BFEB99E6064DCF24EEDDD7
CD879E3ED5A2BC3AE5C25D9B5886E4E34420D1FDC40EE416A22EB641B806CFBA
A9E568F4B428097651148B2CF46FC1B772F5D8C6839B4FED57E91C3F143E8AAE
CC81F2666400D61D4FC3FB88C942942E07947D14F419820F312F39B3D1DC463A
D58805DC0020DA627F431148A0B39D9632896CF75F7A8D12AA298D4FF6E6D374
ABE8A2E69FC181CE2156B1B1157E2F79157B5246F152712C0E3B67EA08072FD8
01CAA79D608148B487E342636CC11548F202792651F803B966B152D2E4DF7C06
0A5DA3AF84E4E69677DF656205F719AEE902E64830CC67A9DF22190B92E7036E
12D603D18658E8545BE3F7985BDF6DB3EB202E84201430FCBD775A963645B397
1EC0A3C269CB7C61E332A464038E074F0F034F2B9C45EBF19CA4E61E4DCE321F
25568F03F70E01766BF016B702D8EF62D1CAA336732EE5F578302026F8552B9F
FDD54BDD8C7F84484031FFFC0AE8932A645176FFD98D851C9629B978FA10CE2A
C0425C7839991EB399DFA54C7F37D97D22AFA04E1FB8508297F560345E1E1901
66720490A124A76A808841FE81D39359DFACB7FFAD8D5DB44108662E33BD80F3
7982E97287906415A54F2879BB03C350A0B6C5ECDAD7BAA8CECDD7699F28845A
536EB340FEDCC1BDD57D885BC7418CE971A5A517D1522E930BAC7F0C316E428E
93741A4C1AB0C9892DF4A062BEA11998D025B544A987BAA117DDEE52A0D32733
B6EA08A261F936EDE7E4745E67F5EF631C951F04D6B0D0E599445910CC42F926
DD71C9A7F7DF8AAD9DE1D97865F8C2D9C77452D219496F45A655D9F0B0A50A86
8AE11E3463E9421A4F04267EFF030E59EF7F5E40B042F3C77A9159FF81B4649E
E2C6FFF9737EA1C27589672231B5A1CF2A1F878F7AECF5F5EEDBFD3F546697C5
7D44980EBF412C4E5C713A60B51961D29E7139D0E10F05ECBDB4BDE7C8A8C75D
3BD356F2F92A0C15A9BF35518B241CFF20023154B1FE8AD303E24F3DE486F92F
DA197833A0CF88ADFB16E37D5951E76363CE7E024B0EB082DF83FDE3D1078B88
3EE21D9BD24B48E4D1E03E7378C05B62DC03FFA7DB9D25F0BA34EA859BF991D0
354BCAB97DA3AE39378BD2EF0242021D85C50EF4F0FA7E8DDAA7E09A5F3C57BF
673D0276707BF3756FC97D20E7034E1FD476BB8A678026968855B88283552DD3
CD9831BE0D71D2D16343DBE02536E476BADB55EE925B6BC8A982553F46F6F109
AEB141B8E134DC83D78F19C717FB2DA69EB4B0A63597D1BCA0C4BAA2BB8528C3
4C369BA3D50763D57C1CAA5CFD9004575AA9F1AB91191B962D658FEA6615C296
181A2ACD808BC68EC9476D3540344E9431938A9CD0ED5086E66358D95DD054B6
83E7844C1A9C5E04DC906ADA5253757383F401C518141E6BF4966D8299AEE0EE
143A1D053206A7C133D547A179665BCAB516EDB843054B714A3AF82449F3E0B5
9AB002CB68CD84F332FB505DB3A35DE963CEF8CFA34D66EB4F43DB29155D93CD
C05BC0FE45B681C73C50BA9A44786151E921E77221D1A184A69A1BABC6FB13A6
1F22090BBFBE2F6D421DF42C12547C70BF5637F6D5E4612D2E0199771B95DB67
1D4B2AD846EBC01098610759E5F2E7D41FAA5D19294AD7623E060977AB923333
8FCE1C1F7EBE547F10F4F1FD4C20B8E3F22CE2C0394FBF11A31FFB8A31AB6328
AAC8CB646A338A2239F279F2B32A59FE9ADEB63633F1C21E5441B02D336DEFAC
7618B3EC9AD4A85A734B99F26680B00120B7722CC6452DB98A466FE912EE3408
40EBF250019F736B0BE0CBF8423D79C383ABB001990A07F8B008FCFEF55C280A
06803E50513AA7C034A8AD0032707774DB00EB9643FD42EC3E08AE30842FCF3B
0E4E69B1ADA04C0BBE28B5286103B7E529108C25F0B0A3F808E890D1582FCF5B
48BE8104CDAEC5DD651A47873B9C3C6D2A747A6D3A15DA0432E4E6B15F9E7C2C
8477AB5B1C5A25CE05CA586827AAC1D462A387077172A935EC2DD30B9CE2FAC6
D7902E5F8BA296030500CD6EF2A753B23A98FCBE33353764304C2F86CF4F6CF6
43E5EAF53DE0412C6BDCE13F09BDF18CE495C0892B5DE377790862DDC38A00D2
D5000C9DEE8327A4776FD2514C9A64BAE28239DA5434BBC5DE6DD34EA40FF801
B02E5D4CFA7463F892260AAE3FEE92051876BC97883DC1E316505F2409CE02B5
6326AF9351DBC2193B2078ED0333ACB1899034FB6867CD60FD0BE38EAD48F403
DDDAC00070FA9B1D27C4CBF11505C3E6C3A1DA2E6D1666B78E5B9761235CA272
971170F541C96F2B2913A9E2D3E6D615CFF9212CB0574161B0B34ADF6348C685
B3DAA9DBA1A5CFFBDE8CC24538DF6F5F6F364524C88D6E6491D7EBA73AE97239
3DC2671170B03CEB7FD7ADB4D72671135435609A235501E4AAE46C593BA22BC1
7E73DEC03B775C6DB41E9274E09C437A9522A015D41C58DCE0075458FE5CE174
11896B1101004114699B23A83B8DFEAC96CC2FAF3989764F49073B8A3EEB12EF
B77E7AABC37F57BFA2BDD7C60D416543DF2435BBD4C1D7EF7BBDAA841F389C6B
D8D2337E86CDADFF3B72732A4E082C00FBD73BC06D81AC2E3F29539FB7F8E165
96FFD4151B332C718B1733910EC9C57B38834DF8ADB373A5B5BDB1D57F414F3E
3C9D18E6337C10744B64E655BE7CD1740656164600A1249B57FBC99D4568025D
1C87A7E6E47533DB69C9B37B8B2E5F4F1DB0BB2D0B9A365F6A749D3E72C03623
238CB8CE62255BAF0145692EE3B52643A0DE3E63EA514E0ECADFAEF80EC2B617
3E40E41727528710CF011087CD690D714452D9A6EF9AC68D884E15ACA3BCCC2C
7D61E01C7084E3A0161D14E6B6923D472CB36B4E7DA373F0D51E81DC69EFC45B
D40DF4EFFE58142BAF19237D25D5FC737A8F67AC79678830CA6BED68BE34F42F
3F6CBE5A045D10F02F7196B719346371964D6CEEAEEC81170F40C2ADF359D8B6
002BA1B01A8F0E9FAC385340EAA8125921E0646C0C76B875FF4244C98FD6FDE6
12C8F2A7DA397EA2266945D9077600B034AABB02D26465A3B7C450A0B6C5ECDA
D7BAA8CECDDEC1CEF5820C6FC3A77F5F55D30C021BD7151232F1BB01960055A8
8EB090534CD23A881E6D86F82C0A23B4CFE3356119D1E4BD658E9EB5C64396D1
4E541FDA266F55688C6B9BBD36356BF8F5AEFAE3875512A503CD8C51F061DCC9
970506D4A778672A022D1935DC9689F7738192BD7F2546B222880AA3DA9472A2
2295C9B772A39F761F19C2BCC97B7E3E1222DBE1385139E26776D9C1EF78B3D2
7D4062F87435285C21624DE734BA0A157E9EFBC0BEB7B9C904C5B83051BC4607
6F8A2E5F4A31F14E132B2A1A565DC771ACF32E69E0D910BC195E409C760F6182
1FEB98676A3903B4625C81F44B4F3452249DAED8DA74470925049188B9D91BF7
E1FF6C083BDC43FA3002549DDF20ACA73839EE432704617E6B61B2A1BA805125
4872E35CE665103D49843C957D452B83BDBBD01EF6A9A365E7F82F0F6D6E74A7
273FC11B7A9B67C7A95371F0B918756805C9947974750511E7F2A574049242F3
6BE3F699C70E74875EF9670D0F3FB927FF32FAB9C48DA8C6BA8484D11E36716C
E3C16A7D6E06ED5E80823051553FF0C9B7C302D8A366847B37246F8B362F9AA5
F970CDE34F9338C4736FBB6E44036DA3DE4A6329ED5C68257D75A455702A4E56
A3BE26B082645334080AF17A438014B5902A55EE220152C90348CF590A032C2C
C9A74B3F026DF847160DCC0EA28C3C5C014A8BF188037570712E2AE0491113CF
8C67224B7174B5BB113B860B5E437DB51ABA1CEDC02E319A37EB5CEFDBF36492
D265A7B440BE40FA74B2B0831154ECBEB291524E49A4642EB55C259CF5B2584C
CCF3418C6E9D8A2D1481910C95710520EDD00A0FA54A7F5E9B7AB69DC77FE9A2
83B3A8C6A0DC65C7134AD5D0447045AF93358ACF5DE07C87C7C94DE85F31DC62
0F62B87A086EA669CA7CC9C0DBDF10DAF2F9FD6D88D94B5C171A294A2A8C2632
48327955365285933B69F4B4DC168A19486FB4C1D31E05643BE95D9463169D0B
6EF07098D4E97FEBA8C650810E23D6351C7E66D8411FC36D805485D619D58FC5
3FBD6E3F72660ABA564BF8C3A05017A993D91DABC265A39EE4A494BCDEE0775A
4395ED0F74F86AD1E5960BCC178CA91E649ABCC49E4818557FFFE1487F472EAA
AADD371CB4D0A9D11B3EC5125E187E3FDF4536A08B7148B41D5EE08CFBF052D1
DB42840CB2E7DF75C46575A7DDE53769660CA791AC5CD8A4F3ED869F7A02E04B
A99EF9B41762192E8F57D9755891B8B556AF9218881BA4EC82249B3B86FCC08B
060DE2696E2493221B5602F3E90D2FC0141211EED5D52E7A82AF52A14DB5E2FA
BBE3D7990C7022449B767AA3A9EB2E5C2790F8B11E12F81CF99C99CD0635E33C
B76ED6672AE226729F5480DAA49E3EEE0CF4B5284A15A8CE7BB284767DAFF333
0B7E1C704CA6D922A2A0AFD83534AB38B5B3BDC9B4B5DD2A8732F9A1FEC88008
BCFB516C8E0EEC1D7338D4294D0D6285CF2510738DC62CE3C788E52120B2F185
A8C10FDD4A63305B73FD7E211C64230073E68F63CD021FA0B87AB70B847F6913
BEC8A5F4F1DFA7A6160B44F7D121F4B091D3174FF8F30FB49B8243A71AF67D66
CB395A959954437251F3632A69F9AE429A73F796538A9B47D6BB642BF3A94A7F
46E7E1D84B0275365CFBF9082378441503FB0E71D1791340F621A958DF1B3580
E5E2A717B5A6E8754B6EFB424FD55C88BE0C688C5EEA901C269D428F2277E648
AA2DEED29B985455F21E95225D7DA4780BE7588A2328BC49F5FDFCA8BE38549A
E53F72B85A6F03B58AE3644ACD4A242095B90D45EA2262870C4D13DECC59B926
DF4EE1FC811D5DB662E87168ACEB248898A0E83A06F30AF37522828FAD64DA14
6DBC6D64CA69866E393C80278FB9B70B1CE79011978C633D38370A56722EC308
6000A9F463E689A2B2B15E9C9D7BD69269C65CC8533EAC25D071F961BE9AA596
6A85A6354CA3ABD353A665ED382770EF600B8CC94AF5310920A77111CFBBB6DF
200537A672130E5A792A3EC329BAE0532181AC95974342C231607FE829CC65E0
C02E0F680C6DFCDE0AE9FB837227B4BED638B5685BC4904FB50458B9374598CA
5B7D7E7A4475A2D5C24B852510E4FDBFC1EC7F32A6A7A689CCBF576CF8CA936A
6B93DE7264B6ACD114DB2F9F701DD7C699D62DE52F2D4F81EB7E8BC51B526FE4
0F0F5F0AFAB2498FE1D769F72A5F4EA7AF92E79B7F4AF34B8F48A862CD1552D0
064D626BA54D3772A088E00E5EE241DCC37771C18C838A78AEA8618AE4769056
BA9B01CB0545942564B809A3F2D591D8EFAC5C687D1D5E468B4D4AE9C0EBF8FE
4547475CF4E9ACF3838B3EAAB8751EEFF4FF92F19BAC6B8B8DD708D86ECB7965
C9B4F33E6D6CF714CCBFC11C1562A840285E5E7AE10BF5A37AFA48A8C5EE2C5C
A18244FF95A0ED27746B7AD95D5341C64A7B6CE41ADE03F5151D0A77E51490AF
9806B70D0ED0EBF73EBBF560C35D00728C76BCAEA521184957C8D557A0F94A3F
43BFCFD78A81CDB1B81AED27AF4437EE486CEB23AB7F9E97C4E5C48722974267
A2FA59F3C205CDC6EAB3BECA06C439AA93C03389230F99B2E84BD57C6B0A55F9
9BE373124071EFD577EF3FC6020F9B1621E13CAE863623461F2E15F16F870F7C
47B842D2177F9A3AC4B6813432BC4F0800E2DFCB9977F5FD83A8D88649B75466
52435EE004F57D417428F2ECC729EFB3AC273C2A01128706F71D3A9C29B4295B
55CB4C6F62668E6449E365CC7634E2F501BDAD297FFAD680063933291D78AB55
287B6E8D57EECB028F93FC3751DD7EF49513A43140DCE34352EBF849E8D4E5DB
E980D00EB5A67044C8C8600CCD039BABE847D2B7701C95552648735E24B5DC10
2A0522EF0CEBB85DA8761DBC375AD4A9DA55F624857FDF53CBAEC24494A53330
3C9173F2AB56120619A3539824DF0C0CD0AB81DD2A30960687F2DCF0B73198F2
8BB6E14514F932F98837F99BA0FE2FB7C706D19F898974A0BF058C65A891DD40
E4827F51320FA620C729F61AA7463877535BA534474D7BB29F5424D68C3CA628
330A1397AC2A80705CD54F6C9137B47F8215FBA0617128D08E50BAE5428BCA71
84B78E8833CAAD010DD1BA922E8058E4A29CBB3800535C16A4C54C3B43913340
6C7C4736C662A98AF97687DA22F7DA35F0009A1FF8EF42219B6B02970D700A7E
B77785DE6EADEA6898AC89AC37B23BB93A0E3BF956AA5C502F687B22E1E1E967
6FBEFCB1F65AF4CE72BDB9A344621B63D9A188961A3AFE3025F8237CB7FA4317
0E5C297B4C966A789FA2F37D75202DAA6D8B0BE0453B6A0E1613E47BC77B66CD
DD888BE04F0426C245069E5B259AECE80D0DD345B91A9F191680F431291B0F45
AB46316458F9D83BC50810724EA722AD6B190DFF52BE21067410578DF18BDD88
0AF35779E7C9800F2D61C0BED1F93E09234DB91B8EBCAF2466DFEA873AC7B461
E0FB63D7C1CE62B8FF346471992484AF2F4624C61E323845F406144A581ABCA0
E13D4C14D15B1763422CB0829120D6DD0D7893B93BA8E0E0B08647A6F4680A38
6F68B9B2DE2A95820B09543B503FA5C8CE149043EFCAD86E95AC1A1FC6F92E98
EE1BE3BD877B7FF0052968BF8D265966361ECC7835EA48CB16D8CBF04ED0A6AC
ADD7C91ECD01676830919844CFC48CACDFFEFD97BD9931F1C579B68FCD3D2C1E
CBCBEA30B6CA367350015B23BA465A6AA5D3BE0F8F0358885542A8DEDC3692AB
6ED25984C2322F68D9CF4EB3961AEDC4EB2355B3B92FDAD0B2A0F57E53F2663F
77FCDF31EAD11B2A32033E553BB5F5545100A33E0287C97F1A16E2478B57A9C6
D7BBCF01C458788E6C283C6882F8CD72B614B6722F4521E7C5D9403C304623CD
1937DFFB79762CE8669F7FDC3F67F9A90EE5D88902E33DFD17F6080B00228038
409ECCA203EE89103692DCD8A43E34700DBCC74BA34ED068F34764F90B5E8AE9
2B6DDD7FBC54C0C151843A1E158EEC16CF00699DE2B6CAB72959AAE1CDFC046C
42EA1C8BEEAFBAA05F7A40D6C8FC855BEA8BC5BD686B0785BC420CA6CA0E70EC
2805B3FF31E50785F3E199E83BC0FE96C40DEBB399B07A5CAB9B6991FA841E72
C3ADEDBC34CE88AFF5672FCA32B4EB64AC0850DD943BFC137AF7F6399BF1864C
DB6BF0886AA5E88F0D7C1486F57B52946D8C2CAECF9069994A576F569BD0D133
F44803D138396F3619557849327871EA80F3BDA14515B966EB78912997CA01E3
D62F81B12C803BB279C68BBF156077D93A577B77F81BAD9804D7EB693D771F12
7B01F0FBCACB883E91D3706F8C0E6E27F7EA4F6464F68650E3531C7ACE97AA65
594008CFE3B5DBA2A2F375A25EC5FE1DE96C55E1323E047D8A716DF9CFC1A528
5B2A987ABBA694653A715EF984DC4024E1AE9E848F89C3BFA9CE0018F16DB0EC
1DB07CD39B7F0BB8F785CB0FDA4BCFBE1BA35B9CD47B1070873F9D89D83FB040
0409899A0ED29053C0BC9A97B684E911FC4B41FA37916DE283A92E3A150BED73
EE7BF6923F266C5F796AA78EC052766008A72E8D19A2C70BEEF811143E2CC6D2
3981C4AD3ACC34A4AAEF83F4CC347E6AA94F36EB2BA921656BB022F27C81F530
53503EFDC70D90D3F0B18EE52E1A0E23543FEC83CDB85DD743C36A48E78D9AC2
F0443968F18384D3C4264F3A3DC48108A357A67F1A4BBD26707034F2B274F023
36FA3D458E27212F558C74BB75C06F7FDE01F8066DD51A50DEB093E7A8FD4C6B
590EFAC2A0AF6955E358F68B50C529E24D4D40A365A77BCCE80B14BEDFC66EFE
AA19DC9EBF88642FACFD91D0DC3BAADF65C451D0FC54A5030FABBB2BF7FFE368
3F98C8502F52C208D79D055ED6BCB8E3E01067B3064B08D8164A448C13AAF1AD
1906A8C9847A6FF2E77FF84C17B264D6CF5C9E4CD4373C0CE4894FE71DAAF506
BFA8FDF51A1D2F788E587CAE337D53195E1AC14FCE11EB7754CA0DA92FB92150
7369234FC7FF6261CC31D115E81BAD81EF5E6D64ABC7AEAC40DB2833D0FC77DC
72421154120FC1AED2A537788C5642B516DBBD86FB3E3CFB939FB3F95EE58535
53FEB5D1FEAF46BCABE02246265F2FCC20CD6663DDD122B0959DFEDB97A500AA
E4FD48236C1A821D957DE1500A3F795462BE6056EDF245D5A30D1827179CF63A
385B68A1565163872D62EB850B630F508FDAE49D71676C7760E9935791E7A38F
AEB18A4E15591C0D48044EDFD84181292DBC5376334B16A2D998C1BAB242B524
B233846C3E25446A90472B29F534FE72FBAE3006A423E8D11F5AE53E3AAB8E5C
ECBACA0E217265B7CD0D7D61DCCDB75CB6C1AE83194DB7C74D8ED35BB391799E
343FA5EE03A1EF9BCBFB8200DD4E07C9CC061B1883218A71C41AF164DD803D65
796C818DD81A90326056B7324AB78C38E15ABCB6AD9BBD9EBB8DC185E09CF1D8
87BB4F3124F10265307EF3B2A6B4A16D8B4FB4CC462309E02F42756DF18887F7
E237E040961E9DB1D14DE9BB73AF0AE80410C4FBC3A45FBE3BA443628CD8CAFA
F9EFA97C5FA81702C04838B81829312A18692E830BB9DC0BB659B2598C8A3062
BB4D58D6E0EF257797D945A72A0D9F60313880362B868DE5F556B5B7EE99F168
D9EB99B3CA1433C12D69528330250F9B6C1E2770BB4BF722D8207FD68296B4AB
B049ECEC181FEE5B38D5E1E5B6F3740DD98E2AD199D39C56BE85889670AB5912
E97CAAB72BFB900699E6CA7B672D208B1FD63B002DB74948F0B46C30A3AA5034
26744E5DAB6A37F59EFE3DC2B20EC3855E96425AA5F10CA1EF4608FE644DA9EC
BF999B45B188B00469201930BE3BAA9104DFEA7D363CCEFE75D9C53731DDDBFA
0A0B019593BF22319C02486B37F96AF1EB94DB2F0F49AFBC11E92052F10FD385
6029CCDCBD0B908C01494A6E3DBD2F5E24463742B088247AA2A88A0823B25C72
5E3CFB3810CFBBABB44C19D685B6EEA36696E017DE1C5BE3BB7D61E7A19A3AF4
1378092EB4247C4A5C46A1425D421F04E63F100F6D341B2BDED5E569DE1AF534
5D75D443502A86FB184B3C72ECB95FD18E974B39A53B5DCDCFD9FB21A2F8D90C
42574EA689CC99E9238B1E39BA4C4FAE1BCBE074D111AC0F8F32F9E827505B27
AD12B9AA2BD0774AB3D74F9B39B316B85B1B6F95770B364CF19DEA920A1DED65
833D93B1C9628D726F63DDB4ECA19D67B1F23A5D1874C7454D9ADF8EE5A8594F
49D54A45AE6D37876205304DD2822D40E023A72EAC0BC75FBA4E4E99A88103E1
4B38953DD1E0F026FC3AD24DF0018B38431CE2A93113039D9CB4FBD1A3676A2E
5FA080FAE73B2F80CFB4CF3D13A7D2B2C077CAB7E28470245FF44C74CD2BE1B3
2949EEC57EC3D3764F0352BAA44718FC3859F31D49E1627DE69AA5EA146A5F40
5EE441E0A7DDB7480D4F824D86E1936717F57B492B2BC0FE74616331601E84A5
A176EA33FC53C99E9785CF28F4D73CAA5BC2885F0B5BEBC8F04DE5000FE41975
5D087A3F3D5216D8AA351370E698D181F452E37AA54786D69FFA2867DF26D9B6
05F7DA45301F48346D2C00518ABADDEA6ECD7A1713DE7AD5B63DE2962C1B68E8
3A7B0134FE419D23CF803DF01FD60556C7056D0E7801038F92981250C3BDD77F
02C296953F4C5C81F777D2C6670B93D2BBA04B489AF91F30654219A71F614C15
E18D9EE65D657E19E355BD525A77989E7F7ABAD088339A7CFC900B41FB02F137
22D4D754B382C82C796D60949B7B5EE9B80D37D0EBD157481C66507725A5D969
6900D5D8FD1EE5A172D0792811CF61B3714077BDC52832D8AAA1829308E35833
15E31BF70E2E0FDF33B86FC59EA5D64B5FAA44144D1A6F2F8BFE9A6DDE8802BC
829F0E99761E066F7FCA3E57C46F3F924AD3D83219C02F9A5DC49A87F38B8190
21DAD91A16515E787F70CFE71774A416ED9175D5C9919AA6516F0E77C57E563C
368911AD7E5DDD4315463D662B9274D2E29312ACAA9B901805C8B19862BC10FE
CE4321EAB5005525342C7441E267C1ACEB83353DC405A46690131465B5D17B50
35E3216E37456DCCF2D7221490784231EA6CF28982A4470A7157A56483CE3B98
E051AD8907FEB5565164E2568377D3C078D174E1FDBBD22BAC44ED6AA63FE9FC
AB710D6DC0892336F8132E8C92B729F0F68C6EE117A1C4940A7282F8A46377C7
2DE1210BFE3CE7DEE4C16D48C9152A95B64BBE23830EEF021FA259BEEDB8E53D
F62FC14593FB1045CE98AAE93573521ABBA11B6F626A429AEFCD373482B0CAEE
A3097E14316DEAEFE9A5599FA80835C8E3740FB567FF83114BD9FC46A680DE6A
D320F8BE2B000CF0F38C0BB8CBF62F6A70D25F22AA737849815EC8BB9C79BCEF
D3DC1140C48851B5C5456D4AA23E3A45565BCB1430713B988916487ACE0AAF27
2EAB35BE2631FB602BA288D241AFAD9B21B8A7567DA118DB4E6B87192D8DDE86
2922A8F80A0DD8B36675E83371DDD0804296B00DE965D6FA0F751F9A6C6E330F
21E79D9244FBEA41B0F5FA897424FF7CB29E65E7338B42FFA0BBB5DA450DA73B
07518B9EA8A3F1A8039EDCCE762B26EEC2F54E50D6F882DEA45A8D2C029CCCFC
0437C82A2FF545602010E02FD28AE7F2FDA0209D8018C33E05D53C5F042E512B
2E4AF08B012316E7524917B95E67BF880AB2CBFB7909B93FBE74BEE6955D3E49
52E29D4469DC7E5A9141AD2C56C395D1B1542BDDF61AAEBF7097EF73BFFD5E41
E8AB6BF105F87986D495940A89E5F0795FAD09FCE908A5BAC001904C1FB4D0A3
796357A137C53CDA640D1971689C0F359224627423F0B7F08C9B2E87A50DCA2E
BEE2FB931973471B2FB642EBECE18E3DD2E19B6A5BF6B667F721032A8FE68032
B72C34ED38336250670C41BEB73DDEB6099C156F65478D26C2CCE1F472A15014
8B79B16726D5BD1B6985E26BD50A3E77A266DE4ADA28877B6B867613D53FD6CF
230F4B0504099393D7EF3EE7745D6460F94622AC516E9D777D6C653FCEB4B027
3EEF6CA005C53AFD0E400FB553C3FAD5FD13DB857C0A6824B7C4B1FBAC412F43
EF897224867AA1517B0A6142833C2CE9B3962B4FBFB2CC78E34985A7C1BB8209
A24908F8C6A13C63568FD55D31B98E4DA0CCE51D17F78EC2CE4093E2F1A817C5
B8FAE5C863E52B77126E585458756CC04EF2D4520792CE9391051700A28B554E
C2ED4A81E23EDDCA6FFD6BA9EAC0E736B586107D2D3F420A85DDF9A58FC8602B
025CD7197FB2ED75B7E6ABED08325DC0F1A08F9EC5CCB06BE359F40C9C791A81
6A821CC27951A9685E7147AFA7D79B483F27E3FBF9376CFBA340B813D4D0E9FD
B6283210B45BC180AF3CC71C93724CEA5F60208659D4B3EBDBD12390123BBF46
0A4926CCB9B73A8847345E339C03B04AB29E6A67C40241FE24D856F780506A8A
749F6C540AB8AD69DB1EE14844169FF51B5EA28AFF51E7E2F20FB2E6445D22D4
8DA41C0B5FDF1427F7B7C40594AD52586024CDA73D660CD9EDB0E04037B29E6D
E4A9124E4503506D47ED44DC46BD4CEF2F11AF3623F9F9026FB95FDD4DA6475A
1B428817AF0A3AA363DB69676D45BA522BB5720B6C0D934BC8CA159959DE30B7
04C2CDD0C1379904A93541A0F294745082D5CFAC5495FF9DE2DD8947F76F9017
1D073AA51C340C131B645E47FF355DDA6EFDD6B9858A0D414AE23663C753CA1A
093F7CC6DDB7D589B843320C4EAEA29861788184074552620E253CDA33180831
1F8A83485ABE5EBFCB5AD28DCB63C5A2EE33675D03ADCFF826F51B79A5D23F40
DC3C7F24849F26B483CBADDA198EB525CB7DD873146C2543F3BFBED68B97C3E2
636F226B16068B97E425011E76306F41B1F64BD43363DE149CA446F9D4C530CA
B2A19128BBC67B1927D563E0FD438FBFEDD3ACCDB18556A3CE5AB9CBDB0F407A
E8FE0A03A613B007DFE27D07DD98850C58DFE0D8D51623A4785A1F6E19333281
79090014E7C7AA30856F849694B065E47CE1590BE76DB80401F1E0972028B988
156BECA87BA7B3AC5F606BFBCFEDB196A00FEA0B0E35FD1286AE6ECAF1F03A95
CE22299E550EC68EF92CD4C377E8474B4C35093E89FBBB9CAC75A8526D7364A0
957B38BB4D061CAB29148037F70DF3231129D42664B15AB091CBF46A09BAE5AF
23ABCC596F68FCF1E9D7D521F3E4F29D0E83E4EFCA2F125F7AE698E142DE9FD3
42252BCCC439EB8DF8627035428BCDA74DD94D6288BEB859336A7997834617BC
5DF55EBB486C47DEA82A73C6C95F4D3287C6002E9637D55CA8FB61A3D20CE13C
E47FAEDA2331704C7D1825802BB693DDDA676F8B8B3466DBF657E1C0265E1975
79B4A135CED0B98039433276A9FBAD05D50819F863B1471C89E977FC0DCB9972
E8F4DEFF6F376B7D2A51013AEB34CC17086C1A09138C9597B24A28A3EE627D04
688ADAFE4DCC336E145EEF8AC9C176E9FA432E01C2F246C94A86999A9C439184
E63C37E97CA189058F3E4A6F5A33CA8A9240141959008F66149A1F3D5A4C3A0A
818E32CE45AD8A3D88259CA6AEB8743677EE7D1D80BA5165A98AAB041D2DF8A3
B7F1A10B04DEF742C5A8FAE52334786A1BFFAA88B6041843F49D6BB22269D84B
7F19A7D8C832C4EC3EE454966E4605212FC95439556FF408E9E2B554A712D9FE
FD76750FC1CD1C39A7A0C2F8CF23D58074C05F23C5415B243D39E3D71551A2BE
27D9DCB73571E170DA351B94614858751893E99264CA6434BA98B837029D5871
68C7D60C2AEA0DAC4E6D1EE7A24E699F0984E864D873D3458CA581E09E7124E9
33C88A2E0976C2C2C795D2C56FC513234BC53645DD5C4F518E4E0FE542004DC0
3C6B1A85CD6A3828363A74968FCEEC68CC98AF77EC827B54E40086C6AEE24F9B
E9D10E6CA5D896737928D045E8A4EDFF7651EC590F2A858A5A70810C2BE26514
01368C8C02B39BD4D515F48C156FD89A2007979BFE5ECB4F74241B4D25CDDA9B
3F03A8C9265BDEB2ABFD01B10F5EBB26F8EA5BEA6738B815C965A158D11DBAE8
543CF3ABF693B59247DD9B66DF9165966808286A799E2C6FCA816BCF89957D09
B49A89539929B274FE984B65CE5BD102D14F972D7E215AC66FF81D9CAAE870CC
EBCC2643D0CC75FA3CEA23988D00D0D99C18BF9637B1AB738D7DEEF8D07D8429
99F721DB7601BD9A1A8F05E58444206415CE508AB95A74A69AB02C600ADBFB00
A95D8EE857E84E1C088DE1E5460DE7D1A36A573708C2EC01F05896F0A9732345
45CC358D32F0F2B7C81683A13CF92D0A02E30FCE18A6A4919EAF29648308A2F8
7440F74406B5CB9FEE4F7BE5C063698CE64BC81B8894469C2222B471E8946684
F310AFC32CCBFEE84FE5E2C7E6A4A96C42ED03F9FF908ED5634414EEBB98E436
00F3CDB9FE1BB0BB992AF5DC7D6FAE9C67E29E4870490C2E55E8508001A348D1
EAE358BA59C3B1C68D832B1C3E3AC77312DBC13E7490C4CEEA60F3BBB4B07322
8D485D0B5D8DCBE5AD23691E09F05DD4BF970F1DD61C8390960420D8FC681293
01A54312A9C7B686C2DA24D62B218F7EC307B119539D22D34EBD2B3C90EFC3AD
5CF99C16D513EC2D83E29B7462EE24C12ADC993592CD7E747B02BCB875AC07A1
8FAE60C47D0A40B0D770DC03397F263AB3A8836717FA78BDC57AD05AAF797E05
BF058C9DF57A42604D019D0ECCF2300E111FC6B18E2F9BD1CC506768AF7153AF
8C015087183BFE0C4BC19A13F51CFB3CD2AC51B9FA9D9724FEEC86935BDC5503
459DDD56B32669E8F40B71821B5900320C32BEA46A18A6790993C18304C9EB73
691DC3CF46118AB6182DFF8B223B1C6E24DDF7AFE5BDA99361666077C42AB938
7ABEE68D387E1193992B70002960BD0B581CFA0817DB4BC7188AE698DD456495
5008747F165CF517544ABAAB674DA9E421D0F8499D534F652ECEAF949A6CDA08
D7F883E9F5B08389B24982A29E4AF51B02E106C1A29E3E8416655D3CF0188D27
3EB821F7E52220892BB42B299F9EBDD7EB43B920311C7EBD584910ED483772BA
2190DAFFF24475298B39106F8FA0A7D9DB8852D903268B55D553E5D308B35475
2A22BF47FA5E55F5E8CB20A56A259DDE7B32D96375E245394378D41F7BF862FC
18645039DF415097573412C08F100A375F7EA406068E348876D4BEF2C9B20D82
86DE9A3B0CACEB173CE65BED09CA8358631D243D01F6A76B77B60AC1AFBEAB6E
0E437D6642C180C7D064BFF8460B8EFA2DFC3E67485834BFA42BBD8C7D056CF2
A59E8CC5FC0E78767ACF85B27EA03B5CC10010A0A94090B14EC406395919E072
893ED9384EDEE3B41CCE1747BBDBB274FF1A0044C369445FBBCC18B79814A384
E4D32B13D9CF0F9DE532CCFC3D1BCE6F3F9E1AB0579CD427A9081FCEF9710EB1
5F8ED64B6F5108BE3F75CCF45C11AB548F9D6105B9B3449B43B6B84F828A0D59
E88ECEFD83797DC9350DB1BAF3E8094BF547DA936F43352CF4B3D783BEC5F9DC
869FF15ABAD0083F5C1B911DAF89CE40ADE7FC9B2C58749FBD9BDF51F414EF21
7581860729E94F12A0959ED3478C3AA89FF4214DCBF602A5359B46BEB3E1F0D7
CB97E342F78AFDC61E98901436CCEFD0BB15DD52FE8CC1B9150B75974E290C51
82AC2EC129436341F86BE134F0C586F82099FC42A5585A7BB2113F98ABADAEAF
8948D07701D3CE017B63310B6F63FB46C4D04EB219D8F0FF6B6914690FBBD342
0FE17D9AC020B3E4E99943F6C3A5D23E6512D03C1A8199C0DA49A92558529A79
38293DD9F8DE9E6B64D251E21862EF0FA50F75CB83D9F2B5983967212A79CCF6
E43AD39F840C405E621868B7C6545393F82BFB5BC6395F45230CC0C33E4D022D
66087BB758C39B5151D68F491E0A306ABA070C84C840B060F563131C2ACDDDE7
2BCD80139EAA23FCC6468A2D14EAB6A99218B369BB129B8DF799F69248C642EA
D72F2EE453C51F4AC191D1C5CD4860749F82A686792EA94B79DBF67F86DAFC69
2F3F1A6E1E28D5DF4F75228558C1309B0A93256AEC19CD259A82EDC3AB71658A
B1296716ECB93244AC296669B1AC6FBCD688B8BCF5A4A58A7EA48102BFB8047F
D8725F829C51EBABC10D8E69B6FC4A6DC9ECBF9571C9DC34A126025F8344F71B
7752C0390970FC9AD83DA92BD8BA2AF7AF912B83939E4C5CC1BB26FDCF2AE38F
4AFF4171657AFA3BE0241778EED5F3317B3D50994F302CCD7188FF5779C5F0EF
1C0DABF683EA8FD634E62B50882954B79D5E949A840B8B107AD2EC4DAB8C0413
33297B217507B9C3C80B5525292C26E297653C30786A108DD491063FC83A8B0A
3E240B3DD6EA72AFE8F03019E99B12C0A4DEA50670C27C82FD6897DC86CB981A
370A6329B848F51C69AD1A58AB940294E30DCA6E2DAA73F7DE8E856D6298A460
DDEA751799460919652EA24C7C96CC8B2A4114207F1C3A5BD2082C9C2590AE6F
9F51576266A8D0897CB0660C2F8DCD405E4023767B4B9F1034730F157DF3B621
2AFDD8F9F4404D63C42FBC31F962AC0A5475187B75EC10A7EE71836186819239
A38068C1B79D2B64DD102983937813EC46690C809F091A8281F13488BE852C28
13D3738BCAE6310E6DA9F72BD0C5BC1D0DD25F33966496C075FF191065F68971
6BA703E80217C24E6D8FD30CF2E4CF222AE8DC9F66349A1BD83D74D1AE9578D7
1E7F807089E29801D9EA77EDFC39DC5FB034E1C35B5846FE3AD25585E0311B60
E40E828ACE946A5E98FAD309F0BB60370C5B6DB8D9142882EA5DAA3BAAAAA64B
B01C78A7F9135ECA70F21C2C3F4462F60F951466ABF2ACBDF7550C18336849F7
28BA93FF9E3A4C308DBBBCAFFC9A3334C89775F85FE1A3A3C4C61ADD5E73A6AE
D1DBFDB74A5331981A4CE23A7D0527F8402C925850BAFED41B093DED7699317D
153211473A29319529E6D7370BC641CC66E466821B57085371C2FA2214F61FE9
5487AD1F94AB826C1B5654685272F4557141E421CADF217CE4CCC2264327C1B8
A53C44B727AF545A3B11E5479B0DAA7BC0430BA9BC812247D50ED8013723B585
81269C90FFA27C5A515187D340D0017EE1AF6B491EFAFE281F1F28D892786BED
9F391C8DEAFAA0164EFA099E8E7DB5E7EB46F7F40BF4FE643F47288F2B48327B
142885027307F54645F66AAA95CDF71EE39C34671930B056C7B453D144F66415
1013D6B8AC2EAAE5937EA8CFC48CA9D6816D30BCBAAB0DECC5C4FDDDA5DE3649
7D0FFF8B4BE18D9E35CBB356BA0087413F842784111039662154441C6E456234
7DDB50BC42FDB33C8110B2859AF86BEA437A4BDF9549861F7016CC1494059102
04D1F2925231749AFD9D515EE749FFCFFEFDD1
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: CMR12
%!PS-AdobeFont-1.0: CMR12 003.002
%%Title: CMR12
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMR12.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMR12 known{/CMR12 findfont dup/UniqueID known{dup
/UniqueID get 5000794 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMR12 def
/FontBBox {-34 -251 988 750 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMR12.) readonly def
/FullName (CMR12) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 43 /plus put
dup 61 /equal put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794D2DB9C535A5E57376651
F6823308463DC4E0339C78699AC82C769542FD3B410E236AF8AF68CF124D9224
FD6EE92A38075CAAF82447C7AF41EF96F3ADF62F76FB425BEDE4C4124E7B1E0B
8BF254D91912D3A99557F5427907A56514C5A3EB961B94112077FE9417B70DA0
B2E1C1FA3E1D6F01D11F640CF848E45BE3E205258E64FE36AFBD4DF4E93F6B1A
966C8E7FBE2CC8FF43C1F67BF6C361678B5E90F4BA524FE8A4CAD6AB28183E6E
CA6C9636E884845105595A2E40CDBE8D4807A81AF4DB77B31873FEB221BCADD4
2C4669459704CB58A7BC230FC59F867EEADE660E49AEEDEEB042BA9A7DD8193E
56C3A36A1F639F7EA512EE4BC6992F52C2FC82A890EFDA730105B0AF7B819295
EE00B48F64C2B5BCB275B1DD62F289CDAD4AD9B7EF057684642FA6FA6322C277
E779CAC36D78F7779CB6DE12638B3C65B70C6B5F8A8C6421A379719B8DD44973
5F52856A4A29B2ED37F2B1FBE6EF4B79B7C0CD6395C756A00FACD763C235914F
847D1D99831023CE1FD89EFEC83AA7E313131C0C197248605EF5BA773D0A4000
72F607551A8EA6F0FF19441ACA179177D1FF7B423FEBDF58B0C19CAE3C10EEF6
3538D8FC4762B77C5AA023A8186C40D0365A4487DC3564265B3DF908572DEAA2
57E29EC669DD72974F806EFF5ECAFA9ADF1F9D2A63087FB7BBD100F0F81C6FFB
B1EA1C9DD46548AEDD147EE64B1B4894972DAE1DC3E8569D6A3CEF9F9E46DEB7
547E10BB2959D374A33E47C58F1B20419920AB485F166062FCCC08EB5CC9AC88
F388F0C0155027B727729488E44CCABB7064A1432E179189C4627453C5231535
47D1F2B8BA43069696830CBB6E5F9A135CF22D3D1FE490A3A63C088EA32FF444
24A2427BBA63033DFE2E06DF8CE67949B6AB02F26335A376B57376814D2A7DE7
64A4347577EBE9A6E33DD2FC214A09C6D889C8FFBF1D567032548851B8F97204
49E215CC7D222F593E1EF1439ED60AD922D41E0E9EFB5CA48F2FEFF75AC5FEE7
FB6676D8B8D4DB6885FBE8B61B586313E4DAFB09D94CEDC0507E93000104F3DD
F83865A2C6F6A7DA8562BF86F5DB233CC9B53391273A1462E40876A8AC2B098A
DBADD5A160DEAC061F86A5FCCAB495EF8A9D121AF07928EAFD56F618E4EAEA97
CF89A3AFD406FC9DE1E9769C1E1EB83BB883786BC075EB5DA2692CD59C4DD7C1
7FD2FF9B18AC740A390C1DB38670DEB18C67721A1DCD502FE7368F47DB4281D5
459B3F020595FA3B10544AAE9EF786A0645FB7C9BB29D091E1432CD878A05918
1665643005BFD9A4B0FFD347ADC84CE22D6F9AD4EDC05E8C7179DCB360AB57D1
6ABCD200A4B4AD56825DC345984D9A3DE11CDA5E9EC1E5006EE4181E4EFE0846
67D8C27BEE8F84A1E01947E945BBE988702DEB2240C4BED952E433E5305484E5
71965D3DE95C4115FF78CE9EC18E323C599727C8B93CDFBCD1CCA780DB8C81ED
C4B5E596E1603624308972FFAE9A57B0EDB51FDDB6E23EDE2946F61BEB241345
2A192D8CAD53E823D687F9C64A70A4B4B703291FA6317C051DC6A44BCCE0288E
3839D726A8F2E39BFF429865E95C726E808E02CD06F36C1CC9AC77999F8E28BF
CE9D74B699CA982479E9D0DD98EAB24D29C981EF0349721D6819549A39413801
F80182D567EE316E2F0AB208068E15693E4C399A381BF9BBA625E597E6E109B8
16F3A84C8EC92F2ADE288821092A421A8D3B907048FE947230810F0777EE2542
29A3485223FEA079B359034F70464DAD2F0E420271A4E0CCF57A0ABBC20AB327
0CA71B292126D395E0D083B19BEC6B48A9DE2BF470C3D01A8C3F52075BD4BE02
A0C518355814478202FD4762EC542F8E7B9B1F7824F0554660CEB83E35635E1E
DF0D03C94C903ECB36B4948ED98B6324E0094EB1DF70863142D4ED3A932D7346
39D69F8F044B6084482D7748C27328AFD24A3A70B99D1F7D32CB984488672254
28B6A9E9DCA2C9FF6A1B311D72413404B3CE5428BDB7FF3C36357D7975184F56
FA6B32AD54C37D0AF7576663AB1397B80D4E998F0B4C4F6D90B483029EF2EDA9
D4C4204C1546EFF3100629453EAE01918D09FE104E626ABA38646F17B6A94CE8
116BC7A8D9C319434CA5B830859B4164DFADF1D7C3ECA5C78D8DEA930EA4AC3F
59DBBF3148C91A2E807FB934E3439D4F67C6DBBA9972854E6E3688E1E0A34B74
482217CFE031CD7B5DFEF727C3EF8DAEEEDA08F4C90289E62FB2AF2357EB2E45
4BC547980FD479101FFEEE477AAC6268DD659E8DD9E244676FD3C6909713B71A
323B211E571BE711D103FA23B5B9AF077D84E2D20FEE805E81D20C03501F0F17
C3B081946CD0FD577F00E50B76CC37CFA97A61B89C25DD43911B28857284BEBB
5BEC61FFE3A14C64BC5425A7A82326617F6F1FA4FEAE56071C9F559F91568179
46369B394A5CE96FB7420FF8AB7C61CB83492FA5AE4A4B0799578594C9EA67E1
E54498AA5CD6ABA34AD3417F04F5D8D664A7EB39D41E2D17643CAEBBCCD9C38C
C5C9541641A09335EFBCE0D276A54253EFD68141807A66F1DFEB4BEA5889FFA3
4D20BD52012206A9F8D3E0F6AFC03FDBBDF3E51506EC6336E249CEFB571AB84C
BDF8E471E3795C04E38A5306BA6D450D72E50910D1AC385BB06CCD4B8E433A32
5A4B7FACC976BB31FCAA1E62DB2C4FE06DDDE7367930E336B49F47DAD91C8735
9A35D80CA2E117E86B52E41E9278046ED923454989E48610ACB3B1663F197117
52659A9D7BFA561C7ACE0771794FC778675F83C5EDCB132AF124C7E6540A140B
E0A268836C73A3C746DC964E482E63C56C0D396515283970FBFF182F9F684FE2
655FD8F5D057D22246DDC3FD11B77552DB4D90ADBAB77BBB1FB1592129DE0AEC
F822D7D36E52BCDABBD560B403A5C56C5E1BE789C3AC049318C7FAC5E5861E42
FD66C3C0F46361078D7E036281682BCE9BBF77983C93ECBBEBA9B359769CA442
87FCA1B98F4EEC4935CC93B08AAADDF355C99816453587310F08C50B9BA3D107
5388A1F3AED2AE32BEFADF0285DA90436D1D7EA85D7B9B6DF2AC4B778CFADFF6
6EEE54D1A1C5DEE3CCA7EFF57A7C2931933CEED90CA26DAAB45E4388EC4DC366
B9E88518D6CF094861D2A59282044CC06E63EFB390A6DF4BA5EAC7CE39E1EE03
3D84099F5BE96612789AF3EDED07266EF10A0FC23EA1EA97040B6BAA63138B1A
A9CB8F5DED781260962D7618EDB200C3ED976033E8967A8CC676E9C11F74BE34
343A7ECE7EE97E8F76F7E95517A6D6163527406EF5A669535CB2BF4031F29046
BB2D0FFFB47A576F5EAB1D00A582965C56F28C00B3BB7BE2CC8D8391F789070D
775EB775437F0CD53DA840BB3575104B63E4B0BF14E3F14B320EDEF65FD4CAF5
8596DA491BBCF3153DED3B718F833D106432DF8DB8B8E6B34D5308C9010A5DD0
7E0E53260BB84BAB3EA748E8D72F75901604F80F4416920D69B4B983DCDB72C5
E9928F01A4A85954FD74578AE336C782CDF81D1EB7EBCEBFBAE7ED8AB4862584
397928F502D65139CCD582CF0723C5262EE54B9D2B8C39614652A8A90E1C3B65
7D26B99DA298FE4B9A7E98848F619C9BB4FF9FD215B72F99506F06355B332689
37D80AFD9F9ACD8172CDC51FCD3A759ACA0F7D4EBB07840840EE42C2D5B8B257
2C6DB3A7657B75F2F0B9730A20112745703E2D0FE709436CA6A5F36F59E64D9E
37C0A23D6D289E1AC1DA273872F5FC5C3DA2B127F078A4D7AB3FD7E124455817
DDC796D54EF26A1FBFD539D3A21B86DD4477DA49213259ABB3FF241424F2BE5F
89151E02FF87E0BEE26E85C0E518D8BE7CC9214B8E9A9EA1DBB49C6C212CCF08
90C0F23E9858947EE344062EBD9C574979087439975EAD4E85CD7BFAD3C91CF1
EFF577843AF1427D06CB2F3BB519ED1591974218C43F0D2038665F9E2E3960B7
FE68CD3CB2DB6B36C7997C6B21EC11CF1DE049541001FFF26D14C255E3AE862C
5A5701292FD2FB3D04523D6E2F3547923BB117718DFB6E6520F0D0B5450C695B
8C9242CC8671B7284CB2E1E9EB097A3DB1B4D5E8EEB93B4DC7E38C0A10474665
54DDCBAF079B92EA494F6FA75A84C5AAFE280284D0823D7C22249A21044BB0E6
4062074ECD17B62E03EDF4945A294BFEFB51F5FD870D9D7230FC91B83C1D85A8
86CDDF326FC90E04362145D6E8630C50594484FB829DA18F5C078F2EE67D2F2B
08DFF39AE2E8C9741FA989AE494C7166F122D2C5F71B97C973B7CE8500E9F87E
D59C30F2E99CC4D34713DAB680598F41955FBDC26A14CF1E73D6BD6B9AAC8D3B
B998F2D0D647356CD236DEAD6561389ED3A6746221B0CF15D6648412B35A6B54
6A0EF5BBB34AA376D9BAF025BFC650C1B74333CE85413D0EBB2F4D082A26A5BC
3C0A25D2B12CB159F140E00E262F1CFECCB2C802FF94CD34DA0CE9B4B3830FB1
DA85B9B670D5169928990A2E9CC869891CA2FFAD9774E6B92549644DAA5FE00C
A5BE4F5FF91A0B6D2FD8F96121D766391EC4ED3E73DADD476B7DAE1A50AFCD98
DB7E27E44D30416088D9BC07D4661D9ECEC0806830ABF14CE55AA3CA2DF66E8E
748B8ED46466F1EEB072AC0674FE6FED231E0DDA59ED7C42BC05EF00E176050A
C4834D893DE42474EA20DB1E25059E84BD137EF65A02CC295B0FFDE4CDE95879
0FE88BDF2519ABAE7F8CC3E6386ED35E04A14F1E3861922645E3A3F43B48A5AA
1999A5EFE192515FCC625C829FF5A7B337AA422F5E920545F9BB269C869A821D
6C4C26DD2AE746EF0F0B4C1E7E9871ADB5270E1CA9BE28225F7A0370D4C52422
E25263EE101C4EC1C7811B05AD42F364844A56BB91EE72FC8ED53CC6954D2BD6
F945D739BE4C61E36143CE890FC0CBF2F610018D678ECF7CEAB18FF5A0E48F76
FDE2463D40A99380D679B3B76D39C664F4992D23E5988B0D1AF33DFB04894016
E852EFD1EFFE586153C0F31ADBDBDE3F73FB49C5EE64D0D02E1504248FAFAC3D
903FD44679BB09C30288139B41B1E90A10139CA3172677250B16535A1F3E5E4B
6F4264DE58896E66051FC677030A121C5A285C47B6129CB5A3998830CE070D21
2F093FC1B44089F603A21F45F60960F134A47226874C737EF6C085634B0A4A66
139420501351F737A73F39D960EC38420BE46E5B09D298E7C16B8E32F01507D4
0141FC52DA1DE718D634AD9C8B00E46EEEF84356759324D2B9A3473C5DA38DE9
E30182B87F91B6A7F7BACF29A93B44C879CCDEDB063F9D2E51E0F1FC9F018FE1
2433D85AF24B55DE3A61C4D0A2DA4FDE933F5F6FDF17E9FA9932BFC46E2D71F6
585EEF5B2E4E89E797A24B799D7F064DD1A817A53677FC9EB8CC3E7F93FE50E8
D50E3191052943FD6C98B573BDD1F6D70349E1F8011599E3F8FDF1D6E80A710E
51E434E85801617C6FD8ACCF1B77B4BFCCDD35CB4C0367F4EB4D8D9DE8284D5E
B4F43E2F8320C2C5A9AE90ECBA7E65D377E91DB69FEF27069235366AD3E126C3
A73CE97F4C90BA00D206FA012C327FD69EE59AF4470A315B1799CDC0539BF90E
512C8FC3BEFE4D1B01D969EA9E3FEF976CD6E0FA4C9ECEC955B265CFD58AB8E5
F7371E479279EE14B689269205C5B506940606CF3E24A1E7EFF3CA96ED30AD6D
E243DE57690C3D69A401AB3315FA49E4BF4ACD4DD1CA39272533E82EFDD508E5
1C2CD286CCC5DE1202C7C7F654521750632EB637F918667E2233A43DF75239EB
F28F3129EB5DEE2FC5BFC331FF709B0FE9B327CBBCE98BCA2C861C6547E50407
1218CEBE6EB5F9BABA4F2E11BCC6FB553A544A567B459E06375102C69F8018DF
BA6A227CFB13E2D74E6A521E01B74F2963E9A0A1C9FD87A88EE6356E3BFABF55
BABC751D2BF85E6712E8EF57914920775906662E4BA68FFA21AD422D34E15578
43CA0568B431101A1194F8AB1EF25E886BFCDFC10F4A5EBD9530816548BC298E
AE4A0B6B52B8B59C644C409B4191B6F4203F52314F2675F02AEB65A72C66E92A
2AC703E15D8D381522C0AC30C165B822A9B8D18CAECC094EDE020756018DCF51
D0701B507519C4270B70D8CE94B436F640C15872F9B5B77892AA3D110E4D6A65
8F0815C61A5127BA25815378683F46E69E54A391A8675977E7DF9C2D4E6FA991
9F029E50CC2F266B31EE9F9F24452D5838905F330CB7E416B8AF836C5AC26AB8
BE2ECC6EA4BDAA08C30995709E225C21D35DB6369167602CBFA8DB2697635925
969002CD1BEE745DA2E56C17EF3F0C05E3847147F86963C37A221C8827195A8A
3D38993E4939AC915BFD9A212F5FF3F826F742B952018986F9FBDDB69C3AC65A
845F7F33C55D4BE60A1817EBBCA7E1538E8087E1BD5C083A320D52953BE65F31
E8339C612A510B59CE48D2EF7061560C4AD258E7DC59694493E3AC878246F37D
6DE89253EBC8830C6B209E818213C4AC4CF1F391AD91D57BE76FB0E2924A1407
E4A949C905E44F54EAED6419F13D59942C8079336A172D4758BEB5D3E786FB93
3CBE4FD2EB53E4E1DAC34E821EB30FD44BC6CB4298242C38F848FC23AEDC9733
52BE6F32E31E25F18301370F8936810B0566B664B042C7AE0D78ACF0A87E5BF6
F9B66E358168B2CEA30DCD940074F3ADB793CDB136161FE2522905E87B8E463F
95D4DAB7E14A3DF7BCCE8141C5A08FCFA2BCE9F2D1B05A7642E75877EB840149
AAB007CD239AE47AD115929427717F219B0A8907F0EC79ADE1B901DAEE87A2F8
39361DAB43DFFF69650F601B24061A9353CFD619FF9626F63275FD09A5B13BB4
8B3379EC4D147C41197E8387FC04DA7BE409524CEF74EA91DC066808A7FD0EF3
957A44E2503EDA67B1C61827479486134E922E560A673BF314D601C66003CD07
55569085AFC8428389A140EB976CCFB8F29E27587E46C413ABE2EFB51AF5913F
53EEB74063162E0BA1E24CEDCA320377D3E11BD374F0B44E132A5C35835B6E2C
D32948EF9DC7931D104C1385709DA882DED6458319F21C2329938396BC074106
CB9CFB9E0A915F8DBC8435F386917AC87A2BA45D857EC30ECA66FB4044F5439E
CDD556B82A0E43418D179AD883C85AC276E1190CEC242E3E1D86E725ADC39E46
BB6C47FE9E17E29F8EA81E870302A00D91434F3B7A05F243176E6EF1082541A1
B9052191EE5C2B8E94A2E02DB65FC769653CA8D1C07A13CB853544AEC7FC35C5
218DE3128AA31952DCE19C55C23FD69BCEA2C661F57B11B8F9E86BFA718D1521
3346E78C701A5E51923D6D937E62FDE3669B214D240538F069A100A542720A86
31DE88116DE775F7ACC2A49EA6C02A24408271A846990669F2AF60AFAB4C16F9
7F4E88E917F0FFDCE68F22998AC0AF2A60A73258C3A4BBC42A2F918123128195
196D0E150D79AC3CF4628503D1F3FC528265ED8324E56849A47B3B07C29940B9
1BC270071E221D355EA51E9942D3BD7F99816304FFFC8F5B036C953B38759341
ED5D7B9C8E6B70C409DD8362FD291201CC385E4A98D73E8518A4C0E544152563
82032FBD2FCB6E403D34B85ED4053A8CB619BDD4DE001F4C3007B1F317579651
E6D6662189CC2D95AB85D7473F65C5D7B4AC63B0FE928F3400035D5A9D443D0D
F3532B99F3AC26CB25EA3CD64C341159061E02EFBC7C033C05CD919BBD827A6A
BAD47EE10B9AECC871B76227228CA161EA7B61DABB252EF91E607AC8D3F85774
DF0B1507B60BF52E4E9BC0FD04400A548D553D4A6EDB247875E0A2E013685C51
D23EE8A56AF57025AD67D929CE8BE791BE91A4C4D9F00DB8B4F16252C04F7BC2
02236296A9052306639F4672E90E3B9DDE466EAC17E200523B2AECD6C05A0A83
66D4EBC86C0DF27B789D5597FE88BCDAD2925CFF60F5A8EA618FE867857D585A
CE25A158AED63B8FE391030C518693AEC75AC0AADD0C11B0065E2ABCF51132F3
82E3718B9A9FAAF727F2D8286177EE27BAD040C66D0D2D7C092B45D9330265B5
6B5C8E29F71C9EF548BFA4BAFAB242B26455E4B7FC1882D68E408D25E6F58EC3
03AE9B7A5F45D61E02D0AB82AFBE793D708ABEF45FEE865969895654C00A5FA2
093A297AE74BF625A96FD85F58FF994921C9F1276635C8CB65FECFEE37C77BD7
FBD692DBDF1079AD35F8A8198D63A3526ACB37FD5B1A169C2C259A224772F847
071A1688157E43164E168142F91DEBDDB2FE3DF3B0A54F2653C3D2270529F2CE
8AC7BE5EDB7A6E9C51385FBEEE9F0B4FD844410F7D92C1E65336450599167985
B0C415FB2B47AF1DCBA966661D7C34652338EDBBFA983DBB066E4E5116EE70EE
72FBE3AFDAA44FD62FDCADCEB4FA0CF7A37A85501B009DB0A1BA48CDF694DA8E
2161BD4078A44AA0609F2184E9F66F009ACC3CD45EAC63D7202E2FE95E5752BB
BE0FCDD62337AAF8B4914360874494895B02DA996BEBF261FD663A6EFAD8B566
41CA01BE1A9249610B609416C8294C5021D7BFB5628F76EBDA66BFF69982A978
56E3B7024F467B64222ACC35B76AD8A79082B9E4C85F452E4C5857AB5246E8D3
4E169936091298149864D4DDA3B530C93E41DF5297C681
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMR8
%!PS-AdobeFont-1.0: CMR8 003.002
%%Title: CMR8
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMR8.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMR8 known{/CMR8 findfont dup/UniqueID known{dup
/UniqueID get 5000791 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMR8 def
/FontBBox {-36 -250 1070 750 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMR8.) readonly def
/FullName (CMR8) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 50 /two put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794D2DB9928A7C95D3A6E9B
8E92F84CA0AA44461D2F4FA0F8B81C6F5B7BE98C9712BE166610465CF689DFAF
27C875C029C0116DE61C21DA0092D029E7DBEDFDDEE3D67E6936623AB53FA2AF
18BEDDD7AC19A19CADB6ED6CA7A26E6044BE414FFF59C0B98D5819A6B881F9AB
7AD0D03BDD5CD309C67811D5CF0B93F6FDC9AE64F74ED4E81F2E18D880BD842A
DAFD0BDF06300201C6946087FC0B999447BC370200BFB8CA420B668B32EBC242
6DB1546A7164CF55B332FE9D239B65F532B69EF9F4F93828A44C8F5C526126F8
B7A369114CA68D4F98638121F4E17F351723D9F1A902FCF087F94AFD23876517
2D15B482AF2D68C3F31FFA864E031596E597882578AC7FB0DAE2A713B065B374
3E2E72519ED6D50CBCA40A7275A7109A4F3ED8A4566AD8832890D3D1F4899850
9B757442B7EA355175CD5D6D8B4152ED2D7EEB4CE30F174FF672140354046A45
7098EC45B9DF3DF5CF7B417E201DA88308CEF4CED8E8903AF24FB8DD0187352D
25738519ECBC70304F8F620CC45D2586619205DA3955696FAFFE2082402B3502
CB682F410DE5FFE80A4DA3D3BCF02E35BD577D0DE55E7B8A33B7A2FD5136B5DD
A0BCB61F8E7F4363C21F890CF287304DDB8FCE7FE207C0D160B81E7EA662BED2
DFF8C444E19C91E72254257CD87240A70F1A964FA54ED9ECF27E27A57DACC3DE
EABB92C085030870C6CF5C40B6E47F5C0AEB30E84A73ECDABB2D754EF6EA28BB
16EBD6636BC288E62F4A38BFB55F5F4DD20FDD77D767F6CB52F9513E8EB75413
07F1877B2C01278675177499E4E8EB09F2657821613F5C7643FC064293EC6E9E
B519FFAEEA36B19C9D1302CF91FCBF87FCB57C5F995CB6712BB3D8681EB6F05B
B2A4195A3C73CB4ABCCFB958EAC533BD89560D2790CDE1444C0F2E4EF27A529C
F01052964E56F6D76A190E5FF45934BB711A3406284AF130D4DC0D8112BB3752
762CA0200CA262359D4F54C0CCFA9A50DE18C7DB14419E2990ADDC4A54B94978
D9174CA39434022FA77FB30179EF805E2189C35919F5EBE215EE2A00B4407826
CE56329C5586D8B414770BA5D45513C3AF1931D632FCE69B4CA504944E03362C
74A1177C6398A61A12DAA0F156543E2A8E9969C4308B7ACC21A5ECAC8F172541
1B1316A88C0C163E574FFD3CD22FF08488662FCF2F9344BC25D02146F36CA6F9
E2D0130C654B7485EEA9A110A33AA0C769121F81821E9A2BD062FAC158359D44
3F9D9947200EF1EDDD5860F10438B162A69683957300C75AF7546C70C97AB2EE
37EAAF0089E2623F787F252569B06C665FDB45EC9681C0774ACFBA76B98C4E89
7EB12AA5F8798FFC110B49C25E3A483ABE83B0BCC6DF0578403ADC369E013762
C9D08FC94D949BAE636ACA9F36F4E3F02296775A062077B011A705B6F1784D36
A926622CB3847533D7ACB24A4EBABB14593B5D8E1DAE2BFEF8A51835C8D4E76D
7543C126A4271C59A5881A5AF89331694F84489CA66725995DC3070F306EA447
CF30F63CD476A46D528EC1FFBFB8EACFA2BEEDCF54C92CE2BD26DEA5827186BD
3A4D1709415CEE7D51D671357B4A5D11E835F63521B9824EE5282E58F05A8ACC
FD249461181A38C2F47BAC4E79BE368D64F886AA493C61CBCB2ED401C8AFBA61
59CA6F6216D941A92AC52ACB3D7ECC28D6A58EF4CC70BA6DE23E80937AB38E89
6F05FDD15B954C0826636267EDAF9F2BB466BF79D2E10EED9B04297E6BC93069
79581ADD1A9D9FAE9306F46AC95B98C60A2E53D60CF1AA4069BE301E17E25070
F98DD67BD8642B1D07571A32766072E48BF27E1576FFEED300D7313A358A823B
49C8F135961B7E259095C9BB67F996CE0B90E95344F203922F47E11753F70D38
2ECB615403490310CEE6C03AFA97DA2F47ED47125D110FA69725BA0018F6A40B
29A307FDB3E52322A77A0102E6F57654CF1E96A134D13860D83AFA0A41112D3F
2247A09ACF7D06713BE443FA27C7E7220E875965D53030FE7D2D62EFD2F1DB87
5FB091FEAF599BA8C5167525899E578AB341BFE2BC4E53A047093168AE189237
EA55F055514EFA939DAE9E859CB5FBCF37D99484F44FE5AA5FA386B28BB642F5
5DBAF059A50FE96C7C6D834531D64F1F2E99AB2E96EE74D149178B1C0618495E
293973D9A03E1790654B67C0882376ABEC17D74785B3737D81644F28B3BC6FFF
F92FE29126995A07E0BC5EF3A4B93789A103C428943E045B8D1A5063AE71E806
568D48072E53DEA85253B01DF0BB7367A6BE4DD7BE514AD74E3F77C825ABA405
64DAFA25EAFF8F63344B5F6B523629776CEB090B546469F6A6008DE43072DD3C
DEF51F62731037D1FBD0C038A1E9B669849EB3BEBA281624F13D20B61917A109
A0A7871A73F7BAA18077360B38A4625C5DB9AB9E43BDEEB856FD0E2D3AA2E075
267B978B9EB47F2369302E87DBD5D5B422830BEC32411FE75D584C58650EFB1D
136FEB92B94BF8939FD63AFB7349C7511E5E46AA7324F8B1FFCA9C2A9E9720C0
A720918E8E860F137567D386AC29870FD990BD69465B3A3D2A0ECF2753578AD7
80DC87EBB319EB5AFE0B6F6FF8616EA30C51425FE3ECBC5F8D0B0BEFDEF32FA7
D168B4E85C804B7326A0942CFDE732B1171C643452B7099B31649CA2C38B62FB
46EBDF7180004C549B53F88021D029452C2B37D8C565BCDB0B11541039A13C0A
E45D4B68C7907B8BF08C6F41F564B62BB554235D50330E78DD02795516D969C9
66119D718798120442CB7EB9877FF84EC69DAE25F8559DCE3BD8042959F695F8
2F99845B1B5680DDCF181D806CC4903E077D1FF5E60918EB34C0B1E028422B71
CA63EFBF3F4F3CD813CE831EB54265A555BDD35AD7D723F9CFBDAB29C54F8AFF
2D35C6A3299E0A2DB470C7B141B1E3E10DABB7873AE302926BA8743278FAA8C0
DC6174501D6A289CF980A3F55F2DD5C3A514E7E7F13133C35D2697D64C25130C
DB78FC997968D6B3BC929E8A31B6D212C5128E4412632BC52B3A1049F7F2F61B
C74AE9A6AD19B9E2E240617E2882F7D29ED3A4279439107AF9AEBEE47CE85DE5
CE9595A96A118ACF1EB1F5929930321AF7732E351E18C6AD378508E37B4C327B
0E06AAE21278AFA9255AFE5C022034DA2968D260879B4B38E7EE2E11A593DC3F
CE71ABA050C004473324CAB6F3C50E85DEDA3E9A27388D8FD3A8F6E42A79670E
F7549CFAD4CCB337A6E0BAA4846ABCA059F1E1933CF11DC0FFBFF550CC4A1B47
CF7BCE0875FA747AA854534960F757884505A5AEE0330179A9547A4AE3E68479
7A457DE83326DC30B67F27CFD4AB697601CEE352F72F0966B3CEE3EA24683BEF
6D23AD51B8432C3F0DD0D0F80791E1091F38988B7A54E466A9AC7810DE8B7893
6B0AA6356597891D56190A7660BC7F657BC559E0525D41EC228078F2FBF89C6C
72D666DAD838CBF0861FBF0A1D4ECC069AA49DFBAE5C56B781A1D5D79DAAC256
13E3F9B928A2394FC71691E4355642764459714412D6F8EF803FC5F7353822DE
6CCBB8FBE5AA1F2C7F4D384039D85E7728527DF9FE0239E2CF8BCB7411C000B7
1FE660AE6A2A19229E5E8776CC83EFF3C27403935756463EB4721C51FE0B1197
86C2F17842A0FB639F28083DFD4F1E86D7D3BEFA922514ABF489C5CCE93D6F72
D2EAAE14F6CBA2BE4BBE7D7EA8EA19DB3A87350D4A52064137C3D15A5B05B03B
70B1DA7328D10713B83974C390C3270AF5A9A47C0BFBFABB9F31063B0CCFBB10
0F236C74446688198EFF039110F6FF42FA9F82D463AD3958B5FD205BDF85DE20
FE3F0C7AEEF350AEE6DBC1DE2E2DA4F4599956F59D6F121F7086DC120416E180
52DBBC4E56C09746938698860F30007091E1CC0351B43990E47208ED495310F5
7BA9C6AB3CA10A3F1B318FD47C1CE3B9FF1304321F9623E32D315AA9CE64B35B
F841E6C62B5B2488A311C94937879E5E0E170FA77AF0AC75C5E6E9F3E8F825AA
09C1702682E14FDFA72D27901C5BDE009B1E52E8C4511C6F6336251BD45261F7
401CA3DAE7C4B0CAEB91B9954BF4A97C48ECE7FAD401351D59DDAE9DA94E2335
74A2B880E4749D3D7026CB5299F16C204B6E00A20A6619C34922C7D3FB50F127
3157CFC08DCC5164C8023CD1B6C3556C73CB8E4ADA845339CA9BABA1457ECEE6
ECB9849DF1F0FEBC89E5F97C92978A500196520839CEBA6C0FD2E3D27BB4B4F0
93CB2BB565F4627C6DB62DD0E084E627D69B5DEF42EF094381B62C0D67EFD197
301B132420F51A41561E6106870147E0D597078435BE3819ACF0DE28AD779847
F3D2CF667DA06955D53E0204CEA2935E9E984E76963D3079EC092031E2A10E61
1227E5EE6770DD4D745A52655369EBA06A19BD7D95BBA271E488241199D1008E
36EA99F8DFD2A9F87B06B070158B466AA4C6EA3BA77DB0F853F0BF9A304EA291
34069714368E0B94DFCBA3BE5EDB6C8204DFA7EAF5C3406F60A7056407D1BF6C
CB85C1F432F97D821F5518BBA79AF8453A568FB2C2D025A70CEC75F46C545011
ACE3A99B2582793BA1DC655230AE2EFD24DE20A01D4A441AFFAB7771F223FA6B
9169849E727E494247F67D6E1EA9DCA06A082FE2094BD548AD7F08B565145634
E7ED832FEC1378306DDC796303392ADB0CBA130B63B38ED57B7828B47732853A
893E8836FE19CCF27002AE92C2B2CACFDF8A42F1B8066E033B965D2E9157FDF8
E1264B40813C1A4CE424274AA3528A4F09B3B53DD4D23789A68B3D17BC1398AE
0ADA2C2168427A49846DE0216908C2FFFEF4F13C1ECA12AD341E238EE46E6DC2
B71B54C52659632911F901660261E493AE2483D64E119D9924489779B62BC9FB
A052E822FD8D83178E09ADC825DF0DA07FCE7AD68EEB29FAA275A13691B4A5A5
B0BC0499CD6307610CD6209583C1152C559A2760823F8DC0B9B990BFFE7B7E9F
3969B968AFEAADB9FC0F1410EBBAA0DB979CF153F0B8C978405F8E6F2B6406D7
AAFBF4A655A15DD6D1E9A7EAE10EF89264659B09283F50B734236885FC09FBE5
98D780012FA77FCB19F15BDC522CC7312546C0730EF5225DEA8C22A3BC6554EF
4FE73B9AEB5C2F7DBD474221760E5F539A064AC450591BCF3499E3968F2CBD6B
F15BA2B37080A4129B66D4C2188524F025414F14DB3F96049A8B0E5EB2BBE7A1
AD64A988FE875FE4FE5186BB4F5DDA16983CB052D474B7D72F3E8965663EB50E
015C72407C3437142D3D7DBC055FA627139488DBC5A0F98D805C2143D99F491A
167E07AF60EC9F17C36289368D740B632CB919A0E74C412B76CE7A5906D5200F
9E79CEB9C65ADA3A0F23E8947E834AE7A329A9F0AA7A6BF545B1D7B4666C6522
CFF268634EA06DB3A82D91A4C0A9B227E79961212881A54A6762C335DE7E0831
130C45D94394D21C049B9D189ED955438C2151514F17BFC67E431DD9A8349202
2F616AEC1C7B19F63D5000EB4771370924BD4B9053FE78B5E4A244B9A149D66D
A8BF3B398396D2233E92E4A5FDC70FAADEADAFD255193D688842DBA865CF6154
C9348D590F3FEB135D4B7BD4D76A52CB140888247CAFAB25ED51F4D187041CA0
ABD956F83A5661CEC171B52AF92F9ADE27973B560C802E1E0FF51C4003D1289A
CDD09F8EDA8AFDFF666D35418CEADF3B0BE298F0D1E5C8E024D6A2017A7E71F3
3A9FEC9930F1118101E040339F9D41379170928DDF5B5875212B271DC843F612
E0C21C67263186E3D6929160464D4D5C8928E14D0845762C36FFBDE548188E20
3B6BAFE5EECA0385142F01216FB8A90C43A472C1D4447FE5C7C78CC088FC72E7
3FAFA062C338BDE8A430FDF1951B107D8D73FF9376FACDE5900BA362C66F8C1D
947F9545C5C13A53E4479B1C1A50472C05E8F8C266C6D4F4EB08E97B3B1BA972
26973B844545089C5732322BCC9A5A8FC972FA0D7DB8BD85D2F515ADE65DA479
0224F7EA2276CFED0B75B2C23AE7377F86F1F6F205D6FE19377D87E782143697
984E731F83CA888199CEB425643C259D4FB8B58DD69A96085198306494BB497E
FE7C9954EF35B679BBE3847A9C73507874F71FC97665E2A58BA41407A1745247
44A79B588D969D11CE4B863CDA655DAA53CEA5C3C263B345E782006CE9831D49
603D2D95DE9E370D617F5928BA416C362BB2B4DEF16A5D44BD24B34257765F3B
6223B3F9B54DAED69A90C7050AB97B06693D253C6894CBD7B497DA449F1D9B7C
D91B421891EC0724F59C82B9CB288DC42F2D2D7A7F22EE3D910E15953D7766AE
276DABED3820390BAF2700C4653E1C77FE63DB71A66D93ED293E25B8412A1EFF
809554BF04ED0DE83F7F190883ED793803CAD2C34A66524D3A580ACDF3C13B22
08F18905E7A4A16DA9ED2A112462FB9FFE481EC2069E484E8BBFC19D594153B7
3DED4C11762223B7586483B06BC164D824D1A6FCAE80A35DE0DB8B33396771DF
76DC5C05578EF1BE00A70BAF3D951A01C87328DB2B0DAD6E1B4C21F37D1BC0C5
A929BDE5EADF20DA60C4DE2E3C151005814F24824D33B95F700E09A0207EB602
3EF60DEB1622B91DB99A855A8F1DA96358F05CFCEDBDDDFC8446AE3391BEEC41
966E594E28D052DD5ADA49DFF65E79540EBE5329DFD86C23CC800F95221B9C18
CBBF941D2FA47EF1EF59A89DB5DD188E75EE94AD2A79E2221107E5992C00D531
2E00B544895A9204656867E3DE9D4CDB64B920B5CCA9A73E6514B36CABAE01BF
94C15603B86780190595560F792E5EF01650074EA4A9BBC6ED284B9AC2020641
DCBCEE0ED27FE58171DFE104EEE4202759E594159DF45113C00236127A46FB35
9EC705F21C0E456C1F0F924594C09AC64D4377C5FEEF764BA4A09ABA8D09DEB1
FC13B0CD202B2F04CF5D73DEAB65C36C2FA7C0DC236BEEF6D23BFFC9C493DC8E
1831F19EEF81EEDD976E43BAC6B5CED13F901DE59835FC75490EA528A72CEB77
24C38B258EC38B9E6B97F85CA8C10D8809BBE55A6FAA12456FCAC786942E123C
06D1E55F7ED04400088BEC968BC5081DC7A1B1B65166E7821679F76694F235FC
6854C8776AF855B83445D9FF919B1D80E98DE0741D06D6C5EEDB3E3EA6392530
F1BA817737D8162F7B3A36AC2A03190CDEC654383E31934C3E0A012B639532C6
26FEBE9B412F1C92D1943B7C18CEF510729D501349644C97F087F2F840074AE6
D8CD0FB2E620FFC908BFCD938B675A0A4A687F7FBE8F3DD06A62D7B6DE7DF3E2
49D367D60B10061EA86CD512F5A1BE8950D83C62695E130128E0037B62552D17
064319BBB9B1FAB9D79705E5D68AAE9B36EA14BF1A59A863BDB8DAD9AB5D7B8A
E30E2B499F952D65877C8E38EDD7DB29F9579D09E629AC188DB6A6403AB4BA3A
D358B3770D727A2B77D84B6C9EC17E29D88E3421F9B7D2D822EB78BB8BB50692
8C46DD6F9BBEF2E848A2B5669B200019802AD19661537A84D3514AEC5AA47445
2C791E01DCEDF18D9506367241255FFADEEA6183F51A9F42448A7DE413C08359
52DAD2A60FD606AFE14702BD3B0EC448720FE63438D020DEDFCDE3582FC31DF1
17B25FC152789D2F17FD60B8209D292D2152DCF8D28B5ADC04F6659BBB746CDF
145163361823CA343763AA951C640B5D4A99B7787105A1609EDD6A596EFC3F6F
2FC33D0D499DBE56C6668E137715D435D6B683E0113647B2765AB0F3D98AC717
5B33C3EDDE18506E73B4E392B022F30480BD30F59B2E3A59D93017296C3156B4
B5722E1955777716388AA987B2665669716F866FE6BDAD5E74A523CC03915F26
9B7B231F5D9B1F61DF7CB01ED3F27070E36547B263855DF5B2E3ABD2ACC440B9
0826E1DF4743FAE6668B61F72C8700992755522AB11C765981A9BEE0D040039D
6C2D64ABED527082C97CA606127AF5C0C98647BF46AB8149F215BB0F1087E62E
740D8676CE8A486096DFA164A37E97EE630B2A16FF4BCF31B9A630D93C278ED7
6D6003D463C33B8AB5E8BFB9777F0B3D3243D650AC5641B91082A85801F907A1
54CDCD22CDDFA0F5E255F1F7E04A621013F0F3841D824897E67DFC2F5AE51C4D
36411D26424AA9702018C26AE65120CE396C9B001DBE259A3638455C3F4949F2
BB23F04E53097AC814F9DD04F0F26BE3F8C2118311C916D2FD21628BBC018A31
021BC222B518F904ABE96333EB8A033D13E80033452B2F7C8F400CE65F0EAB91
81EF6447CEE4BB024AC35075D24EF62ED3E393401BA04C01CA115E0231AB
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMMI12
%!PS-AdobeFont-1.0: CMMI12 003.002
%%Title: CMMI12
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMMI12.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMMI12 known{/CMMI12 findfont dup/UniqueID known{dup
/UniqueID get 5087386 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMMI12 def
/FontBBox {-31 -250 1026 750 }readonly def
/PaintType 0 def
/FontInfo 10 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMMI12.) readonly def
/FullName (CMMI12) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
/ascent 750 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 97 /a put
dup 98 /b put
dup 99 /c put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3C05EF98F858322DCEA45E0874C5
45D25FE192539D9CDA4BAA46D9C431465E6ABF4E4271F89EDED7F37BE4B31FB4
7934F62D1F46E8671F6290D6FFF601D4937BF71C22D60FB800A15796421E3AA7
72C500501D8B10C0093F6467C553250F7C27B2C3D893772614A846374A85BC4E
BEC0B0A89C4C161C3956ECE25274B962C854E535F418279FE26D8F83E38C5C89
974E9A224B3CBEF90A9277AF10E0C7CAC8DC11C41DC18B814A7682E5F0248674
11453BC81C443407AF41AF8A831A85A700CFC65E2181BCBFBFE3573BF464E2BE
882A715BE109B49A15C32F62CF5C10257E5EA12C24F72137EB63297C28625AC3
2274038691582D6D75FE8F895A0813982793297E49CC9B54053BA2ABD429156A
7FFCD7B19DAA44E2107720921B74185AE507AC33141819511A6AC20BC20FB541
0B5AAEC5743673E9E39C1976D5E6EB4E4D8E2B31BEA302E5AF1B2FBCEC6D9E69
987970648B9276232093695D55A806D87648B1749CB537E78BB08AA83A5001F7
609CD1D17FFA1043EB3807AF0B596AF38C91A9675E2A53196FEF45849C95F7DC
182A5EC0EC4435A8A4B6E1CDBF9A5AF457564EA72BF85228EB6FD244F2511F5A
CA9B71A65D53CC06EF5F7EC3A85106139A4D312378BC22183C09A229577B793A
1B7422611C03E84BF809F46C62CE52D3AE29CE01C32B202ACDAA5B72733EB0AE
C31D7EF7BA88D2D14F85313F7A8B9B7A5B124B03AB923744D336C969E5CE304D
3AD977A46664479EDEFB69F113024E761C05FA48A54072DF9E12C2F352ACB3E6
D04F6EEFFDE209E7FA3DA22E5B1D1409461F4286B7F4F8251B44E5CB7805762E
E129FF4A06A7458F3191926B1CAF70E32C6571AD2DC07C34FF62840896F4D200
761B1A7FA356526D1E3AB4C542AF13623BAEB9F61B1BEEF79A9205B1FEFDAE24
8799D516A9ACC30BC0139C63C9A0523E9D5439213B67D490C96F902958779B8F
68BD8E9FDDCE8A3A2E35877DB6C94B7612382ED8F218EB1157D2ADD090A2448D
10B99FBC9211C5629ED1C61C74FE93041E5AA03EA4AC3FFDA00C2B6E719CFAA4
262FE17F66804A6B54D3669836EE4367D2A2991580C5564463C973CA0DA38AC6
922716E13B4A807B50304B8826CEFEAA47C305FC07EB2AF25FA7945797237B16
56CDE17AB0834F5C97E0CC5741B061C6FF3A8DD1A79B9A173B66A6A750538E26
32FBC92E75BA15CFFE22A7302F47908547007402569158F62C29BA2956534FEA
7DACF1E507AC309DAE8C325F2A6023D2FBD81EF42146BFCE6A16A6310A650460
7B07BB7647C8760FADDF0DBBCD3DA6CC4645D1732DB3A22D8B76E1D2D48E4D4A
46F4BEB80CE65F3517283A1AE08391FD1C10ED452133706BC6725AABC80107FD
754A8BA47B0281D479F052CE26A723EFFACB79B213041A536542AB334769A2BF
88505D82C498ABDD5A73EB539530F47CAC52825D16A969C8BB56D4A7F2830B8F
CB63B92B576E7BD922A4B25E634751F8A3B7C4EBAFCB373EDC8B8281B1D1371A
7844E9AD990CFF09F0D7ED73A5CF873D2D5C9E8A9923CFA31E1A4B4CCCC40760
8B3AC8FC3C88BC08BD7407725281BB879A1A822D94997826418F1B89D303F2C0
BE7A0102E6F529630CBF1BC5BF3E4578C164A3DDE45E62A957EF3FB7F0FBBA6B
CA1E79A1ED195B6A11CFB345B663C5E72FA55D80476F604F6C4257B51686AE25
8F7D159FE605DDA0AC74BAA5034F29FFFD403070013C6E2D8EF6A0990D91173B
D5A3AEB98B64E412991505C3CB7C2CDE13C091FEB3DFBCAF30C4C19511102300
135BD5D444BB55692013F52056908DFAB2ABFACE81A58423ACEC59344CEF7D4A
C5A3EFFFFF70759BC3E593D878281225060B97D1BEE6B26EED90571FEAFA1812
1115C0EEC892F5DE6FDD68321A0B3F10A2D771B79BD85476AF6018472A499A86
07D64CFF4550866AFE590C471C80EB12CB3A989A60BC7BED39097C12D9286E39
14C7952C4C64820B4DE44A1827B7B0B535244E93FDB80036D6332F90F95B472D
7031E7E3819E881BD0313CFA112EB3AAE943C99C47635CCA7E34DC0306C04E5D
2E9F60FF037EB11602BE74E8E6B711392E866E3E55D988F7C856417A2B9C186D
639819B4786D039B77F8578EF63C088FF28BD08D8353031445C8498A8F445BC3
D08923D32AC04BF3CAFEFCCC1E77EA894F4E846F47EF62D6841B8D8576FEAE8F
90044626869D04D61D64D56E8C51AF8C18D6CC3FEF3B6C4F7D56FE3260354948
10104F69B117FB8269292579A7D52FED688C663B643D8D99F13956612271073E
1A337AED059B7A93819A28CDF01569CBEB51069D22ADAE25C47355560F402B2E
8C9900DA82B79C64497C8494F42FABE5AC41791C2010D98FB7E593C744F250DC
D837DB0EAA4F75D0016970F3AE8359878A08CF9A697A06C5EA945819151265B9
1A12122B98F79185DF852257BB4798E7DC03712EA6ED34F6E6AE1476788DBC33
9229FADB8D581BE1A63F596698DBD6DB98A092F67197A4FD4A50B648F2691875
EE2495D6BB310078F516785A0CEC7EB6E8305FDBAEB1D15690409FE32DD9CFAE
DBD3866FB63EBCAAB73E3E4BE5D7F3AA44793938AAF3F8341683F0790F1D46A3
60CE083F9BEDDA22E0639A92393960F86602216FA51E2754BC2F4CD0BDECE3D8
FFAB7E0E49613DD4956C9A10AEA798BDA1F756C755BEC12147ADECAB0FB73B7D
203A11D84DD2AB5AA98FD38C1C2573570FD49A4924A94A106D2A7D850E793608
FB135853E8C4204441CDBE697FD0CB330B1C3596F32D2BCBF263237EAB362D09
DA6F531B40384DC91F30674760CA7B64BA1968F6A7FC9EBEF431A1AFC5E76D7F
2D44DCB7F61C7F6B16196B3E8B47343F572DBA8B8B21B43E35BB6B2DD5C7982D
244FD4304D254D6CCB5E8CF70E77F50812F41A988EEB3B26BF0F6F69BBA18077
31134B5A5823D10FEF6201D045AEE7A24E0F25376E9FC66340C56C05F6CD810B
724D85CC4BB8D789834A447CBBA159565D08BA5793D8599035BB5063271518E8
F6C50E7DCE71B1D186270DDC860C6DC0CD506010EB5B1FDF6BE47A9A18CC15D7
D657E58BED9EECAD5CE5D49F63139A39BC52C6584BB2C3264D51BD584B40F8EA
AFCD8B83F548594386EB2B05CE803105E84931DC6E7A1398073D48E130E0D907
CD0F1ECC3254EDF5D4DDBF44415DC9BA66C673820CDB0FDF033D59BE2B5EFCEF
01FF9D33EDC88F8D522E07F1689D024DBCD09A16A63519E1764C8630FF36058D
CFC07027E0ECDA01E0E85B166C613B22F587B4D355EB018BA93E92A36007B4DA
287FF5A91F7D8A0EDF5554ACCF45AC8066E88865C5692E63EB99CAC81367B605
8E6C19EB98EBFE0D2D161B447B9A70CDD1122C7B78A413369016E6D8481E2AE9
9AA97B5DD0ACC9B0820F7742CEB2F46F89F3E2092621969A88DC0156B4F941A1
6BF1546D4B136657C47B082A8A35FE96016BAF3D9679B8C32EDDD6AE6DF3BFB5
7854074FA019707FC22BFA82299E72ADF9A980AE29A8E2434277E58B01F6B03C
192E1E25DADD49F6E3F69799AE62B56E00B60A031BF8721DB8B2CB6D4A4C15CA
AB1FDE010AB7DC0DDED977389B101B8E53A949222FAA126656E02817DD32B0D4
A49516CEC2B97EA7C78FD66229B044EB92F502384BCC6CCDFFF995EABE3BB7A9
50D5D1AED861E7D3BA8D333026C673C5762712E763E59261426044583D789C67
A606B96F97663F92BF104CE02FBFDFC521EC0D6670B7D4F85A229F51426DE912
3B729C4A535FB7C88D0A5E78074751B58885DD6BDD2DD9E9C83F105E8CF63DDF
CA7DB39D0319CA7CC2E73F42747F007574DE25AE1538B4D493D22D0D5F0F80C6
5F6FA3937C8391DE2F0116F81DB2DB0EF751EC838A7F85F163A6F48804E84B96
8D715EF25B7E2A5CAECC558D80F421052A1D698F3B8452AC27E30A4E6226E3CE
084C8A83ADA0818A110923CF7AC7AD4CB92AE4ABBE0A9EC1FF935FD02774C1F7
92A278E513012AD17722A23C55EF82E18F8847B5CCE47F4FE3EC508BA563F7B2
AE56C94285A18DED4D432FB0CEFC05A20BC17DDF9FF919C724810A8ED7358A27
97EC93C1A13C443A91947FE1F6F528EA7B628917FA7E554A1D7B31ED46C5ABCF
92BA57961C8876DB4041305EBB029B03D8351D5E2819FF87E97ED214D8F1CEF5
7F7668DDE223721C0B810F4A4AC81CA4EAC86EAE546E1B15D91E626FB9A31824
5BFF17C4E79FD56ADBF6DBF01BAF6453A81EBDCB38A5FC0FD0FF0646B3B0D199
13E2E59A1B5CAB6DE5329BE389BA0E2A2AB55CA40B711ED746C24F1E48892E76
6DACF7DA163CDC90CF076763008E7A899870CDED5A80758E6177BE6B93B07EB1
5800A3BF7B9AAC3FA825CE594EF5B7546B181375FA8F37608DF17856D2F8EBD5
6030A9E6F6BEAF224AD2AEF76D03B023E2FCB922CB8E3C6816AABB61FE6E4F83
F21B4935102C860ECA03DBEFCA461F0E5B93E5A8D18440BCF7D1D6252A24CB6E
A64FDAC8B67C4888519AA368D9C4A8C08C7155DF5BACD75C5196C571C3C456C4
7CE8D90215FA6EE8CDD72C48740F7F5930EC3632DB63A9C8D2DA125088C0F05A
9FC83D16B7F53163F4EB6FF372C6C3115F1E68EB35967D11126EDEDF0BF80817
E68A698183B3EB0A207DB43786E1B9D289359D75AD5E465328CAA90E712C2962
AE2A466173F2FF30EB535A6054BB0B875DC8552C16B49DF17CF84D98D35497BD
F55E273FCBB0C735899529A69990E09149FBD2DDE64B7FA8D50AE83925DF03C8
0B63EA158FBABB12A028803DA4B9DD6C48C0FEC469C4E730729F4BB420D5B003
1918B4AE9CF35CFD31E8E62A44C0484E3D00143BF1D330235E821E5CFEAB4D31
7CB4604DB1F310457FCF9075A3527279644D908DE847CCD00B6F50DBDEF91D3E
38238CAF550FDCABA2C3A46237218DCC5A09AFAF69997E1EBDA7EFE6FC99ECC8
5D4AFD5EE35FE2346BE79B499EC8EC436868154A947D13BC02C780EBA4B9E64F
3026F1BF5DC1F8D64FEA1281EA40B4BC355638A3A59BD9055BCBB232FA45EA0B
B405131B64F105814019BC55466EE78E9E9ABB62DB30EA452F7EFD7196C76A85
15B2CFCD89922CADC0F392B0C54A231F3999AEFB53C24EB0C63B0C8A1A1ABB6B
AAB2F93E5ECC7AB90EADA320E918106BAAFC1F8C425C617639984629018BA674
6FF4F338AC43E23BC3740542911C058D43A49A11CB3A0CC8E3088BB5BA6048D6
CC2AD250DE956BFBE83BB24C945C20D9C22E7105983F284EF478F9B68BFB0322
EEB7D62802CBAAEFF1C2332159DCC7243EA40CE15C734EA905E04C476B178B82
A08ABCB0B86A7330C75E62EE7844C9E22DDB013ADDF20AFE08122EE1B930A81D
806A0F8CC584CB7FF5F56F9B35E5FF78FD93E7E4A40C64537464EAA275FE88F4
461FC6A467C8A69B9A9FBC10D44AC1B753D313A8E7D97F5FAEB60F82855658D1
4DCEE043C8FCDFD8A29DD091F3BA55874A458B2B8989F35055C72FC411382361
9AADC717E602B48D7C9521D3971A6F7EB19D539445DDE9EFBC5B58FA9E5E426C
172C45CDA24985FC4632287FC3B15849DEB56F5A061993AB10A6BC59868534E6
69888175053108B77E4978D971B4EC57224C0F93EEA4C15AE92254140A94704E
ED5666FC06C5341F643F779CC88A9E81891565C63B6F7F6286E664F4E0A48690
356DC96F1B98026C563700772485B83BFA06435D4E0793EF822F423C93FBACA0
E5D889D2B76771C6F0EE997A5DB43C2F6921132890406E3C33F6F159B14C5D78
7C151BDFFDD02B697315F191B5490073EB418A4FF2A398C68D44F0CD1B87CF9C
B52F12728B72F94D752D23151196A256908135C87991E508B8906CE2539DCA8A
31F86809C8C6C18A09F6129BD7CDC6B37E76B648788056851F22BD3E3B5772FF
EC01D822B57FFDB3BAE624F05531292641FD6A7E3666152D18F6C653048DD7D7
98A942C840C4A0FA662F260B21C64214152BB86F03662A330109C5AC0A5EBA30
C6201F558858130703DF76AF4FBBEE069BDE45C0D9467077D85FFED4F9BA9C61
AED87D67CDCA453A6528AC5BA153E1039D9CCC556CEA5CBB542265FF54A1B208
E0E13740E7E7C26AA00AEE909F8F3ADC2726081A744D8EF6BB711BF5F611A900
76F91C26A338DA13A7160A9F42410CCEB3190000D963D036FDA05A29F598EF40
8FAE6F8E7E6F50C99C3304A573501C13A00023085F057DF331E3354CBE65D573
CAE73BF15B3B96B502E0AAF2B4A86237E98A997AAEFFF4227D5A26E8972C48E7
761F430733E6EF8AB2D903C17FAFBFA21C25F8A0AC157D397BF3CC1AE7598F0A
2BE4FB46B29443CE57F41FD5F91122E9D86F903E94D5B55E2BB95949C156D138
89883BEFD634311F9280C7F028DCA6408D3A682DF5B55B9F7ABF08F019190F60
D39E4F0E80F0594235B09A5320109638B938633A2C196E4ED2B43DCD8643C3CF
C6123B076B7F73352F906D96FDE0FBF50CCCA432712C574D5857838BAC30B485
D25024EB254A7EFE57D1DF0892C275CDB3DF77602F0FED0FAEBC644BCACA04B8
B424DB125E487794CAB36E01B5E1A26F5E1E97A739AA36D77A12F5B45338EB39
AF36CEBDED55DCBFCF497FD475FC6BAB5530AD6153C6BD982564EE8712185F1F
D5EA7ADF4104661168A01994C1FD773A50C8AD6A3E4D332E4D59521BB8BBC6C3
866EB4AC3EA4532477E6CBF6BBF0860031C3B916AA25E3492670EA67F55CF4FD
207C684A0DDB6F4AD21B2909CBA71BCE2E762012B0927BA72367A6AE0AF87F73
756C9BC85E4EDE35317E2CCCD138C02C7A8013AFDC1A48C3A4BB8EF257BDEEA7
60E012F54D12D31D18DC59D5E526F12567B8688B4B67E16B56713870300016BD
A3B9DA87FDC865246AF8E94316799110D86B1DDADB8A673402D4226C519C058A
1D1E5A5778584FC28AF12819B1924060BC4F54B1054EA6AB0149E04B8C4302D4
A56D8A347EB5D3D2A0E12CF7E35059BDB53D9FF6BD25F6D9619BC4669CFC1048
C6C9978B8751B840F27D82A69075832BE59F55C1737CBB1220FB8FF691FDBDF3
03BD7D225A9372AC221C38245E48320E1CCF898D9EEDD678E5B8C65B7F588321
1A3953EEB9B39EA9A8CB72DB08C3E9234DFFF5FDF9DF804C021D57E97DA7622B
97F4CB6E0EB640E0DC9EA15C5193F92A3A7565F4C7A4C9CC327F7CD2C44900AE
D9E76FFE62FC37FA376E77131B566AE67C3E09DA80F198BBB995EE8FA47EEDB8
4B467C6C7DB8AEA745CF8C56B8BE56534E9C56FCB2B7006426DFE93D728FA4CF
94F131C549814E54ECE7C914C5FE8E4961D3437CE7475D03534B62650F551D97
201C794AA877445DBEB11C85ADF6119B05360700F8CEDE4766E3A1D7A35CDDC7
9ABF7C619E3868A39D1852DBE1EEAF5D7898C78323873AC005542B68C43C5000
CC58F675EB595F87C879694751494676465891E8A897158B481F11A171CCBBD7
29603F00210CFD7FF31FE3D273933ECC34AFBCC4108D9B76D9ECE63EA06CF939
4799092A54A749DACB82C1424E9879672C8BC084C360014C9C1B6D5D65C68AED
66CE329C3AD712C0A36BE7EF03FDF339CAA2E0336D387A693B1DFAB5D5164E31
14755A158168962C9B399F8F1DF3FF5060D7464D5071058C30C572A2BC7DEE53
84BD7614A4BEC4C84E18CF7EC81C811724463BD46CECA5FB57B0F55EAE20CC74
6AD815D1897B037C197D2456797B992C20C70B663BF99FE28C513B4E221C8E12
49779F8C0AE8517048ADDF7CDF0D698E3EFE60071C4997B7F5EF12B6CB65390C
224F13FBB99FFC034C0710F05019899689B6D3350BBA65C7CE7C2AB03D81B9A5
5F3D65E4D462DAB189006669F7390A78A1B8908A4C913B15DB8827DFF15BB9A4
A6037DDB643103B937257A7DAB025F09D53FBBC2BCB6B0BCD8D56B2B2784E498
1F6CF8470DCC892AD0CFE11578718948BABF9C142709013933E3B325C8685C61
048660562D70CC0055BA8777786CCD161049903DF61A5AF6DBFB02668AC5DE57
3D52C3FA13DBD74DE4AB848DDC5DF11DA16E7AE728A1B19B8832EFAAAD7263D8
DD78BB34C58DC2439747CC82B1937B920E8500DEF5293C01896B10A6DA71A168
4F6DE6DDB7E2910A0D9226ABDCDA689F20A867450D5C57181D23CE3779136295
0FB6833E98F45B76D98F7F115A67578C90CE30A316B3A041849901838D0A12D4
7F8BCF5CC5768C0AB33CE1B23EBD4E3C802D8BEA7EEBE241E7C7DA1E4135D3DB
AB5C51E5FFC0F527C5B59A59FE5C3360A0C3CD978DEC483D4DCDDD173894CAB7
0B73187E5BB9C5480BFC02FC45F2B1240C294133F7627AEFC03823146D0735CA
D73632F8EE970DC0EBA43D2C700A1D5DFBD179A2BF9BA6CB5818D72CDD90E52D
FACB64955479363CDDBF4C141FCFE9A9A2D73D1AD3D3FB7699F4A04B5B078DBE
76729D694396683D4125C68AB8F0DEBA88B876C71B13A737A00B245A1571E9CB
B63FB2EBF35B5BA2F0E744ACCF23EAB3C9E0437A2F11AADC43B5D23573EDF779
8A4397FC6B28F7DFB72F5895A6BBE071E3442C0A00DD938476920CF67869A9DD
F5A29AA5030369D13477E95EAA9BBC038E0530B2AD398A9B03C8BC5AC4B184E1
3F3ABA4A18487B10878E9D8009F85672B756BA24DB51A2A131B516923D5CC746
A429FC5B2E565CFA592C54A42801A142883EBF015FA81AB52E34F91345BEBA6A
CB555778CC267DEA91A4C2179322E46D3E61F8C996A63AA3D616B447B0D88B53
37ADF6E4CC84EEA24F77BB33582B268EED29D4C4A28C745F663D97F370141456
A5DA72442BDC46D862F6CE1D7408EA2A22AA7C602BE0B0A43D9D5C6F50C479A8
1587361F7897A2D28A562A935226FF823955C3AEC37FCFC416D861B0E313E938
7668640FB271BA91799E6A004D436C27CC46EEF80FA1A05AB90D788643BDAD10
366C6192D003985BAB6E49DA96211DF7CA971E34661E17C5DD710E6DE3B94D85
3362CCB1538C5D0664BDB72A57757B2CBFC6F5D915C260859C43D16849F29A1E
78AE53B6B477C24A622EBE5C0DA2A9745F1B53F1FBB54E46FF405BCCB859F8A6
83E2B84CEDAED3264A1C2683C4F28A6E0B9E86433E56DB72AB068F56185A95E1
B0429A0F9DCA37CB2C9CEC2CBDBDC9CD49C47C8E31E70FF75FC4E34D15C0BBFE
D0EAFDFAE2C502881246F7254CB4F3A196D257CFF8AC01064DC59B43DF12DCA6
26F8A2147DFB161F8F98CC3027FB5FDF901190949B4B6A3297C9891193419E3A
48D571DEE01E6C1591107758A825000F27BE974490F2C2A1EDF171B5A5F7ED24
B33D2C3F965E6C31138546BB8DA583B835BD8F8D290BD895D061C711128C794F
77BD223CF144C0FDBF1576BC1C236F66A3B79E7942082A69DFA7F1756D39C28D
5D07475970D8D7A6DF940E23FDF870E2858CDBC2A3303984E8B4733D35471A43
C4AC733BB92B64091D3187C8F9855C044F5810B772FE37524027FB1807E2EBB9
5CBC2A6834B6D297D934C7F01CCFC190FF085E5DB40B26A4E0D9D68BA661840C
4858D1D3E67DEA90A16FF693AF98E2212BCB115345D433ED23F7B0B9A7414BA0
6EA5776A594A9275834F2E56C9A5C9BD35B8B288FAC8AC56D0136C16C2109C87
627A1CFEA2A6707D6B09A863A2A8F766E04C09553BFD0F222FF93038A2BC3C57
1220FBB27843BA1D65F542D596F3647FFC1E8D9BE2EDCF1873856390460A71BE
7F8CB0CF3CC477C61D0EF5E89EB39A06E8C322EDAD6BCAB99554EB604AE9B420
676B67A0636503F0949A1F141F46509F7AE95D1D0B409776B0860D37B4FA3E0C
E6FF00F936211EF1AC38ABAD01C2317FC6A4D4FBFC6FF61693FAF103AA789DB5
CD8C7EC326A40898478B978A43568DA020E102EB0CAD13C8D90F22B85F906BFB
468FE4A7DFA95B3E6FE55B87C57D501FC75CEE35943667F262AF45A7D282B83C
B467194A742A66616D45C52B75C58A1E47684729FB3AE76BEFE23D26130E772E
75A20D7554ACF7D000D4FD4E00749C2FE2E9AF9BA8D180D36C99D7686075533F
31A57D0FA9CE7F0C281A34BBC6A4F3709F9F0F3630E9074AF0034F72DF503F56
70A3E85C6B63FD307BA7C3C9CC3879089C952C844B5EE99EA0CB75B87F44C939
E7897031B58295A4D79B5F6A8FA4105CA66FC686F7ABBC8B71B0E8FA6C80E309
9BA3D43E77C451750FB5A05B6728D3128630815A2C13DA962953BD13ADAC8ECD
CAEF72BEC5F112521A2E39AF6CCDFD19B7BA417A1ADFF4E69144018357AEEEC3
D27861D474051303BC9C5C6CDB4950E962E4D2CD12E0DE5701AB65F20923319F
423C16B85E2905B15D6A20C60658D61E614B997EF38710E4CB7D5B937DFD9BD7
D81534E443B3D4D82F05B47F6D8DA281DC6418E160627773F4309F2DFC5B1262
2530F3292718BEDF4BD800D1949CAFC76ED75D91874EFD9E2D887BD03D5CA607
F7B627F8F49D5F1435D2C675126B0D19B08012BFA09997DA0535817C62FEA515
3AF187EAD3B25F3AAB28B9092303637DF5413D003184CF51A9C15F01ED0571C6
D3DB849F8F52F990859F3DEFA918269D7BD2DC643B1DFF7E793B8F007A3702FF
D757535E544F142145B1FBBEFE173F955AC3D038D929608321877736D5BA17EC
0C3626DA761E04D1
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: URWPalladioL-Bold
%!PS-AdobeFont-1.0: URWPalladioL-Bold 1.05
%%CreationDate: Wed Dec 22 1999
% Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development
% (URW)++,Copyright 1999 by (URW)++ Design & Development
% See the file COPYING (GNU General Public License) for license conditions.
% As a special exception, permission is granted to include this font
% program in a Postscript or PDF file that consists of a document that
% contains text to be displayed or printed using this font, regardless
% of the conditions or license applying to the document itself.
12 dict begin
/FontInfo 10 dict dup begin
/version (1.05) readonly def
/Notice ((URW)++,Copyright 1999 by (URW)++ Design & Development. See the file COPYING (GNU General Public License) for license conditions. As a special exception, permission is granted to include this font program in a Postscript or PDF file that consists of a document that contains text to be displayed or printed using this font, regardless of the conditions or license applying to the document itself.) readonly def
/Copyright (Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development) readonly def
/FullName (URW Palladio L Bold) readonly def
/FamilyName (URW Palladio L) readonly def
/Weight (Bold) readonly def
/ItalicAngle 0.0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/FontName /URWPalladioL-Bold def
/PaintType 0 def
/WMode 0 def
/FontBBox {-152 -301 1000 935} readonly def
/FontType 1 def
/FontMatrix [0.001 0.0 0.0 0.001 0.0 0.0] readonly def
/Encoding StandardEncoding def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BC2C03103C68570A7B354A4A280AE
6FBF7F9888E039AB60FCAF852EB4CE3AFEB979D5EA70FDE44A2AE5C8C0166C27
BF9665EEA11C7D2329C1A211DD26BB372BE5822F5EA70D99EB578C7BEFD44CDF
045A363056E5E1CC51525EA6FC061DCEBB337208EFF729802376A2801424F670
0E7E6397B28F15BC10B40012B0A3EAEB2693E8F7F627C4C9C7C6C5BFF105C1E4
1B2B9E8F09253B76040D268B80719E1B3F5A55AA45ACB42B05EEB99F8B643CE3
F4B6449ED5A733594F70CCCD7BDB073E630C93A502476CEBA5741BEEE5938FCE
3E77996A2C56EBAE52B2701DEBC95E363E995ACEEDFD1CF8EDC72768951885B9
84F82225B3BB8E9522E784197B8AF13D70B2CD113F7501CD9333EB9A28CD9D56
824E9A3A689741D4577777676015723D17033D2815122B32062451E15DD271BA
6831FBB953F03DB40513901CE59ACCFD6C2D6F05E2B6C8AAC7EE97D4C56B8F52
BCADC9DC83D5C7C45F5C6E60DF9F9471D42B1D6F45EF98EBE41997BEF7D56981
8F9AE898AFA16089A91654ADB0AE2631539262C43BC5206D6CB73867B19EDFF9
024F9C3C7D790946F34742A688BFD183A1307649A36F782DAEAA2D8E581C911C
B42485441FCE5FFBF911F1D9988FC5C601D09514633B415378648CA65F2D6F40
F7CC23901787522154CC33941615849C4E5F2600BE11CE10B78AE007EC0E5137
4C66EF207977C2C2CE5FD8E70A74DA9968C71790516F1489FB5A2585DF9F5E06
9552F391999992E23975398FA0F539A299EF090B9CA16E940104614A4FA8C6D3
495975F6ADCA90522557B3F02FACDAB68EBFFBB8579876F09895D723E482DDF4
FDAE645CD275F3A8DE44AAD1D4C2987B6CD35FBB18312851D858E2F382FC606E
41B7B9393EA57A7FB9903CE835BF1F8E67C15EC8AF980D14FAB1A56EF1A62E14
5433A36160111440DE43D4C8F28013504ABFA5BE40DFA52D34AF251629A70368
73B22EC87849070CC52FE3B74D259E603996AAF50D77304A8B6631C652E482D4
C36A5EA242B3F6A979331BB593EDF29F2D9DC6B35BB39A5876E5378E71CF09BD
151E4B759D53762BB109DE5D452919DE87197C14A816E6970C6476C8A4F1BE28
E6FBCDD677D4379E9D96A978EDA97A0F256534A641017C46F0637A6886CF10E1
EBD75689D3CAD47F1ED6096F825036BFE59A50A550F0FCC978EFE560113A6231
60AE7DFF1BEB6846A97F44BA6196DFF0E9AAAB0F3F34EA25A98ABC50DE2C1812
47CD8A7E2F2BFB159544B845133FCD3B9F46D1C48462A806E9E614D5EB37B65F
BDE52075686731382196CAC3AE3161EBF89944F88A19A5CDCCA280C5A47CEDDE
B826B08AC1581B76BE95036D3797DF9D68406C79A4B51ADF64776AE9BCAA6D51
1362E7A00FDF2C9A6D40F64DDA4B706FAB728B6F6FA9302B4455661480719E97
CFB7A10536081E4E417984862DAD762591F1E352EB919871CFB4FED1E41534E9
EA6F14F0175F0EB194260AB3C99088BA3E5E99D1BEF8FA31DFDC7965DF7386B7
6196E350498D4D6E99DEFF547629910A67E9C18F5860124FD1504C60DE06A7F2
96C7A9189A9F1693CA17FD09A3C723DAC77B64A494147AD18E43156C122CCE4A
7E64C9645598540B0F9587295C79AB17E0EFCF9DC7455C52B576DFD557FB9241
9B6BEEA4296669B1AC6FBCD6A36E770D676D2D16E9493A2BA3C610F889315EE9
2C675C4AAD0D289C2CD57F80252D5611A196544197DD7994C11CE94999233291
6E9510F18204616B9A1DE160E081B140D7E73D6FECA39D368A2FC841785DD8FD
E082F797FC2A67358363FF20B5A0762AF9674CAD72D502790E60C934AF2992D6
1E00C8FE8253111A1DF3EBCCB9386DAD58D689D1231E310E26BB4DCB5FD613FB
052F5A18ADD75DEE6D2906F0E0156E91B6124ACD233B3A6A150FE90102E5075E
8FD84410360C848D236984ED2EF0F728D61E02422BFC73FE205DA17C15CC1A2B
09E95F87944EC709466D81A03DB3E4C30CDDEB936D191264060F3AF475E30592
F5B5B257D2551523DB672509B279210024C81D6546452138D6EC7BD602ACC3BA
92DA3E39C2E82786077D93492ECF2B562A2004258F47856731D2B3347F514E97
3975AE8458669835299F6A6966DE25D75B644AE2C16B463727A8AE10C1D99B77
19A3F0E4A1776137664AB17FD0BB8F00C310010BEA88078A6C436A069AF3591D
C15C2AFC4524BA4A10F86C01D9C9641201B73FB8B48E107D6A48A8E490C7DE36
CAD6DBFECEDFEF976AE5071223CA6D67758A6FAC4DF0DCBA0EF81E7AA860B96C
A41C168548C01EFD540B6C1366F6AD6AFD1AB243502A86FB184B3C7D9E62F397
DAEE458E60E6058ADDAA14EA5738881447869AA4C14468B701EE11DA0468E18F
946DF99C0E14434C6DF848316629CA47FF9B07038337966F12D383CADD3191DF
D0C105CB6FC5F610237BB3C6E242EFE7F516B4E2977709EDBD3DB7AE516C55E7
42F598B1128C488F11D9AEF8DBAB34EE26443381C8DB3FA8EC5D51CA73EDF779
8A4397FC6B28F7DFB72F5895A6B85986933AEDE8436846C7B54BC0DE554F4920
881BA7F72D4D74A987FEE10268166BBE2451B7E802445AA7F37281BBC52D622C
63C6F0E7C375CDE595F97ECC93F9B1D7B4DA58A683260D37E677D919AF1F8D07
019257782228E4602776546AC8B18751096B35060915B9F57FF72458E4DC65A0
377A0CDB71B67572401CCFD3A3D6E666B4AE09D0D0BB7AE25E9C74677117EB46
041AFF25E4F0660D6F0F20FBD3618AB79C7283E29A3FEB313E054934D4F863A1
1BE2F6896603072ADBCD36FFF8986EB0A40B5EBC198881C0D98302B116A46393
4A5A28E8EE8C15FEE32B4D798F49CF236D86B92B8F499033A7C8B205138E03D9
465E2180A40A1C23A9FBC0897F01D7B319F9A16E2FB6DA0EA3472267A89135EB
528CFD0877E8D6E4DABBF55B076E157727BB8331B85E8B3D5C8945A810BA97C8
5AC54FC15D87D60999F594D7F818939BA7527C467E54790062892C2748177742
86E395ADE5035BF049C399BB8E5B26813C6054B0EFD355444F1EF8F9545734DF
D39315573A9888A0522A1F918A31C5763A296683A898B0C9B0D6A251BF1E8DC9
D091F67A969D7780C15451EBF292BDEA8C0518A94DFD65EB4755B156188C88BD
1E7273E1A42F36C0C6E0FB68F94CEA264C84D1A517B53B0BEA8A936F9CF329B2
F4350B0CE11DD40C60358C55E4CC8E22EDE7B3F23ECBDA863BF9442BC91FD47E
1BA93B0C8B4BF4C285A2D8EEC6E7AFDC30E799BEDE4F80E5CF50E44B9D831914
1D0F635A452D3B835ABC68EE4F0A91D2B720BB2C5A1C9670B7675063A2B3BD3F
A2B3E0E04ED9832582F5515AF2EFF9EB42A6F3428012077754BA3854A60A3676
CE5D4730ED82E6AF4E94FF0D5DBD3054E122389437002BFCFE62A9FA3A223008
77CEF345E6A7DF0D81E0B7E53145C80493B3ABABB911186600AC62FEFFF4F775
480B37FE1365B3985DC2DA7D7E68619337185BDEC00EB881B4C8002485CB219A
D22C6E76503F3FE34DF9CB637B9996E2CD033AA4E4A7DFAE20ABDE997CE19D30
6FBE5992DA15B29CA142C73BA10292D0754E475341CCF20292957709B653D394
FD9EA4F1FF51F5992726B420AD06744BAE758B478EFE5CBBAB5138D6E4ABAFDA
E20AEF5359B2DAB8797AA0F03E2E9FAB9ACB87B3A121394FF1F617FACCDFEEAB
0A37F0052282AE177A5D52537DDF27956B459526E5CD19579F3127D1D8CE6C2B
CB48B923012E45D9F0EE55BA61EFAC69501F19679E8750ACCD1A381F3FCE07B3
ACFFB8F392F4F47794F7A0324A41A2C2E9885420DB19E1EEE2999B2CDFCAC48A
4186630DA766AE8A57D650A226E068F16147BEA623061C6A4784D911FB585269
B20E630978C45AAA9EF8A294FDDA952D6D1DCB0481C4DBE8A6CC2901C6CE24D6
6DF5DBE2E04E25627838C93E0ABC5414232BC8B3240023605ED2F848E848B881
11EE5C79A76F4F04D945A2BDB579211EF1B7BDEBD978A70E297A754AB4464ACF
6BB7EB6DC648DD591585A08F81174FFDBCD8AA5752C845DEDC25045FFDC7FD0F
06829558B22FAB5BFD98ACF80D5927A07DA8A3AA987A899E28E916FB19DF8BCB
741FCC90E115F979056CAAB4BF045605A37A998C561ABE01BCEA8D861E6EA214
481C40C4A9E46E91402D5E8C590CF59FDFD8BB1CC5A9F32DD0CB947527D857FD
477BA50486F6864CB7AB263AD03D83C857B0301FFC461601672BE6EED97FF91E
A2A00970A979454654E3AB7A02A32550E356E526DFF66FBC0D616A97B3EF67AE
AD84CC8B41FF49822A426A2ACACE486FB6B42A555B8BAC41E2433A185A3E6AB7
9D37E3F4527995AF8CACDB2F0A961A3282F7FC211E1D92207EFCF7AB4D8D8079
6139AC1034C3C6F7C9EA27740EFD72228AC15755B78B7D4B31114F6BB6EB3FD6
B634A62455209370BF8EA168F4A43ADE6D98EB32C53F5AD1A7E3A0DDBCB0A38A
FF90BC9D6BDFF772D621032A3DB0FF097C82B362D9B04D0BFA8D5B25F340933F
211EA7EEFCBA1490A4C8396541C44E1FB546EAB5F44F1D6B01BF258C573CE761
72BF6924CF561565602AED4210B6F7F8AF2A113DF97B8B940887D10D203862B8
88F1D7497248095970CC6FD9A1DBD506BBCD5EB548911B66840F812555122B46
A03394E8950452EF87EAF7D39C885971ADCC853799433B9CCD5CE4844FD65498
5D1DED29E1B7ACB16EBB96A0A60B69D5E86F78532CEE2D8976F7857130CA0932
B2ACB83E63A39A56DCAA101DAA6BE705FF575048CC768BB8F133D475A84589BE
79A66E6C29ACE5156971C30E226B368ED95F410F99EDB72B3F10E335C0B4508D
DDFCB0283B3A3F94CF0C7669ED9E365EDC2D5A99F18C212ABD1E598F5E312DB3
A0237D88483418CF7B8F43A76959551BEE28D7319ABCDFA4A21B5DE536B34845
B32A38264F36A01DFAC57E35F30F533077FDFA6DB83CBE362367A0B0EC105F70
BED7DA446A3AA2FA4194F8B38DF9766596D923DE6A4819F3DDB1411C376787DC
CC492091C35CC98FA817B5B18FE2517839D51030B695A5F8941839F600F61C14
247EFF780BBA3E5198D37CE6F4904651FE75CB3AE344D9DDD6D66B643350BBF6
D9F1E2B0B9FB06E184655B54E82FA19C6ECB9CF4F238694839894CBCF394C781
FFEA191AD06ABEBE440B9B4661FC1B985F869B5ED92BF513ADD2A34677D5EEDE
8D2A7C62CCC8D838ABBD910E13589CF5EBC5DD20C62F79E4A3A45C428AEE5549
03D3BCA3A994480430B3817F4C85C49A6D8DC5ED70049138602AEBF6B5E5D5E8
459680BD26BBAEB9A327BD3E7CADD265CF3D42E7B4F483087DAB79BD26B3297B
75E73D446B752513918E6AFF3A56AE8A2A6B779566ADCB995B47A4712422DFEF
01EA631F6E565297DC25F4943B0272AC32A384E2225C7D16114E13824EB9CF9F
91BED678FFE181B949BB229E1D4E5FDAC69238355F9B1A35230401234B32796B
3C664973CB2E4EBCF701844525B4F1654AB3439BA04CA9FDF2030FC5F4F3B99B
17045AE3C9D011119EA28A3A8FDB234368237B430878667F9C6A58AA46EF2DFA
0AE84699D187301B3AF3367D3FD8F5752305595318772FA188FBB9F82810A454
FB2A4967D4EBBB09D481DE7459E2C844A0E1323D2B6F87D6B598BAE54372A242
91740CDC8475F45009AA46CED2B7A665048F5A68CBF12A3850AC0E98EC8A75E4
B1D3BA2452F75EAA407DC832D250216D36BA634E1A2FA810E4408B83C940DDB3
F6E5329E2E6D86A84C33316C6E15A3A4062AA9946EE3BA3EB44DD748B4A8FF1D
76BA4C94EF5D5419BCF63C5CA802D12C20D9523E09E4E6E39F2AC260C6824AC3
CF271562EE3CDDE81BCBCF39FA73BB7970D93AC233846FF2EFFA2DFB4043FF4D
411B13CFF6A9570EE29CAEE9B5ED66F92F3918E329298D9F6293E8614966D0AE
927E21AB938CBA6D95C14BEFADB9037FF4E50E5E96D2CF4E175D249B2D4A7B74
1371F325256C47C1E5A3997AC78C25DEB004D00B4729E5749A10ED7612EAEC73
B243FF550C546B539EF01DE960C047E520BD847EC2DF4DC4532B7D7F4E7742FD
3CF0A6C30632A54D8FD7D1420E3F5F92C0CAE0749E97B5C4D36701572D861C7A
2D6404EBFD19FCD063B9F269AA8E7CFFACCEC903E9ABCB6ADFA4EB07AC36443D
C19A590402717FC200F6039D043FB5759B9FDFCCEF0A928C3ED536D82C3A3541
6BE740A5410D67AFE52FC469CC030BC2568366F1C2F5E26BE84489840775E474
4089EE8FC90ED5DB3168F736647968BDA608B66BAE07DEC4257E7FF340AFAA87
D26A57933BB6EC058698FE32291CF611A74BB8645BE24281BDC1FD61013AB760
2079B3C763CEF7699085C33EE973E7CBECACEF5E50D132AAF7E7C32A97DAB1BC
CCC899EBA81175526D2DD96D712E62BFCEC183D80B0D5658FE6880E580359DB4
4661981E8B79C0C240F0692F3C6FE22E584B1197B3CEF5DD0B1376678D38188B
D3F487E7576F4EE17E9A79A6E4A2CBEC1E2F0E9E245435A60A7F0D6D7DC137A9
04C96EB7B3CA2E65F64E835DEC8F847B7220B071C881940D1006E3B598E3BC4F
D84930759266FC5EBF0B1C1C89EF020B7A66D628BDEC01F851BB4960B9CBC118
E355CDC51B0E0D54CA17BD09ABA9BBD72A2B159A605AB4095E4238F1AB7CBAD5
433F43EFC5ACDE0D20137D7678701CA4B50CBAD741FA6CA6CE98D6C98C6764B0
0D6917ECCB47C929FF61CEC13E52B94E04C78E258B981CED675464E69C98E717
248052921596E6F8091CFDF57E6FBDB1DDC3FBE92E6AD8B083E786805630E8E5
35FA120AB939CBA2657A7C7612B2A1C7A1143761B6D5C65956F6DD3B43BB4A68
83A62A5197EB748BED7045515C3A3831E5B5172880FD66C321DAC4222BAE395C
A2C09112706B19396BFBA6BCAAF617825376C975A3D5D0DF64B37AA8944560A6
CD0B93B6ADE804ED2E6616E038FD0F998FBA3EBC109882B5C0EDDCE8A5C8BD45
A2E953323BD45B03B68B6BE3C93F22E50000507E4583940428A6F5255BFFA2B0
EA17A7C5FED819BEB1A91435F09A53A2A42FDCE3C59C55ED94AEDF972FD345BE
878E09FABC6B9F012D4C70BFB2F53E9C85E6BBC957E31B7641A7AC5AE47C6887
EBDDE84EE1D3FFEEAC6894F03C8CE17D144AB1BA96804959137E26DF8F7500C7
174FFCBCEC10FA1BC8803E49B6071266BDFEE8451CB7AF4FC2F56904C2F57F82
D57A68DC6DC8FE3A4BF5358C1E85182FA043886A42803FD315F50753EC305286
CE4F06813A37AB2678451B57DB9945919A943F3F32B7AFFD8507E5921B38ECD1
5BD7EE144C6ED67589B32123C8D365B44E13F482348B7350AE5B73FF3C8C6833
FA4157C2F8A919EAEE7104260840D2E73361E3CDA10DD11956ABEDC6CF2E2C38
E61C6AAC389AB1497693C22AE9E7EE0CEA336D08D2C6DD91717558A540D66701
BF5A2542F03E5B728EBFCFCA7ED8DF4C73201E254E4E2B44321F4C7C2FEED025
14652D3BED8D1D05721C1335A7A9E1FEE12D4F36CFB2BFFBF4CC1A24ABE013C0
5004B25B3433DB6921D7696DB969049031B0CB88A0AEDBDF68CF3E2D9833F6C8
780E5B64EBF9DE7EF769AE6067EA1DC847519241D0B4196DC9476194093E2277
46DEFE78F5F6C6D40D037BF65373895D7695144554DE6036A00F651C09CB7A89
6806478AAC630288AB7CFB9557F73E4499F43C8B076B3ECA0B75C8309EA88B8F
B5F66B50A8CE0EE7DFD5E7713FD9D4FAA18B61CEBAEED7ED11D2EC68291D1035
18FA3CD33D77E6F9B2C17CC8AD1B95D34A687C0E28DBC15F0A44CE535FE17132
1AE710E464150C87BDDD01E993ECFDF9D85907DFF2849E4CCC067C5896BB45EF
FC13939561C6497893814DCC7304F3254E39EC3C2C41CBA5F86A233A629F16DF
DCE6318EF5BEE7AE2B97516E1997F3E166ECF0BBD9D4674331BD24B442988AE5
D947502BC84227155FCAA8366DB077447442AA8FF260E5AD5865F7792224E70C
30D6BF53F3F719F5722BD715DF2C1CFC3350F14D299D659144AFEF2CC4C163D4
CA5B65B7565F2E8DA11933828EF61DAC3D2581E36B499AEFCAF7E228E76BA996
6A15F12E599C7E98FA24280395AB59F1C747EB0FEFD2C6B5C4094660A6F17643
CC786A9216B5214F66E2E7AC43EE8BCC9A6FF83886A84BFB347B1E91BC754089
AF1A8E95925131D3636F8E1D4638B047137F6DA96B4A1B0CA38965696CD093E8
F653C4226111C4EEC123210174A272B66ABBC6DC0CF5329045EDA72F93EEE48A
A723B15364E09FE8AB34343F4BFF5D4BBD794A99FC5A11C7A2051997B0F766F4
D840020FD2C827CD53DA7CC6C481776A67DE9E80E32A994C4564124ADAED334D
6CD322243C5752A5FA0E96D3A9D8164B30854F8DAA64A3540B2ACECA11893F1A
D21D1FD4005DE775B46C18AA088650D2857A8AD5CEC84079D44377FA2A33C0EB
41B10B64C1425ADF4234D75B1C8023723BB19C1FD74FD12D112FC2BB60E3AB70
FBF7348740323E44B6BE8B3EF7FE3444518A18EFED89C421A7C4DAC421836FAA
01D50CBB9B91B3E9ECE7D245C6D0D1070D9F39B587A1B4927BFC6950BC760E65
BEEC544A2F2624C2FB5753918096AF3F890676A9A50100A441FF07305C22DF33
A13D826EE95EAA96DC1D2803492688ACB39571BA78453B0E3577686C180D8653
5E328929273A57CE63ABF9B840B8F8AC00A78CC6E35656CC9F8DBC66A1702A0E
7F971BDCAA719D1006932AADDAAF087796487FFD242A25CCB577C1669626621E
958717AA4AA8A104AEA70096D4A047C14C55990DC9FDCD0EE4644AEDA86E3FBF
411E5EE3411B9A27B90153AE20DACCDCAC65E06C257CDE0DBDAC43C3FEC43A53
C7D8E3C246E61800452C255BBC7B2510616EE30F4E6436B4D6BBD2AD3EF6AFD3
EE20738DE07BF2CBE94F97F95D13FD952A4FE5D6775847AB69C9862D301F4A05
A8E7DFD30A65F16EA1AF0D72D7EB0E1554062BA15666D0EFA45F7EC4CB4307A1
188ACC084E025343C477546AF3EDE43B35799E7C1CCC26F64676EE0E8D15731F
765580138E601F18B7102A2E630E0460843F29D78C5568325D3D51E39C9AA7A6
AF285F193B2925F3D34DD51EC5E40B73FF06EA29FD60F8F5C6D75B46601DB2F8
8F154A0121D8B302DCFFF365A173019AD974B1C41452C452E16F435AE9195FCB
9DD4FC4C787A78CF3EA951368C124BCEFDF7EEA5CCA90BE56E916A13B2BB3B72
FE84D5662F720F6E1CC35542AAAD1081DF4AFBB63ECE2DACCF4B69F218E2EC31
6951571CE3C0D286CD941CFA6E191FA584CF2DF22725462E6CD322643616C090
A53BE7D576ED6B7E0B795AA0CE8D74EDB88276CD044558B1004827BF9D16C979
42AECF8E7114E570730CBB76C985A8FF96F9AD40F7291E978CEEAB3E9FE42136
5DE93D3D2231A45ACC323D152C60CE542F5AD34C67701E33D3C415CBC4A7D3F4
6CDC7C4415C9BCE7795FA44C3BFEBFD041FFFB50A8DE8168A5E986B3C401AEC3
1AE98C6CBF5DB8F608C04A88C758D2CFFA0CAEAF0A927D5CFE4F28B5FA483AEE
DBB3C79D275C0E208F66F15D2B2A9D775A6C9609DFDA1A8258DE0377CB6FD4F6
F97C584A300EDCB426A936BAED12384A8BE421EA5B2AD968CB3E74C7CE428FB6
E196D27FF7837A89DBD0A5F0B7FDF4F9A1968DED5616D80C4A13F003DEF57066
9E04D1C9F2FE44D7049B28547F56501E44D4F841F1A68A1A7B6C18986B9F08FE
B7E0BCB347C41891488C452BBAE65706F9EBD28272A264742E9C8738E9CBF248
B08E9A7FD47C435BCA4BEBB62800F0168823FBF8EDD31B7CE4A672ED2826617D
5DA713CA96D9A7DB4BC0430553A46A086574C8704058DEB846AA6A8E9CD89567
E5E8710E44EA188EAF27CC6143198B3FB0FC6A2072A3F01FF6E8F4A9F83BC492
933883B447E9B68123F39C30535BD58CD5D7F27D522D910B810B5ECAA0E69600
ACE7364370C96FACD660BB5F5109DE4577134CACA706D79EA72A100D9DE9F86B
759274A09FD498DC56A013F0F796AB1835D0FB7A9BE1E11E1FF054A18E11BFC8
F0677F7473BBC8F898D0459DD17BFC1AD5039EACDB88F80734E7885BC2FDB093
B8953F9E792CB7C220C93B3E31107E438CDF8944DD5A06D0FE656D8475D961A2
D45E78C4A500DA28DCE4708418DF48C0D2FBDA2BDB78BC990F0587DD41B2DA03
47E14A66A206E9BFAEFD7ACE1E8C9AB4E45828D0D16B85C89BB871363CC37116
3497A3777C37913C6BB60E204B16923520E1B2ABB51673BB078799F0249EE1EF
90D642A00B4E58FBD7903D2FE2D30282A406D537878350AECF9FCBE755284DB5
E3464C26631380CB1B1661D4F72A7BE9033255C8ADC7DDFF704353DBD5BFB6B5
CDE2E6EF086EF399CBABD36EEAA113C4203F5EA1BEA0696A6B6CCFE5498D540D
44D1946A608EA2655E2E5B82DEB6491486588357D005FC7E581CDB561AA60E9E
9E9C1D03E2D3F5EB2B952382CEE178BCCA13CF4B05950EEFE932CF8B038E5822
D578E1E04DDF22CDDFD08FBF64959DB795D59207F29B11683920BE78A4FF696D
D6181B0497AC4466CB98DE812A6B13E1056A5D5A015AC9A9E25A29621A719D24
1E92F09A3B1614BABC7A16CC20A8CCC9EE7F4E3E3591662D74CB16F73F108F44
C0744DCBD53B3D19420B003B6E593BB4A407AFBCAB39F89DD3636FCAE97184F3
6AA54796F28CDAA9B945EE09F826DCF07D76F1189E7C1F2644AE0718BBDC6AB3
1C28926F3C7477DD2FD22F1873BDE4D10E22F7733443C6E8D6A897962EBECE67
79D0D962AC66AC44FA2DC3E1F2FDD407C09E0E74D981DF532959B1E7E19CA7B7
0D7184F69803C8B72F6896DC27BD49848132BA01CAFB36C564690389FBAFDC5D
DB1E142744E2F5E1AC35B3C397C8868193A9C2F6D3131190413BCE5371288C53
34A4015E53CAECC41C4C7D13B01CAC450402A1AF065B2333899B22D47246EC82
C084CCCC4A2AB850F91AF15CEBB58F0E1A686EAFE3CB12F1EB1939C11229AF42
8F3F75B7ABFB73394B2B2D85542665FA6170FD2FC49507C2B4F3FA77E99D0CF6
BBF8A50510DF29BD0D70065BF206831E8F728FB5BE066FFBA3800CC8AD97D850
92421A2FF14E890355C7A86711782DEADC9DD46CC860C45DF6F09FDB4784FFE9
8E815F50573A6EFF3D021B2C11566A0349B167C41BC9D004F3C3E8223626F3DE
904AE85C69AC5A7DA316A0FC59DB7F93C9932C21C7369FE2FA654756EF797F8F
0D4678AA13B4D9ABC98BB9E38CED96245EDBC1A93B7662C3A82888F1CCDFF42A
B3879F98EA7B136AE676E52680371D036D1801406A3A5009F8AF42A78AF74F6F
A4FD574F36AA2E64C6E1AD1A4021E7D29632C738C6F23CF4F34A9CED84942968
B40D4D871D79F2D10BFDA804BD47C3D4933E3B443D4765DB43B2BD11A1D4CD79
A5DF50A35A7075E0A73A9EC77B59540B407E062EF20906E6873997A3490967DC
FBB99FFA480FF4A373990222F26EA053BE90F93C5B50BEBCAC44621F6D7A106D
B9AD271E681133A39732C72F4CD00E826B2CA8093EE0049B0DDE72B9F10BF392
EEB7EB8AED2B53A6F2E2617058C2AAF242059AA51DD77F8A56C433059E839706
CE055F92D50162CC8BF51020AB411A3A0AB79B9C0735FCBB790D209F321D7FA3
4172BFC50C04FC2A6D8B6285F6F9DD0536E7C70D3AC58AB2DFA3EDD496C18C89
74ED468D68BFBE1EB035C42C067B094411A538C539CDD530B144082DA3B9C75E
0E7DEFA6223762D6D836884620738C02D626A9235C76FC30100A2FCA1C4BD955
BDD83929A72D232E65054535326E27D4D43B6FFC7B5F5BC6DDA52F90D8D8FA2C
E5E0A67765B1B080853E7E9248756130635A046957888FB3CB0C819A797C01F8
8B9D8981E959A12F6B06B822391217C553893E5DB1FA8CD19A23366E17681D0E
43BDB18055D15945B2E1CE2DE8A5821F6CC8CEE36C5B3BDDCB4B8EC7AAF5620F
27775D4B754C6DD160206DBA83310D820B6904B356AAD9202EB397348C0743D0
F234829B8A9C0B39ED96503E75CC6280F684DB64D969015B9BF09E2EB27D88CE
83FAA768E89ED11A2258BB34CDE1A6B86679411B5E93236E88E7A64869B9F4ED
56C6C5CFA68B814B94B7BE0A5F20BAEEEF18F331A58BE4704E5130FB4984C3FE
2474E6CF0930F1F349A85B3B6F37E3D2C3568B2F7CB6399399227A8C6D2090DF
33BE62AFA47A89960F43A955045A930A3841DAFE5A53E295F62ECE33E2FB8243
221A2E8AB1C86133E7FD4790B24F5C442017DEAFC7C75C2E346BC8B22BE275A3
86E514A8CE8659607A1D826653AA62D8B639349BD4DC1C9D7573936FFF6BE748
1A49FAEEB2946B73D52639A9092422F8550342E56C98651609E284BBE73FE7D5
D854C5AE42B7888DB9FEEBB7BB5138A9E24821DB2AE072773C1DD91907A984DE
4C96138BE3BDA2BE4027532813CCD910CE126E4E5478A1182109080D1E88AEE8
AEB789711C423632203EC9511A3AD6CF7BA3DAE051C48FD5DB2CB0672592340E
CF3D490DE5D2AC851155FBCECF61496F8795454F56B2A9673990B72A07FDFE01
51EE234A81EEA6DFA11DF15A3A29B3610C2F35242CD8E6D7EAD84B483CD61DA3
4CD433D12A603BCC1D0E9FD432F28513592B2818D277ED0F1D5D95616CD93B93
D45459AF43384C66A46105DA687839C5D78446E98286E8AB5BBCC5A8C431D8D7
B8D97EE4A450C722AF53D42EECD5FC0D9343070BC392C2A38453AE78243C52D4
E02E82A4A4310980801A463963CB87355A0F0473D5983C8671BC0EC4F54A9B7A
7F52C6D39DB1D0192C7D2330D65F128C47B2481B73BD918AB90FD7C517035EBE
97F26B0B58973EA9B5E0D111D9EACA2233AA7F73D90272AF096968AB75F3F1EB
B30B5DDD610E95F9288B318E8D3296CFD6AE32E51AEFB4E69ECA96FB5B40732F
E2BA1F6ADB2A95D564B19A3035E27F66F9B96F60939C130D20CBAD9EA901794A
B36126A199A07A30A2AE092A7FDB9B3BA6BB7A3CDDCD4ED2E3DFD19A3F4C0AA1
42797E0F0C40C15909BA02E8127B1D6467EEB319EA1DA53DD38776B3E05B8A14
55911AACF57CB21C5813EFEB16C8B38FD1EE596E98104052940A23C2D6CF26F3
15A1452EA51C9AB784C23CFDAF6F044A5C2AAA6CCC960F71CD71DEAE81B54335
F2AC0799F32A0BAFC0A4A0232894C35A36853AE144AC5AEA6395A2CBA52FE80E
62DC55D3531657B3D50BD845F8ED3FC10FD2C2F18D67BC5AF8C791E3BF0F9F31
D79095F8A0D322C981E3B2E063B71FD6A220A3B1458EA90D68B2B13A5D4A79B8
27C9392C43F57A5FE2380BE8DA45A7FD3452FC17F10A319F4703F39AF6B69683
9CE77606FCEA4474578526F290F5E23711BFFD23F038EEB1ECEEE23A6D8D4E99
C49CAB1B38421D93035C07283661D1CDFBC34C588C960D438F23509058B2A6B8
B8195337FCA53EE1174424C26B9F11A27785F5C795CBDC74BD7558878850674E
64703928E30CACB4FFE13F01DC45383306CED57B3B508F97949C052C711FFDF5
60F435C8A221B96FBA7306BAF8FB0E2B46B3E57B287AABF47B030B8DEE5D8ED3
23ED10F5EAECB037C85FE11EC9D98090AAECD3A1EBC887F047AB443D9A00A354
8E4D43485B8EC35170720C5CBC688A8EA87609EA3D3720D22930123109A15E1F
7FA87D87B0C1280BC971742F808B8FE40033FC2D108517971542915D70737B3F
22C6A831A9821624AE11334015AF0AC6745916FA18BBFF3B40EC21D2F06D11D7
31867F467C3EC40DD18B086F6DC3F475C3ED727BE7E559B6664DA6402967335A
48DEB6D86346965E58553C723571D8AAE53AE8F2B1C472AA53D222D84CBC1ECD
A196C8DCFABCC346689B72517E7F4D92C7AB7C80FA2BFA577B5AB9C6544250D9
B1D28C2862FA6EB1CA8C8516AB7007955D969ADF6CDE36D67F63BC681FC4855D
7D17D059958D31CAF4D343C6246AA241E912C3F136ED68E416B353DE0EB1187C
1B15ABA13BAA9F24548D00E722021FAD70D99E2FCCE6FA219D869C6BB67B5CF2
6F8C6A61D41E773D3D0004057BF9DF4692A176DA59B0240FC0E7C02D0BF476D7
68D438A2C249F632E3D7CF21012FAAAB5E2837E315B5547BD1FB67CE2D4AECC3
A2904C546D6F2ED297BD3D3A359F69CD6B39FD727392706083F71F65226003CB
9EC18D503C34B6DE697C4D00623F8A7C29ADFBEE0043D4664253B09D5670936E
46BCC1A7E9468FC101C52A772CDF558753D58F159D4609D26785ECE0C669C038
67BD392572D2C189CB1AC1CE9A758B951891700FF6BB8A50D662A49B05D78A21
B412B32B89A926F8B561998935167338ABDBF7E8DDAFFFC3D0003ED473CA9EDA
693A284FD65AE53BC897EC7BA6446656F2AA6DB63DE201E971AF222C24758A9D
002CA04DDD891FF9B91EF4E54E99C1DB82AC245B5134E71C17177E335A1CD452
FC844FB1DAA67F3D01C234385631BAE78B35812BB0A244542063A45F21700DDF
5F6CA1D87A1C83530D8837AE9A3A2A4B3708E7272F426F700148DD7894AB604F
BE26D76D2A60F888B1514F7C668D8E781B16E78E2D2314368F2228C2353E88B7
86F963BB76469CF7937893E2A2E4C21D45FC95F4483FED80420E4BCD787F6C19
79B0AC9B8BD0D3D8431684EAB1BB0599566DC66EF6FBE2FB5066FF7F3777956E
984735F551A81DBD3A13D927138E17A407A76A0D952CF226A3AB8E36539689ED
A836270AF7FD0DA0A9318C09C86A3CB60F8FF548AF36F41E2198B4B8EAA1C995
B7D1A07FF0F73B0283C8843E9A3001BE3232AB5D309CF795520A8122F5EFBE0D
7F58C0B3B3164F2725C5E2BBD41E82C1E2B1EA057A0446E0A67EBAAAA26CC57E
B28F3AE398CCFCD35FCF5AE53F2661518DAACC5BB06B4BFC89854C6244F22A33
BE2AB996C5E600D56640F3FEE824B277DEB9489E1A2312DA7F2B295D68882C1F
8C1FFC172AD2E5ED14C9849A1475958C8045F3223CFB75D31590775AC2166849
560F8D49B60CA4A2711548658678C9FEEE3FAF4B4ABC91988432BF3E266C7E70
1A76E26FA0401C5456071B3EB1BB3F89B77292DB0524EA2E493A637E055EFB16
5093E904545A26E9C5B2E79EE9A5EC110CCC126D530C543C78E3762A109DA8B5
5B5D2F2DA2E948BB584E86F4C180EAA5CFF839107FB3778DCB5BAC94F38F735C
17DF38ADD1FA4019E1C78B8C765108960CF2EA9A9EB6A509DA1BF8D458AEEA1F
8673C5EBF709F0B657C203BE67FE72A445A33EA29CBE2AB98C530B3B09A6E25A
20588EFFF7462ABF70F317B9920F1D62952C6AEC9BB50625F70E656329AB9934
A19389EF17F259FF8DED31548A72B91953C9E8D71D7F997EEAB1FFA2CD7959F5
D5D60446A9AC13D9FC400B1D2F07579ABEF8A41B467936EE590C5726746157C1
59F6B8E98376E2D25D93525F03CE42CF74417E06EBC15F22EFE2EE81841A6E31
207574B554E976C55E195BE5A0F39E42C4B0F3162AC51A6AD727D9F30B28CD02
1636DA053D3C70C3100DE74A8BE35DE6EE9B2C61FD0DD193731C827842117CFD
CB8A29E661556B520FD6F684654B0C2161229B747234C44EE18D7E6C717A039F
4F5A30BFCF14386B2F74ABF26DEFA87741E243204896A6A8DF9808C6D7D92843
1FA0A20890BEEEC43D47FC323EA893A3AF869BC77EE3B8804F8A3E6C023C6F02
32AE1B60FF198D449149D99FB18CFF48FB4E2B0326034F1308EAA8269F8E51AC
B2C935BDC209C9016972CE94807484DA4BDB6FD6295B9749942DDA4985B3C337
BD9AA38BBBFB0AC897261C4F4A2D835214E9B8C2285CF3EB21EBC145106F9D15
46488B7E05AB16B5657251762AD3074678F3F8ED06188645D84268430F570DB0
B767F4E98AF64533A3EEA239E77402DC6A2C47B6307CBDEE8B121F7280734E92
5399A6FC3F40BDFC7BF173EDB9C605AEA8257D525794DC4E3078046961A6D6EA
815E5C9592A541E6D7B40C9D4CC9BBB355498CB8F728C741D063B8155179E2BF
65713F0B2FB184A22431A900A1D791FBEEAD3844F05A418CE3A56FB2A09323A1
77A66C65B1A48AE227B011D169BB64F1AE9A062EA6D8BDDB8BAD542BC75C0A72
D6D59CA8D287BA1E6CEF5D81078E1A78688E25FB29F7408511F0991ACFA14F49
9950B37DBC46A9F832C10CB0D8A29A4913F440E37CBB1E7D42AD311159D0CD18
329A084EEAA25D41DFC60AAFB2A9B3C457CB0F070343B9C374A5D96592AA1456
27276D35C5A62AFCC12742CE51F94AB5CF2144D86C2A7367D171823BF399DE07
14AEA4DFDE65077AED94C46D13DB5ED402085FD6D0C922F918C8725F2D7B115D
EAF592FF10DE547F459195639C947A7361F61B3591B4B3D2AD55871CC1B812E9
950C19C66BBC1C47701DD14BD23D594BAB7221428DEF352714C19F53DDB0A60A
A7C1CEACCC27E186CAF8B9BB664049AF81B2031CF3584E8C73B55EEFFA8D06A7
A4E787770D16170867A7DA17D1FC4724D5495461FA22A2B391965A7C89B4AD4F
E164E5C98FF6DF4E217B5291FF986E99374770DF6167794B51B49454063FDD32
62025ACE6C6699B1CDD62CAA7B9C8609E85E4BCFE8DD334228C156D91D895E6E
E1C05F1B3EFFE541CAF9BFBF5F19D839D28A3C7ABFD513413546259C45BF5A79
6BF59C69AD96C0BAF5FC674AC0876EB549A4282B2E2F524AB2D5FA822DD06A36
B554B95B6EB26E70AD2A7E70D3D9D791C98869DB54CD7E87B42BEB7378FC12D7
02D80763370BB1D1FBB9B20AD97FDB9970F449CBDD7F031A5365EB733563A000
9E77C11D5BAA8A93988E1B193A03339BE43554E866208EA882DC1741E8573B6E
06FF4892CFE699EBC3FDE842DFA6D249F9A5AC910A0B34E3AD2DD597C43BE143
8465322D98679C11A15EF3E43613FAA8BA742F31DBF96519C4958DFF1577CAF4
99748FF2D24C157CD217D5585BAE73131662CFFFE0113FFA6CFC5D021F38BA34
411CA849EA0A8FADEC8A2749393C26B59748B7EA2EE208219968269C0662846A
65838CF6716692E7F000D7582B92469D4BC8FF30DFCABEF901CF67BB92EEF585
60A91E2C8A609C42DD84E758B919A074D4372616CFC873008A53C3EBA0C3A8FB
2D131E9E842D5A62EC5CEFC3BDCABE038B807840F418C9760ECA0E2EA98EE5C9
571ACFB0D94EEB9C8AB69C71FC5E9F152D05A763A666B6F9D28AF94094628D18
B6C709184C54219E60F42061ABA957D8FF89396B0A65BF934E92A787128F8089
6F1E394C06B7D1395D7EFE7A1BDE7B7013A26FD33D85628A8CC9CB8F1DC18883
82AC1B55F3AF17B8288B6D19BFFB27452737475D800F441AFE35DE04A179C230
B9583768198AF9E885CBE7E5DF7C07DBFFD7FE2DA8099D3EC4B7E304D81E9D51
76772060A43263A3DE6BD457A5F9D3ABDABDD0D83E28159A81073958626949FF
FE624B5D596D9A8EA97914E0B8F1A820DD3021487653D2D1356AE0CBAD1760AC
DB9E604EA13B2E40B9D52C8B505EEBA2AC6553B962F8B943B99688FEC2ADFE0E
E4BCDE144724912D54C06C9555983B2F9775F569E2409A827E21C32B7039E11C
C350FDF7B2F1993CFDBAEE7472FC0E46D66E3D27193F8118C30A993E766DF7D2
8DF9883A4068DD44503EFF5EB5A9D43EA502F124725CDD2422BEAA8E76475FC7
7D21EC47FDCDFA0BEB2107FFCE6C1F1248F10B17A1BA9E37F87401373886FF9B
5D54EB199BD73B0B2E8D0EEF9C7BA01BFA7EBB433878C42BEBC3B666CEE93AC9
E08297759A62DCC4B928D3E00B9A5A9FBEE82758DC63416FDC8B92D2846C21EF
9C0E7A3801DD4E147A4C81654A2BA82B45302DC949068C22A8356DBBC39C89CA
715FEB84CE42F5B02E1B8F8C8EC1AE3A970E3F5429FDAB436BCE4A9E3085AA5C
6A9264A0FE7737877EA29086D2055596B35A5BE0B1E00C0C21FEEE24F0CFC9BD
90C874D8B49B570C4A3FAE5AE9CF03C09A6AC27A87CCF5463E376A52122E1CB9
2942E376E62C7DA0834FB3E45F678E37B7382F34AB7EB9D69FE56DEAD7F3A9AE
84591C7A9A9381CBF9F8347448BE6E537025BE5267E954EB1E302B6203B16A23
D172E3D15C3696D0243F6EEB26FD0ADA6A5B1BB9D71AE17AF4A40E068FB2385E
8C41B48827477917EBB828671CC95C76077F6B4A096E1FA0D53C45F281E0E5A7
A70F0D6EED578D2A0052DE76A475D7BCD0A32681408A8FD7FADF9381BD9DCA80
77D2BEBABC341B441196011D609B32558B81AB668D35B3D34CBE5A60656CA45D
6D996338301A71E7ACA58806D00B4729E5749A10ED32610CB0CC6C33684CBF51
EA1A8891556B88B1C1D930345F5592584754BD27FAD4E014D96E4BFE44E78699
9A246E21FA5B6155099623BD305EF18BCE0233B75BB6F65ADB0D77EFAFC52858
02F8E863C43928AE86732F22F96B2ED77A530C72AA33199B05EF5E4F6200967D
E7B339BFC68BFB5A65C97500E450DA91D630F30DF340B73DE3589F9E6CA6EDC8
452DAD52BB832E96C439F6AF53CC81B1598E774BC1255EF48C6F37A34762CDF6
4C7AF61E44C52DBF8AB082FA491581D9E4C311C9D6155FDDD29CB39AAFD88BAD
0B34BFDD1CA8A95DE6CAF3DB2649C182DDAEFF570A33BD3A50323DE652488FBF
405E2135C731733FDE2F707BA26348A7A8982C304E2D9C71CC0430716A510686
25F642D9E9F1AE7F7417393DC2A256F55773FD5E1F796F42C2C4E016F2A75A94
03DC2FA2E4B81F11D9ADC414A697A2380AACE3AF56BE5C755F4B3D1B8B2C48C9
420228281D175D2EC3B5B66BC17DD76C98D2B534D4008268F5FB5F0286868750
8BC439CBA4EB0C6CD01AD1FD720F3BCCE3FA1852118AEAACAF62F3D8A7D29F66
591A7F31D6EF042C8627CF6D62DFCDB43FD3A726005AF884964053294483E26B
D10F9906C128581C4D2E1A9FE3DB80DA9C2370E49E59990AA59053F9FCC43BEE
BF8B75812F706A15B5A2C366A804723E15147EB8DB70BF5CFC1E33504E6129D7
4E1AD4B0E63DF853F93929EDAC44FBCD1FDF396484E830182C021C7CCCBFD54C
2CCABF0AC1E0A01D55BCC1051CE349E23CA50D19BB976883F1F004B7E8342112
19977205C57C945270C27911A1327F378BC3E506B8C10C0B1CB651816D77C35C
151AA7ABCABB804ACC066D422EA0345EC9707CE4D43AAF14E2BEC760727A8891
4CF9E1D6726AF641B3BBE8D474D3A8AF60E70429D704D46DCA3C0F7C8175E7DF
AB7EF20C806DA3F884BF85CF0AA57B816C8FADA6C972BBA045F6D319C9DB66E6
AB06B619B27C5D6E22CF8975E3F05150403E73701B10D4CA95E0
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
TeXDict begin 40258437 52099151 1000 600 600
(/Users/aleksczernicki/Documents/Uni/PW/metodyKomputeroweWSpalaniu/MKWS/reportLaTEX/.texpadtmp/repor)
@start /Fa 75[33 89[66 6[52 13[61 1[71 17[50 2[25 37[31
8[{ .167 SlantFont TeXBase1Encoding ReEncodeFont }8 99.6264
/URWPalladioL-Roma rf /Fb 12[44 62[33 57[44 50 1[72 1[55
33 39 39 1[50 44 55 78 28 2[28 50 50 28 39 50 41 46 44
9[94 2[61 3[61 2[94 6[55 2[66 1[72 14[50 3[25 33 25 35[33
8[{ TeXBase1Encoding ReEncodeFont }35 99.6264 /URWPalladioL-Ital
rf /Fc 194[76 17[76 43[{}2 99.6264 /CMR12 rf /Fd 205[35
50[{}1 66.4176 /CMR8 rf /Fe 156[42 41 51 97[{}3 99.6264
/CMMI12 rf /Ff 75[40 57[60 6[53 3[66 9[60 73 53 18[73
30[60 2[30 37[40 8[{ TeXBase1Encoding ReEncodeFont }11
119.552 /URWPalladioL-Bold rf /Fg 75[48 57[72 6[64 13[72
1[64 31[104 17[72 2[36 37[48 8[{ TeXBase1Encoding ReEncodeFont }9
143.462 /URWPalladioL-Bold rf /Fh 12[54 62[33 31[50 15[50
9[50 55 1[83 56 60 32 42 39 56 60 54 58 88 29 55 23 29
58 55 33 48 61 44 55 50 3[33 1[33 3[100 1[78 61 52 2[60
78 83 94 61 72 33 34 83 76 2[77 71 61 78 6[25 50 50 1[50
50 50 50 50 50 50 60 25 33 25 35[31 29 4[60 25 1[{
 TeXBase1Encoding ReEncodeFont }67 99.6264 /URWPalladioL-Roma
rf /Fi 139[33 44 39 1[61 10[50 1[44 61 50 9[100 21[78
14[50 50 40[33 8[{ TeXBase1Encoding ReEncodeFont }13
99.6264 /URWPalladioL-Bold rf /Fj 136[100 3[51 47 1[72
3[35 2[35 7[60 9[120 21[93 8[60 5[60 60 60 3[30 44[{
 TeXBase1Encoding ReEncodeFont }14 119.552 /URWPalladioL-Roma
rf /Fk 75[57 57[86 2[144 3[73 68 3[100 1[50 96 1[50 3[82
105 76 1[86 17[135 11[122 1[134 65[{ TeXBase1Encoding ReEncodeFont }16
172.188 /URWPalladioL-Roma rf /Fl 134[115 3[126 69 92
80 1[126 115 126 1[69 2[69 126 115 1[103 1[92 126 103
9[207 2[138 16[149 138 16[103 40[69 69 7[{
 TeXBase1Encoding ReEncodeFont }23 206.559 /URWPalladioL-Bold
rf /Fm 138[87 47 1[57 1[86 78 83 127 42 1[34 42 83 2[69
1[64 1[72 16[87 12[102 1[112 6[36 58[{ TeXBase1Encoding ReEncodeFont }
18 143.462 /URWPalladioL-Roma rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
%%BeginPaperSize: Letter
/setpagedevice where
{ pop << /PageSize [612 792] >> setpagedevice }
{ /letter where { pop letter } if }
ifelse
%%EndPaperSize
 end
%%EndSetup
%%Page: 1 1
TeXDict begin 1 0 bop 0 TeXcolorgray Black 0 TeXcolorgray
Black 0 TeXcolorgray 227 337 a
 /pssetRGBcolor /setrgbcolor load def /pssetCMYKcolor /setcmykcolor
load def /pssetGraycolor /setgray load def
 227 337 a 227 337 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 227
337 a 227 337 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 227 337 a 0 TeXcolorgray 0 TeXcolorgray
1353 1068 a Fm(Computational)35 b(Pr)m(oject)p 0 TeXcolorgray
0 TeXcolorgray 1818 1450 a(Cantera)p 0 TeXcolorgray 0
TeXcolorgray 1535 1931 a Fl(T)-19 b(ytu\007)52 b(pracy)p
0 TeXcolorgray 0 TeXcolorgray 1818 2999 a Fm(Author:)1463
3310 y Fk(Aleks)44 b(Czernicki)p 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 1556 5302 a Fj(W)-11 b(arsaw)g(,)28
b(April)i(2018)p 0 TeXcolorgray 0 TeXcolorgray eop end
%%Page: 1 2
TeXDict begin 1 1 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 1877 1358
a Fi(Abstract)227 1646 y Fh(Lor)n(em)33 b(ipsum)h(dolor)g(sit)f(amet,)i
(consetetur)g(sadipscing)f(elitr)-7 b(,)35 b(sed)e(diam)f(nonumyeirmod)
227 1827 y(tempor)k(invidunt)g(ut)g(labor)n(e)g(et)g(dolor)n(e)g(magna)
g(aliquyam)f(erat,)j(sed)d(diamvoluptua.)63 b(At)227
2007 y(ver)n(o)30 b(eos)f(et)g(accusam)g(et)h(justo)g(duo)f(dolor)n(es)
h(et)f(ea)g(r)n(ebum.)43 b(Stet)30 b(clita)f(kasd)h(guber)n(gr)n(en,)h
(no)227 2188 y(sea)i(takimata)h(sanctus)g(est)g(Lor)n(em)g(ipsum)g
(dolor)g(sit)g(amet.Lor)n(em)g(ipsum)f(dolor)i(sit)f(amet,)227
2368 y(consetetur)h(sadipscing)f(elitr)-7 b(,)35 b(sed)e(diam)g
(nonumyeirmod)i(tempor)f(invidunt)g(ut)f(labor)n(e)h(et)227
2549 y(dolor)n(e)24 b(magna)e(aliquyam)h(erat,)g(sed)g(diamvoluptua.)31
b(At)23 b(ver)n(o)g(eos)h(et)f(accusam)g(et)g(justo)h(duo)227
2729 y(dolor)n(es)34 b(et)f(ea)f(r)n(ebum.)55 b(Stet)33
b(clita)h(kasd)f(guber)n(gr)n(en,)j(no)d(sea)f(takimata)i(sanctus)g
(est)f(Lor)n(em)227 2910 y(ipsum)i(dolor)h(sit)g(amet.Lor)n(em)g(ipsum)
f(dolor)h(sit)g(amet,)h(consetetur)g(sadipscing)f(elitr)-7
b(,)38 b(sed)227 3091 y(diam)23 b(nonumyeirmod)i(tempor)g(invidunt)g
(ut)f(labor)n(e)h(et)f(dolor)n(e)h(magna)e(aliquyam)h(erat,)h(sed)227
3271 y(diamvoluptua.)31 b(At)25 b(ver)n(o)h(eos)f(et)g(accusam)h(et)f
(justo)h(duo)f(dolor)n(es)h(et)g(ea)e(r)n(ebum.)p 0 TeXcolorgray
0 TeXcolorgray eop end
%%Page: 2 3
TeXDict begin 2 2 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray -9 881 a Fl(Chapter)52 b(1)-9 1422 y(Wst)17
b(\010)-86 b(ep)-9 2030 y Fg(1.1)142 b(Cz)12 b(\010)-60
b(e)8 b(\264)-56 b(s)8 b(\264)-56 b(c)-9 2322 y Fh(Lor)n(em)33
b(ipsum)g(dolor)h(sit)g(amet,)h(consetetur)g(sadipscing)e(elitr)-7
b(,)36 b(sed)c(diam)h(nonumyeirmod)-9 2503 y(tempor)j(invidunt)g(ut)g
(labor)n(e)g(et)g(dolor)n(e)g(magna)f(aliquyam)h(erat,)i(sed)d
(diamvoluptua.)63 b(At)-9 2683 y(ver)n(o)29 b(eos)h(et)f(accusam)g(et)g
(justo)i(duo)e(dolor)n(es)h(et)f(ea)g(r)n(ebum.)43 b(Stet)30
b(clita)f(kasd)h(guber)n(gr)n(en,)h(no)-9 2864 y(sea)i(takimata)h
(sanctus)g(est)g(Lor)n(em)g(ipsum)f(dolor)i(sit)f(amet.Lor)n(em)f
(ipsum)h(dolor)g(sit)g(amet,)-9 3044 y(consetetur)h(sadipscing)e(elitr)
-7 b(,)36 b(sed)d(diam)g(nonumyeirmod)h(tempor)g(invidunt)g(ut)g(labor)
n(e)g(et)-9 3225 y(dolor)n(e)23 b(magna)g(aliquyam)g(erat,)g(sed)g
(diamvoluptua.)31 b(At)22 b(ver)n(o)i(eos)f(et)g(accusam)h(et)f(justo)h
(duo)-9 3406 y(dolor)n(es)33 b(et)g(ea)g(r)n(ebum.)54
b(Stet)34 b(clita)f(kasd)g(guber)n(gr)n(en,)k(no)c(sea)f(takimata)i
(sanctus)g(est)f(Lor)n(em)-9 3586 y(ipsum)25 b(dolor)h(sit)f(amet.)-9
3974 y Ff(1.1.1)118 b(Podcz)10 b(\010)-50 b(e)7 b(\264)-47
b(s)7 b(\264)-47 b(c)-9 4229 y Fh([De\002nicja)25 b(czegokolwiek])i
(Cokolwiek)f(jest)f(czymkolwiek.)137 4411 y(Lor)n(em)36
b(ipsum)f(dolor)i(sit)f(amet,)i(consetetur)f(sadipscing)f(elitr)-7
b(,)39 b(sed)c(diam)g(nonumyeir)n(-)-9 4592 y(mod)29
b(tempor)i(invidunt)f(ut)g(labor)n(e)g(et)g(dolor)n(e)g(magna)g
(aliquyam)f(erat,)i(sed)f(diamvoluptua.)-9 4773 y(At)24
b(ver)n(o)i(eos)g(et)f(accusam)g(et)g(justo)h(duo)g(dolor)n(es)g(et)f
(ea)f(r)n(ebum.)137 4955 y([Pietii)h(Gorasa])h Fe(a)843
4919 y Fd(2)905 4955 y Fc(+)c Fe(b)1044 4919 y Fd(2)1111
4955 y Fc(=)28 b Fe(c)1257 4919 y Fd(2)p 0 TeXcolorgray
-9 5229 a Fb(Pr)n(oof.)p 0 TeXcolorgray 48 w Fh(Lor)n(em)22
b(ipsum)g(dolor)h(sit)g(amet,)f(consetetur)h(sadipscing)g(elitr)-7
b(,)22 b(sed)g(diam)f(nonumyeir)n(-)-9 5409 y(mod)29
b(tempor)i(invidunt)f(ut)g(labor)n(e)g(et)g(dolor)n(e)g(magna)g
(aliquyam)f(erat,)i(sed)f(diamvoluptua.)p 0 TeXcolorgray
1807 5659 a(2)p 0 TeXcolorgray eop end
%%Page: 3 4
TeXDict begin 3 3 bop 0 TeXcolorgray 0 TeXcolorgray 227
-217 a Fa(1.1.)55 b(CZ)36 b(\010)-67 b(E)644 -241 y(\264)630
-217 y(S)705 -241 y(\264)682 -217 y(C)3107 b Fh(3)p 0
TeXcolorgray 227 90 a(At)29 b(ver)n(o)h(eos)f(et)h(accusam)f(et)h
(justo)g(duo)g(dolor)n(es)g(et)f(ea)g(r)n(ebum.)44 b(Stet)30
b(clita)g(kasd)f(guber)n(gr)n(en,)227 271 y(no)22 b(sea)g(takimata)h
(sanctus)g(est)g(Lor)n(em)f(ipsum)h(dolor)g(sit)g(amet.Lor)n(em)f
(ipsum)h(dolor)g(sit)g(amet,)227 451 y(consetetur)35
b(sadipscing)f(elitr)-7 b(,)35 b(sed)e(diam)g(nonumyeirmod)i(tempor)f
(invidunt)g(ut)f(labor)n(e)h(et)227 632 y(dolor)n(e)24
b(magna)e(aliquyam)h(erat,)g(sed)g(diamvoluptua.)31 b(At)23
b(ver)n(o)g(eos)h(et)f(accusam)g(et)g(justo)h(duo)227
812 y(dolor)n(es)34 b(et)f(ea)f(r)n(ebum.)55 b(Stet)33
b(clita)h(kasd)f(guber)n(gr)n(en,)j(no)d(sea)f(takimata)i(sanctus)g
(est)f(Lor)n(em)227 993 y(ipsum)25 b(dolor)h(sit)f(amet.)p
3837 993 4 68 v 3841 929 60 4 v 3841 993 V 3901 993 4
68 v 373 1248 a([Dy])h(Dy-lemat)373 1429 y(Lor)n(em)36
b(ipsum)g(dolor)g(sit)g(amet,)i(consetetur)g(sadipscing)e(elitr)-7
b(,)38 b(sed)d(diam)g(nonumyeir)n(-)227 1609 y(mod)30
b(tempor)g(invidunt)g(ut)g(labor)n(e)g(et)g(dolor)n(e)h(magna)e
(aliquyam)h(erat,)h(sed)e(diamvoluptua.)227 1790 y(At)c(ver)n(o)h(eos)f
(et)g(accusam)g(et)g(justo)i(duo)e(dolor)n(es)h(et)f(ea)g(r)n(ebum.)373
1971 y(Lor)n(em)36 b(ipsum)g(dolor)g(sit)g(amet,)i(consetetur)g
(sadipscing)e(elitr)-7 b(,)38 b(sed)d(diam)g(nonumyeir)n(-)227
2151 y(mod)30 b(tempor)g(invidunt)g(ut)g(labor)n(e)g(et)g(dolor)n(e)h
(magna)e(aliquyam)h(erat,)h(sed)e(diamvoluptua.)227 2332
y(At)g(ver)n(o)h(eos)f(et)h(accusam)f(et)h(justo)g(duo)g(dolor)n(es)g
(et)f(ea)g(r)n(ebum.)44 b(Stet)30 b(clita)g(kasd)f(guber)n(gr)n(en,)227
2512 y(no)22 b(sea)g(takimata)h(sanctus)g(est)g(Lor)n(em)f(ipsum)h
(dolor)g(sit)g(amet.Lor)n(em)f(ipsum)h(dolor)g(sit)g(amet,)227
2693 y(consetetur)35 b(sadipscing)f(elitr)-7 b(,)35 b(sed)e(diam)g
(nonumyeirmod)i(tempor)f(invidunt)g(ut)f(labor)n(e)h(et)227
2873 y(dolor)n(e)24 b(magna)e(aliquyam)h(erat,)g(sed)g(diamvoluptua.)31
b(At)23 b(ver)n(o)g(eos)h(et)f(accusam)g(et)g(justo)h(duo)227
3054 y(dolor)n(es)34 b(et)f(ea)f(r)n(ebum.)55 b(Stet)33
b(clita)h(kasd)f(guber)n(gr)n(en,)j(no)d(sea)f(takimata)i(sanctus)g
(est)f(Lor)n(em)227 3235 y(ipsum)25 b(dolor)h(sit)f(amet.)373
3415 y(Lor)n(em)36 b(ipsum)g(dolor)g(sit)g(amet,)i(consetetur)g
(sadipscing)e(elitr)-7 b(,)38 b(sed)d(diam)g(nonumyeir)n(-)227
3596 y(mod)30 b(tempor)g(invidunt)g(ut)g(labor)n(e)g(et)g(dolor)n(e)h
(magna)e(aliquyam)h(erat,)h(sed)e(diamvoluptua.)227 3776
y(At)c(ver)n(o)h(eos)f(et)g(accusam)g(et)g(justo)i(duo)e(dolor)n(es)h
(et)f(ea)g(r)n(ebum.)373 3957 y(Lor)n(em)36 b(ipsum)g(dolor)g(sit)g
(amet,)i(consetetur)g(sadipscing)e(elitr)-7 b(,)38 b(sed)d(diam)g
(nonumyeir)n(-)227 4138 y(mod)30 b(tempor)g(invidunt)g(ut)g(labor)n(e)g
(et)g(dolor)n(e)h(magna)e(aliquyam)h(erat,)h(sed)e(diamvoluptua.)227
4318 y(At)g(ver)n(o)h(eos)f(et)h(accusam)f(et)h(justo)g(duo)g(dolor)n
(es)g(et)f(ea)g(r)n(ebum.)44 b(Stet)30 b(clita)g(kasd)f(guber)n(gr)n
(en,)227 4499 y(no)22 b(sea)g(takimata)h(sanctus)g(est)g(Lor)n(em)f
(ipsum)h(dolor)g(sit)g(amet.Lor)n(em)f(ipsum)h(dolor)g(sit)g(amet,)227
4679 y(consetetur)35 b(sadipscing)f(elitr)-7 b(,)35 b(sed)e(diam)g
(nonumyeirmod)i(tempor)f(invidunt)g(ut)f(labor)n(e)h(et)227
4860 y(dolor)n(e)24 b(magna)e(aliquyam)h(erat,)g(sed)g(diamvoluptua.)31
b(At)23 b(ver)n(o)g(eos)h(et)f(accusam)g(et)g(justo)h(duo)227
5040 y(dolor)n(es)34 b(et)f(ea)f(r)n(ebum.)55 b(Stet)33
b(clita)h(kasd)f(guber)n(gr)n(en,)j(no)d(sea)f(takimata)i(sanctus)g
(est)f(Lor)n(em)227 5221 y(ipsum)25 b(dolor)h(sit)f(amet.)p
0 TeXcolorgray 0 TeXcolorgray eop end
%%Page: 4 5
TeXDict begin 4 4 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray -9 879 a Fl(Bibliography)p 0 TeXcolorgray
-9 1392 a Fh([1])p 0 TeXcolorgray 98 w(Stanis\007aw)34
b(Bia\007as,)h Fb(Macierze.)d(W)n(ybrane)h(pr)n(oblemy)p
Fh(,)h(AGH)f(Uczelniane)f(W)-5 b(ydawnictwa)205 1572
y(Naukowo-Dydaktyczne,)27 b(Krak\363w)-9 b(,)26 b(2006.)p
0 TeXcolorgray -9 1836 a([2])p 0 TeXcolorgray 98 w(Nicholas)61
b(J.)e(Higham,)69 b Fb(Accuracy)59 b(and)h(stability)f(of)h(numerical)f
(algorithms)p Fh(,)67 b(SIAM,)205 2016 y(Philadelphia)24
b(1996.)p 0 TeXcolorgray -9 2280 a([3])p 0 TeXcolorgray
98 w(Nicholas)55 b(J.)f(Higham,)62 b Fb(Functions)55
b(of)f(Matrices.)g(Theory)f(and)i(Computation)p Fh(,)63
b(SIAM,)205 2460 y(Philadelphia)24 b(2008.)p 0 TeXcolorgray
-9 2724 a([4])p 0 TeXcolorgray 98 w(Maksymilian)k(Dryja,)g(Janina)e(i)h
(Micha\007)f(Jankowscy)-11 b(,)29 b Fb(Przegl)20 b(\010)-53
b(ad)26 b(metod)g(i)g(algorytm\363w)g(nu-)205 2905 y(merycznych,)d(cz)s
(\010)-36 b(e)s(\264)g(s)t(\264)f(c)24 b(2)p Fh(,)h(W)-5
b(ydawnictwa)25 b(Naukowo-T)-9 b(echiczne,)25 b(W)-9
b(arszawa)25 b(1982.)p 0 TeXcolorgray 1807 5659 a(4)p
0 TeXcolorgray eop end
%%Page: 5 6
TeXDict begin 5 5 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray 227 879 a Fl(Contents)227 1491 y Fi(1)99
b(Wst)8 b(\010)-41 b(ep)3196 b(2)376 1672 y Fh(1.1)104
b(Cz)8 b(\010)-39 b(e)5 b(\264)-38 b(s)6 b(\264)-39 b(c)64
b(.)50 b(.)g(.)f(.)h(.)g(.)f(.)h(.)g(.)g(.)f(.)h(.)g(.)f(.)h(.)g(.)g(.)
f(.)h(.)g(.)g(.)f(.)h(.)g(.)f(.)h(.)g(.)g(.)f(.)h(.)g(.)f(.)h(.)g(.)g
(.)f(.)h(.)g(.)p 0 TeXcolorgray 146 w(2)p 0 TeXcolorgray
605 1852 a(1.1.1)119 b(Podcz)8 b(\010)-39 b(e)5 b(\264)-38
b(s)6 b(\264)-39 b(c)45 b(.)50 b(.)g(.)g(.)f(.)h(.)g(.)f(.)h(.)g(.)g(.)
f(.)h(.)g(.)g(.)f(.)h(.)g(.)f(.)h(.)g(.)g(.)f(.)h(.)g(.)f(.)h(.)g(.)g
(.)f(.)h(.)g(.)p 0 TeXcolorgray 146 w(2)p 0 TeXcolorgray
0 TeXcolorgray 2043 5659 a(5)p 0 TeXcolorgray eop end
%%Page: 6 7
TeXDict begin 6 6 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray -9 90 a Fh(W)-9 b(arszawa,)24 b(dnia)g(...............)p
0 TeXcolorgray 0 TeXcolorgray 1296 1666 a Fk(O)8 b(\264)-65
b(swiadczenie)-9 1929 y Fh(O)5 b(\264)-38 b(swiadczam,)631
1924 y(\001)619 1929 y(ze)27 b(prac)8 b(\010)-39 b(e)28
b(magistersk)h(\010)-60 b(a)29 b(pod)f(tytu\007em:)38
b(\204T)-9 b(ytu\007)28 b(pracy\224,)h(kt\363r)n(ej)h(pr)n(omotor)n(em)
-9 2110 y(jest)21 b(pr)n(of.)31 b(dr)21 b(hab.)29 b(Jan)21
b(W)-5 b(ybitny)-11 b(,)22 b(wykona\007em/am)g(samodzielnie,)f(co)h(po)
5 b(\264)-38 b(swiadczam)21 b(w\007as-)-9 2290 y(nor)6
b(\010)-39 b(ecznym)26 b(podpisem.)p 0 TeXcolorgray 0
TeXcolorgray 2602 3026 a(...........................................)p
0 TeXcolorgray 0 TeXcolorgray eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF
